
Mother-performance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080087c0  080087c0  000097c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089c0  080089c0  0000a038  2**0
                  CONTENTS
  4 .ARM          00000008  080089c0  080089c0  000099c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089c8  080089c8  0000a038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089c8  080089c8  000099c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089cc  080089cc  000099cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  080089d0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000038  08008a08  0000a038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08008a08  0000a410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001545a  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c0  00000000  00000000  0001f4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00021e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d27  00000000  00000000  00022f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002543c  00000000  00000000  00023c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016415  00000000  00000000  00049073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7292  00000000  00000000  0005f488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013671a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a34  00000000  00000000  00136760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013b194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000038 	.word	0x20000038
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080087a8 	.word	0x080087a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000003c 	.word	0x2000003c
 8000204:	080087a8 	.word	0x080087a8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <_ZN6BNO055C1EP17I2C_HandleTypeDefh>:


#include "BNO055.h"
#include "main.h"

BNO055::BNO055(I2C_HandleTypeDef* i2cHandle, uint8_t address)
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	71fb      	strb	r3, [r7, #7]
    : _i2cHandle(i2cHandle), _address(address << 1) {}
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	711a      	strb	r2, [r3, #4]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <_ZN6BNO0555beginEv>:

bool BNO055::begin() {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    uint8_t configMode = 0x00; // CONFIGMODE
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
    if (write(0x3D, &configMode, 1) != HAL_OK) {
 8000ecc:	f107 020f 	add.w	r2, r7, #15
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	213d      	movs	r1, #61	@ 0x3d
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 f893 	bl	8001000 <_ZN6BNO0555writeEhPht>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf14      	ite	ne
 8000ee0:	2301      	movne	r3, #1
 8000ee2:	2300      	moveq	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <_ZN6BNO0555beginEv+0x2e>
        return false;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e019      	b.n	8000f22 <_ZN6BNO0555beginEv+0x62>
    }
    HAL_Delay(30);
 8000eee:	201e      	movs	r0, #30
 8000ef0:	f002 f928 	bl	8003144 <HAL_Delay>

    uint8_t ndofMode = 0x0C;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	73bb      	strb	r3, [r7, #14]
//    uint8_t imuMode = 0x08;
    if (write(0x3D, &ndofMode, 1) != HAL_OK) {
 8000ef8:	f107 020e 	add.w	r2, r7, #14
 8000efc:	2301      	movs	r3, #1
 8000efe:	213d      	movs	r1, #61	@ 0x3d
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f87d 	bl	8001000 <_ZN6BNO0555writeEhPht>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf14      	ite	ne
 8000f0c:	2301      	movne	r3, #1
 8000f0e:	2300      	moveq	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <_ZN6BNO0555beginEv+0x5a>
        return false;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e003      	b.n	8000f22 <_ZN6BNO0555beginEv+0x62>
    }
    HAL_Delay(30);
 8000f1a:	201e      	movs	r0, #30
 8000f1c:	f002 f912 	bl	8003144 <HAL_Delay>

    return true;
 8000f20:	2301      	movs	r3, #1
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <_ZN6BNO05514getEulerAnglesERfS0_S0_>:
void BNO055::setMode(uint8_t mode) {
    write(0x3D, &mode, 1);
    HAL_Delay(30);
}

void BNO055::getEulerAngles(float& heading, float& roll, float& pitch) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	603b      	str	r3, [r7, #0]
    uint8_t eulerData[6];
    if (read(0x1A, eulerData, 6) == HAL_OK) {
 8000f3a:	f107 0214 	add.w	r2, r7, #20
 8000f3e:	2306      	movs	r3, #6
 8000f40:	211a      	movs	r1, #26
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f000 f87c 	bl	8001040 <_ZN6BNO0554readEhPht>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf0c      	ite	eq
 8000f4e:	2301      	moveq	r3, #1
 8000f50:	2300      	movne	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d04d      	beq.n	8000ff4 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xc8>
        int16_t headingRaw = ((int16_t)eulerData[1] << 8) | eulerData[0];
 8000f58:	7d7b      	ldrb	r3, [r7, #21]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	7d3b      	ldrb	r3, [r7, #20]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	83fb      	strh	r3, [r7, #30]
        int16_t rollRaw = ((int16_t)eulerData[3] << 8) | eulerData[2];
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	7dbb      	ldrb	r3, [r7, #22]
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	83bb      	strh	r3, [r7, #28]
        int16_t pitchRaw = ((int16_t)eulerData[5] << 8) | eulerData[4];
 8000f74:	7e7b      	ldrb	r3, [r7, #25]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	7e3b      	ldrb	r3, [r7, #24]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	837b      	strh	r3, [r7, #26]

        heading = headingRaw / 16.0;
 8000f82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa90 	bl	80004ac <__aeabi_i2d>
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 8000f92:	f7ff fc1f 	bl	80007d4 <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fdb1 	bl	8000b04 <__aeabi_d2f>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	601a      	str	r2, [r3, #0]
        roll = rollRaw / 16.0;
 8000fa8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fa7d 	bl	80004ac <__aeabi_i2d>
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 8000fb8:	f7ff fc0c 	bl	80007d4 <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fd9e 	bl	8000b04 <__aeabi_d2f>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
        pitch = pitchRaw / 16.0;
 8000fce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa6a 	bl	80004ac <__aeabi_i2d>
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 8000fde:	f7ff fbf9 	bl	80007d4 <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fd8b 	bl	8000b04 <__aeabi_d2f>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	601a      	str	r2, [r3, #0]
    }
}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40300000 	.word	0x40300000

08001000 <_ZN6BNO0555writeEhPht>:

HAL_StatusTypeDef BNO055::write(uint8_t reg, uint8_t* data, uint16_t size) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af04      	add	r7, sp, #16
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	461a      	mov	r2, r3
 800100c:	460b      	mov	r3, r1
 800100e:	72fb      	strb	r3, [r7, #11]
 8001010:	4613      	mov	r3, r2
 8001012:	813b      	strh	r3, [r7, #8]
    return HAL_I2C_Mem_Write(_i2cHandle, _address, reg, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	791b      	ldrb	r3, [r3, #4]
 800101c:	4619      	mov	r1, r3
 800101e:	7afb      	ldrb	r3, [r7, #11]
 8001020:	b29a      	uxth	r2, r3
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	893b      	ldrh	r3, [r7, #8]
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	f003 f851 	bl	80040d8 <HAL_I2C_Mem_Write>
 8001036:	4603      	mov	r3, r0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <_ZN6BNO0554readEhPht>:

HAL_StatusTypeDef BNO055::read(uint8_t reg, uint8_t* data, uint16_t size) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af04      	add	r7, sp, #16
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	461a      	mov	r2, r3
 800104c:	460b      	mov	r3, r1
 800104e:	72fb      	strb	r3, [r7, #11]
 8001050:	4613      	mov	r3, r2
 8001052:	813b      	strh	r3, [r7, #8]
    return HAL_I2C_Mem_Read(_i2cHandle, _address, reg, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	4619      	mov	r1, r3
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	b29a      	uxth	r2, r3
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	893b      	ldrh	r3, [r7, #8]
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	f003 f92b 	bl	80042cc <HAL_I2C_Mem_Read>
 8001076:	4603      	mov	r3, r0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d104      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0x1a>
        m_counter++;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001098:	6013      	str	r3, [r2, #0]
    }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200000a8 	.word	0x200000a8
 80010ac:	20000318 	.word	0x20000318

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0ae      	sub	sp, #184	@ 0xb8
 80010b4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f001 ffd3 	bl	8003060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 fa91 	bl	80015e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f000 fd11 	bl	8001ae4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80010c2:	f000 fce7 	bl	8001a94 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80010c6:	f000 fb0d 	bl	80016e4 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80010ca:	f000 fb3f 	bl	800174c <_ZL12MX_TIM2_Initv>
  MX_USART6_UART_Init();
 80010ce:	f000 fcb3 	bl	8001a38 <_ZL19MX_USART6_UART_Initv>
  MX_UART5_Init();
 80010d2:	f000 fc27 	bl	8001924 <_ZL13MX_UART5_Initv>
  MX_USART3_UART_Init();
 80010d6:	f000 fc81 	bl	80019dc <_ZL19MX_USART3_UART_Initv>
  MX_TIM4_Init();
 80010da:	f000 fb93 	bl	8001804 <_ZL12MX_TIM4_Initv>
  MX_USART2_UART_Init();
 80010de:	f000 fc4f 	bl	8001980 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Servo_ON_GPIO_Port, Servo_ON_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2102      	movs	r1, #2
 80010e6:	48ad      	ldr	r0, [pc, #692]	@ (800139c <main+0x2ec>)
 80010e8:	f002 fe7e 	bl	8003de8 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);
 80010ec:	48ac      	ldr	r0, [pc, #688]	@ (80013a0 <main+0x2f0>)
 80010ee:	f004 fd59 	bl	8005ba4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart6, motor_send_array, 12, 10);
 80010f2:	230a      	movs	r3, #10
 80010f4:	220c      	movs	r2, #12
 80010f6:	49ab      	ldr	r1, [pc, #684]	@ (80013a4 <main+0x2f4>)
 80010f8:	48ab      	ldr	r0, [pc, #684]	@ (80013a8 <main+0x2f8>)
 80010fa:	f005 fc95 	bl	8006a28 <HAL_UART_Transmit>

  HAL_UART_Receive_DMA(&huart5,rxBufA,64);
 80010fe:	2240      	movs	r2, #64	@ 0x40
 8001100:	49aa      	ldr	r1, [pc, #680]	@ (80013ac <main+0x2fc>)
 8001102:	48ab      	ldr	r0, [pc, #684]	@ (80013b0 <main+0x300>)
 8001104:	f005 fdb2 	bl	8006c6c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2,rxBufB,64);
 8001108:	2240      	movs	r2, #64	@ 0x40
 800110a:	49aa      	ldr	r1, [pc, #680]	@ (80013b4 <main+0x304>)
 800110c:	48aa      	ldr	r0, [pc, #680]	@ (80013b8 <main+0x308>)
 800110e:	f005 fdad 	bl	8006c6c <HAL_UART_Receive_DMA>

//BNO setting start
  BNO055 bno055(&hi2c1);
 8001112:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001116:	2228      	movs	r2, #40	@ 0x28
 8001118:	49a8      	ldr	r1, [pc, #672]	@ (80013bc <main+0x30c>)
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff feba 	bl	8000e94 <_ZN6BNO055C1EP17I2C_HandleTypeDefh>

  if (!bno055.begin()) {
 8001120:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fecb 	bl	8000ec0 <_ZN6BNO0555beginEv>
 800112a:	4603      	mov	r3, r0
 800112c:	f083 0301 	eor.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d013      	beq.n	800115e <main+0xae>
	  // センサ初期化失敗時の処
	uint32_t Ltika_pcounter = m_counter;
 8001136:	4ba2      	ldr	r3, [pc, #648]	@ (80013c0 <main+0x310>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	while (1){
	if(m_counter - Ltika_pcounter > 100){
 800113e:	4ba0      	ldr	r3, [pc, #640]	@ (80013c0 <main+0x310>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b64      	cmp	r3, #100	@ 0x64
 800114a:	d9f8      	bls.n	800113e <main+0x8e>
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800114c:	2104      	movs	r1, #4
 800114e:	489d      	ldr	r0, [pc, #628]	@ (80013c4 <main+0x314>)
 8001150:	f002 fe63 	bl	8003e1a <HAL_GPIO_TogglePin>
	Ltika_pcounter = m_counter;
 8001154:	4b9a      	ldr	r3, [pc, #616]	@ (80013c0 <main+0x310>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	if(m_counter - Ltika_pcounter > 100){
 800115c:	e7ef      	b.n	800113e <main+0x8e>
//BNO setting finish

//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
//  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 25);

  HAL_Delay(2000);
 800115e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001162:	f001 ffef 	bl	8003144 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PERFORMANCE performance(perform, display_send_array, circle_relative_position, fish_relative_position, now_position);
 8001166:	f107 000c 	add.w	r0, r7, #12
 800116a:	4b97      	ldr	r3, [pc, #604]	@ (80013c8 <main+0x318>)
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b97      	ldr	r3, [pc, #604]	@ (80013cc <main+0x31c>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4b97      	ldr	r3, [pc, #604]	@ (80013d0 <main+0x320>)
 8001174:	4a97      	ldr	r2, [pc, #604]	@ (80013d4 <main+0x324>)
 8001176:	4998      	ldr	r1, [pc, #608]	@ (80013d8 <main+0x328>)
 8001178:	f000 ffcb 	bl	8002112 <_ZN11PERFORMANCEC1EPtPhPsS2_S2_>

  uint32_t Ltika_pcounter = m_counter;
 800117c:	4b90      	ldr	r3, [pc, #576]	@ (80013c0 <main+0x310>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  uint32_t d_pcounter = m_counter;
 8001184:	4b8e      	ldr	r3, [pc, #568]	@ (80013c0 <main+0x310>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  uint8_t OdoX_ID[3] = {248, 210, 210};
 800118c:	4a93      	ldr	r2, [pc, #588]	@ (80013dc <main+0x32c>)
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	4611      	mov	r1, r2
 8001196:	8019      	strh	r1, [r3, #0]
 8001198:	3302      	adds	r3, #2
 800119a:	0c12      	lsrs	r2, r2, #16
 800119c:	701a      	strb	r2, [r3, #0]
  uint8_t OdoY_ID[3] = {249, 210, 210};
 800119e:	4a90      	ldr	r2, [pc, #576]	@ (80013e0 <main+0x330>)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4611      	mov	r1, r2
 80011a6:	8019      	strh	r1, [r3, #0]
 80011a8:	3302      	adds	r3, #2
 80011aa:	0c12      	lsrs	r2, r2, #16
 80011ac:	701a      	strb	r2, [r3, #0]

  int16_t speed;
  int16_t p_speed = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

////START loop////

  while (1)
  {
	dtime = m_counter - d_pcounter;
 80011b4:	4b82      	ldr	r3, [pc, #520]	@ (80013c0 <main+0x310>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011be:	b29b      	uxth	r3, r3
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b87      	ldr	r3, [pc, #540]	@ (80013e4 <main+0x334>)
 80011c6:	801a      	strh	r2, [r3, #0]
	d_pcounter = m_counter;
 80011c8:	4b7d      	ldr	r3, [pc, #500]	@ (80013c0 <main+0x310>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	if(HAL_GPIO_ReadPin(TACTSW0_GPIO_Port, TACTSW0_Pin) == 1){rst_mcounter = m_counter;}
 80011d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011d4:	487b      	ldr	r0, [pc, #492]	@ (80013c4 <main+0x314>)
 80011d6:	f002 fdef 	bl	8003db8 <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b01      	cmp	r3, #1
 80011de:	bf0c      	ite	eq
 80011e0:	2301      	moveq	r3, #1
 80011e2:	2300      	movne	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <main+0x142>
 80011ea:	4b75      	ldr	r3, [pc, #468]	@ (80013c0 <main+0x310>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a7e      	ldr	r2, [pc, #504]	@ (80013e8 <main+0x338>)
 80011f0:	6013      	str	r3, [r2, #0]
	now_mcounter = m_counter - rst_mcounter;
 80011f2:	4b73      	ldr	r3, [pc, #460]	@ (80013c0 <main+0x310>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b7c      	ldr	r3, [pc, #496]	@ (80013e8 <main+0x338>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	4a7b      	ldr	r2, [pc, #492]	@ (80013ec <main+0x33c>)
 80011fe:	6013      	str	r3, [r2, #0]

////START get NOW-STATUS////
//get rotate
	bno055.getEulerAngles(heading, roll, pitch);
 8001200:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001204:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001208:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800120c:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8001210:	f7ff fe8c 	bl	8000f2c <_ZN6BNO05514getEulerAnglesERfS0_S0_>
	now_position[2] = int(heading * 50.0);
 8001214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f95a 	bl	80004d0 <__aeabi_f2d>
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b73      	ldr	r3, [pc, #460]	@ (80013f0 <main+0x340>)
 8001222:	f7ff f9ad 	bl	8000580 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fc41 	bl	8000ab4 <__aeabi_d2iz>
 8001232:	4603      	mov	r3, r0
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b64      	ldr	r3, [pc, #400]	@ (80013c8 <main+0x318>)
 8001238:	809a      	strh	r2, [r3, #4]

//get x coordinate
	HAL_UART_Transmit(&huart6, OdoX_ID, 3, 1);
 800123a:	f107 0108 	add.w	r1, r7, #8
 800123e:	2301      	movs	r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	4859      	ldr	r0, [pc, #356]	@ (80013a8 <main+0x2f8>)
 8001244:	f005 fbf0 	bl	8006a28 <HAL_UART_Transmit>
	if(HAL_UART_Receive(&huart6, rxDataX, 3, 1) == HAL_OK){
 8001248:	2301      	movs	r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	4969      	ldr	r1, [pc, #420]	@ (80013f4 <main+0x344>)
 800124e:	4856      	ldr	r0, [pc, #344]	@ (80013a8 <main+0x2f8>)
 8001250:	f005 fc75 	bl	8006b3e <HAL_UART_Receive>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <main+0x1bc>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001264:	2104      	movs	r1, #4
 8001266:	4857      	ldr	r0, [pc, #348]	@ (80013c4 <main+0x314>)
 8001268:	f002 fdd7 	bl	8003e1a <HAL_GPIO_TogglePin>
	}else{}
	now_position[0] = rxDataX[1] + rxDataX[2]*200 - 20000;
 800126c:	4b61      	ldr	r3, [pc, #388]	@ (80013f4 <main+0x344>)
 800126e:	785b      	ldrb	r3, [r3, #1]
 8001270:	461a      	mov	r2, r3
 8001272:	4b60      	ldr	r3, [pc, #384]	@ (80013f4 <main+0x344>)
 8001274:	789b      	ldrb	r3, [r3, #2]
 8001276:	4619      	mov	r1, r3
 8001278:	0089      	lsls	r1, r1, #2
 800127a:	440b      	add	r3, r1
 800127c:	4619      	mov	r1, r3
 800127e:	0088      	lsls	r0, r1, #2
 8001280:	4619      	mov	r1, r3
 8001282:	4603      	mov	r3, r0
 8001284:	440b      	add	r3, r1
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	b29b      	uxth	r3, r3
 800128e:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 8001292:	3b20      	subs	r3, #32
 8001294:	b29b      	uxth	r3, r3
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b4b      	ldr	r3, [pc, #300]	@ (80013c8 <main+0x318>)
 800129a:	801a      	strh	r2, [r3, #0]

//get y coordinate
	HAL_UART_Transmit(&huart6, OdoY_ID, 3, 1);
 800129c:	1d39      	adds	r1, r7, #4
 800129e:	2301      	movs	r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	4841      	ldr	r0, [pc, #260]	@ (80013a8 <main+0x2f8>)
 80012a4:	f005 fbc0 	bl	8006a28 <HAL_UART_Transmit>
	if(HAL_UART_Receive(&huart6, rxDataY, 3, 1) == HAL_OK){
 80012a8:	2301      	movs	r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	4952      	ldr	r1, [pc, #328]	@ (80013f8 <main+0x348>)
 80012ae:	483e      	ldr	r0, [pc, #248]	@ (80013a8 <main+0x2f8>)
 80012b0:	f005 fc45 	bl	8006b3e <HAL_UART_Receive>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf0c      	ite	eq
 80012ba:	2301      	moveq	r3, #1
 80012bc:	2300      	movne	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <main+0x21c>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80012c4:	2104      	movs	r1, #4
 80012c6:	483f      	ldr	r0, [pc, #252]	@ (80013c4 <main+0x314>)
 80012c8:	f002 fda7 	bl	8003e1a <HAL_GPIO_TogglePin>
	}else{}
	now_position[1] = rxDataY[1] + rxDataY[2]*200 - 20000;
 80012cc:	4b4a      	ldr	r3, [pc, #296]	@ (80013f8 <main+0x348>)
 80012ce:	785b      	ldrb	r3, [r3, #1]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b49      	ldr	r3, [pc, #292]	@ (80013f8 <main+0x348>)
 80012d4:	789b      	ldrb	r3, [r3, #2]
 80012d6:	4619      	mov	r1, r3
 80012d8:	0089      	lsls	r1, r1, #2
 80012da:	440b      	add	r3, r1
 80012dc:	4619      	mov	r1, r3
 80012de:	0088      	lsls	r0, r1, #2
 80012e0:	4619      	mov	r1, r3
 80012e2:	4603      	mov	r3, r0
 80012e4:	440b      	add	r3, r1
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 80012f2:	3b20      	subs	r3, #32
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	4b33      	ldr	r3, [pc, #204]	@ (80013c8 <main+0x318>)
 80012fa:	805a      	strh	r2, [r3, #2]
////END get NOW-STATUS////


////START get PERFORMANCE STATUS////
//get perform[] from TweLite
	readBuf(&huart5, rxBufA, 64, rxDataA, 4, 0, &p_wrtptA, &p_rdptA, &stop_counterA, &error_counterA, 10);
 80012fc:	230a      	movs	r3, #10
 80012fe:	9306      	str	r3, [sp, #24]
 8001300:	4b3e      	ldr	r3, [pc, #248]	@ (80013fc <main+0x34c>)
 8001302:	9305      	str	r3, [sp, #20]
 8001304:	4b3e      	ldr	r3, [pc, #248]	@ (8001400 <main+0x350>)
 8001306:	9304      	str	r3, [sp, #16]
 8001308:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <main+0x354>)
 800130a:	9303      	str	r3, [sp, #12]
 800130c:	4b3e      	ldr	r3, [pc, #248]	@ (8001408 <main+0x358>)
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2300      	movs	r3, #0
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	2304      	movs	r3, #4
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4b3c      	ldr	r3, [pc, #240]	@ (800140c <main+0x35c>)
 800131a:	2240      	movs	r2, #64	@ 0x40
 800131c:	4923      	ldr	r1, [pc, #140]	@ (80013ac <main+0x2fc>)
 800131e:	4824      	ldr	r0, [pc, #144]	@ (80013b0 <main+0x300>)
 8001320:	f000 fde0 	bl	8001ee4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>

	perform[0] = rxDataA[0];
 8001324:	4b39      	ldr	r3, [pc, #228]	@ (800140c <main+0x35c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <main+0x328>)
 800132c:	801a      	strh	r2, [r3, #0]
	perform[1] = rxDataA[1];
 800132e:	4b37      	ldr	r3, [pc, #220]	@ (800140c <main+0x35c>)
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	461a      	mov	r2, r3
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <main+0x328>)
 8001336:	805a      	strh	r2, [r3, #2]
	perform[2] = rxDataA[2];
 8001338:	4b34      	ldr	r3, [pc, #208]	@ (800140c <main+0x35c>)
 800133a:	789b      	ldrb	r3, [r3, #2]
 800133c:	461a      	mov	r2, r3
 800133e:	4b26      	ldr	r3, [pc, #152]	@ (80013d8 <main+0x328>)
 8001340:	809a      	strh	r2, [r3, #4]
	perform[3] = rxDataA[3];
 8001342:	4b32      	ldr	r3, [pc, #200]	@ (800140c <main+0x35c>)
 8001344:	78db      	ldrb	r3, [r3, #3]
 8001346:	461a      	mov	r2, r3
 8001348:	4b23      	ldr	r3, [pc, #140]	@ (80013d8 <main+0x328>)
 800134a:	80da      	strh	r2, [r3, #6]
	//	perform[1] = θ
	//	perform[2] = r
	//	perform[3] = mode

//interpreter data
	ref_speed_polar[0] = perform[2] * 25 / 10;//速度
 800134c:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <main+0x328>)
 800134e:	889b      	ldrh	r3, [r3, #4]
 8001350:	461a      	mov	r2, r3
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	009a      	lsls	r2, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	4a2c      	ldr	r2, [pc, #176]	@ (8001410 <main+0x360>)
 800135e:	fb82 1203 	smull	r1, r2, r2, r3
 8001362:	1092      	asrs	r2, r2, #2
 8001364:	17db      	asrs	r3, r3, #31
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b21a      	sxth	r2, r3
 800136a:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <main+0x364>)
 800136c:	801a      	strh	r2, [r3, #0]
	ref_speed_polar[1] = perform[1] * 45 / 32;//角度,360/32*45,左が0で前が270なので反時計回り
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <main+0x328>)
 8001370:	885b      	ldrh	r3, [r3, #2]
 8001372:	461a      	mov	r2, r3
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	011a      	lsls	r2, r3, #4
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	da00      	bge.n	8001384 <main+0x2d4>
 8001382:	331f      	adds	r3, #31
 8001384:	115b      	asrs	r3, r3, #5
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <main+0x364>)
 800138a:	805a      	strh	r2, [r3, #2]
////END get PERFORMANCE STATUS////


////START do MOVEMENT////
//motor shutdown flag
	if(perform[3] == 0){
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <main+0x328>)
 800138e:	88db      	ldrh	r3, [r3, #6]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d143      	bne.n	800141c <main+0x36c>
		motor_shdn_flag = 0;//stop
 8001394:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <main+0x368>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	e052      	b.n	8001442 <main+0x392>
 800139c:	40020000 	.word	0x40020000
 80013a0:	200000a8 	.word	0x200000a8
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000210 	.word	0x20000210
 80013ac:	20000380 	.word	0x20000380
 80013b0:	20000138 	.word	0x20000138
 80013b4:	200003cc 	.word	0x200003cc
 80013b8:	20000180 	.word	0x20000180
 80013bc:	20000054 	.word	0x20000054
 80013c0:	20000318 	.word	0x20000318
 80013c4:	40020400 	.word	0x40020400
 80013c8:	20000328 	.word	0x20000328
 80013cc:	20000348 	.word	0x20000348
 80013d0:	20000340 	.word	0x20000340
 80013d4:	2000000c 	.word	0x2000000c
 80013d8:	20000338 	.word	0x20000338
 80013dc:	080087c0 	.word	0x080087c0
 80013e0:	080087c4 	.word	0x080087c4
 80013e4:	20000324 	.word	0x20000324
 80013e8:	2000031c 	.word	0x2000031c
 80013ec:	20000320 	.word	0x20000320
 80013f0:	40490000 	.word	0x40490000
 80013f4:	20000378 	.word	0x20000378
 80013f8:	2000037c 	.word	0x2000037c
 80013fc:	200003c8 	.word	0x200003c8
 8001400:	200003c6 	.word	0x200003c6
 8001404:	200003c5 	.word	0x200003c5
 8001408:	200003c4 	.word	0x200003c4
 800140c:	200003c0 	.word	0x200003c0
 8001410:	66666667 	.word	0x66666667
 8001414:	20000330 	.word	0x20000330
 8001418:	20000375 	.word	0x20000375
	}else if(perform[3] == 1 || perform[3] == 2 || perform[3] == 3){
 800141c:	4b62      	ldr	r3, [pc, #392]	@ (80015a8 <main+0x4f8>)
 800141e:	88db      	ldrh	r3, [r3, #6]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d007      	beq.n	8001434 <main+0x384>
 8001424:	4b60      	ldr	r3, [pc, #384]	@ (80015a8 <main+0x4f8>)
 8001426:	88db      	ldrh	r3, [r3, #6]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d003      	beq.n	8001434 <main+0x384>
 800142c:	4b5e      	ldr	r3, [pc, #376]	@ (80015a8 <main+0x4f8>)
 800142e:	88db      	ldrh	r3, [r3, #6]
 8001430:	2b03      	cmp	r3, #3
 8001432:	d103      	bne.n	800143c <main+0x38c>
		motor_shdn_flag = 1;//move
 8001434:	4b5d      	ldr	r3, [pc, #372]	@ (80015ac <main+0x4fc>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e002      	b.n	8001442 <main+0x392>
	}else{
		motor_shdn_flag = 0;//stop
 800143c:	4b5b      	ldr	r3, [pc, #364]	@ (80015ac <main+0x4fc>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	}

//calculate speed
	//さすがに速度制御かけたい
	speed = ref_speed_polar[0];
 8001442:	4b5b      	ldr	r3, [pc, #364]	@ (80015b0 <main+0x500>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	speed = ((speed*8) + (p_speed*2) + 10-1)/ 10;//joystick入力のローパス
 800144a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 800144e:	009a      	lsls	r2, r3, #2
 8001450:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	@ 0x8a
 8001454:	4413      	add	r3, r2
 8001456:	3305      	adds	r3, #5
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	3b01      	subs	r3, #1
 800145c:	4a55      	ldr	r2, [pc, #340]	@ (80015b4 <main+0x504>)
 800145e:	fb82 1203 	smull	r1, r2, r2, r3
 8001462:	1092      	asrs	r2, r2, #2
 8001464:	17db      	asrs	r3, r3, #31
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	p_speed = speed;
 800146c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8001470:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a


	degree = ref_speed_polar[1];
 8001474:	4b4e      	ldr	r3, [pc, #312]	@ (80015b0 <main+0x500>)
 8001476:	885b      	ldrh	r3, [r3, #2]
 8001478:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
//calculate each motor speed from movement speed
	speed_set(now_position[2], speed, degree, motor_speed, 0.7);//回転制御したい
 800147c:	4b4e      	ldr	r3, [pc, #312]	@ (80015b8 <main+0x508>)
 800147e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	@ 0x82
 8001488:	f9b7 2080 	ldrsh.w	r2, [r7, #128]	@ 0x80
 800148c:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 80015bc <main+0x50c>
 8001490:	4b4b      	ldr	r3, [pc, #300]	@ (80015c0 <main+0x510>)
 8001492:	f000 fbb5 	bl	8001c00 <_Z9speed_setiiiPsf>
//calculate sending array from motor speed
	set_array(motor_speed, motor_send_array);
 8001496:	494b      	ldr	r1, [pc, #300]	@ (80015c4 <main+0x514>)
 8001498:	4849      	ldr	r0, [pc, #292]	@ (80015c0 <main+0x510>)
 800149a:	f000 fcb9 	bl	8001e10 <_Z9set_arrayPsPh>

//stop_flag
	if(HAL_GPIO_ReadPin(STRTSW_GPIO_Port, STRTSW_Pin) != 1){motor_stop_flag = 0;}//if Pin == 0, stop
 800149e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014a2:	4849      	ldr	r0, [pc, #292]	@ (80015c8 <main+0x518>)
 80014a4:	f002 fc88 	bl	8003db8 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	bf14      	ite	ne
 80014ae:	2301      	movne	r3, #1
 80014b0:	2300      	moveq	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <main+0x410>
 80014b8:	4b44      	ldr	r3, [pc, #272]	@ (80015cc <main+0x51c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e00b      	b.n	80014d8 <main+0x428>
//	else if(stop_counter > 10000){motor_stop_flag = 0;}
//	else if(error_counter > 10000){motor_stop_flag = 0;}
	else if(motor_shdn_flag != 1){motor_stop_flag = 0;}//if motor_shdn_flag == 0, stop
 80014c0:	4b3a      	ldr	r3, [pc, #232]	@ (80015ac <main+0x4fc>)
 80014c2:	f993 3000 	ldrsb.w	r3, [r3]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d003      	beq.n	80014d2 <main+0x422>
 80014ca:	4b40      	ldr	r3, [pc, #256]	@ (80015cc <main+0x51c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	e002      	b.n	80014d8 <main+0x428>
	else{motor_stop_flag = 1;}//move
 80014d2:	4b3e      	ldr	r3, [pc, #248]	@ (80015cc <main+0x51c>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]

//send to motor
	if(motor_stop_flag == 1){//if motor_stop_flag == 1, move
 80014d8:	4b3c      	ldr	r3, [pc, #240]	@ (80015cc <main+0x51c>)
 80014da:	f993 3000 	ldrsb.w	r3, [r3]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d106      	bne.n	80014f0 <main+0x440>
	  HAL_UART_Transmit(&huart6, motor_send_array, 12, 1);
 80014e2:	2301      	movs	r3, #1
 80014e4:	220c      	movs	r2, #12
 80014e6:	4937      	ldr	r1, [pc, #220]	@ (80015c4 <main+0x514>)
 80014e8:	4839      	ldr	r0, [pc, #228]	@ (80015d0 <main+0x520>)
 80014ea:	f005 fa9d 	bl	8006a28 <HAL_UART_Transmit>
 80014ee:	e030      	b.n	8001552 <main+0x4a2>
	}else{//if motor_stop_flag == 0, stop
		for(int i=0; i<4; i++){
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80014f6:	e022      	b.n	800153e <main+0x48e>
		  motor_send_array[3*i] = 250 + i;
 80014f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014fc:	b2d9      	uxtb	r1, r3
 80014fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	1f8a      	subs	r2, r1, #6
 800150a:	b2d1      	uxtb	r1, r2
 800150c:	4a2d      	ldr	r2, [pc, #180]	@ (80015c4 <main+0x514>)
 800150e:	54d1      	strb	r1, [r2, r3]
		  motor_send_array[3*i + 1] = 210;
 8001510:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	3301      	adds	r3, #1
 800151c:	4a29      	ldr	r2, [pc, #164]	@ (80015c4 <main+0x514>)
 800151e:	21d2      	movs	r1, #210	@ 0xd2
 8001520:	54d1      	strb	r1, [r2, r3]
		  motor_send_array[3*i + 2] = 210;
 8001522:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	3302      	adds	r3, #2
 800152e:	4a25      	ldr	r2, [pc, #148]	@ (80015c4 <main+0x514>)
 8001530:	21d2      	movs	r1, #210	@ 0xd2
 8001532:	54d1      	strb	r1, [r2, r3]
		for(int i=0; i<4; i++){
 8001534:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001538:	3301      	adds	r3, #1
 800153a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800153e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001542:	2b03      	cmp	r3, #3
 8001544:	ddd8      	ble.n	80014f8 <main+0x448>
		}
		HAL_UART_Transmit(&huart6, motor_send_array, 12, 1);
 8001546:	2301      	movs	r3, #1
 8001548:	220c      	movs	r2, #12
 800154a:	491e      	ldr	r1, [pc, #120]	@ (80015c4 <main+0x514>)
 800154c:	4820      	ldr	r0, [pc, #128]	@ (80015d0 <main+0x520>)
 800154e:	f005 fa6b 	bl	8006a28 <HAL_UART_Transmit>
////END do MOVEMENT////


////START display drawing////
//setting drawing status
	performance.cal_drawing_status_performance(m_counter);
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <main+0x524>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f000 ffef 	bl	8002540 <_ZN11PERFORMANCE30cal_drawing_status_performanceEm>

//send to panel
	performance.get_drawing_status_performance();
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4618      	mov	r0, r3
 8001568:	f000 ff14 	bl	8002394 <_ZN11PERFORMANCE30get_drawing_status_performanceEv>
	performance.set_display_send_array();
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fe31 	bl	80021d8 <_ZN11PERFORMANCE22set_display_send_arrayEv>
	HAL_UART_Transmit(&huart3, display_send_array, 31, 10);
 8001576:	230a      	movs	r3, #10
 8001578:	221f      	movs	r2, #31
 800157a:	4917      	ldr	r1, [pc, #92]	@ (80015d8 <main+0x528>)
 800157c:	4817      	ldr	r0, [pc, #92]	@ (80015dc <main+0x52c>)
 800157e:	f005 fa53 	bl	8006a28 <HAL_UART_Transmit>
////END calculate display drawing////


//Lチカ
	if(m_counter - Ltika_pcounter > 1000){
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <main+0x524>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001590:	f67f ae10 	bls.w	80011b4 <main+0x104>
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001594:	2104      	movs	r1, #4
 8001596:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <main+0x518>)
 8001598:	f002 fc3f 	bl	8003e1a <HAL_GPIO_TogglePin>
	Ltika_pcounter = m_counter;
 800159c:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <main+0x524>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80015a4:	e606      	b.n	80011b4 <main+0x104>
 80015a6:	bf00      	nop
 80015a8:	20000338 	.word	0x20000338
 80015ac:	20000375 	.word	0x20000375
 80015b0:	20000330 	.word	0x20000330
 80015b4:	66666667 	.word	0x66666667
 80015b8:	20000328 	.word	0x20000328
 80015bc:	3f333333 	.word	0x3f333333
 80015c0:	2000036c 	.word	0x2000036c
 80015c4:	20000000 	.word	0x20000000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	20000374 	.word	0x20000374
 80015d0:	20000210 	.word	0x20000210
 80015d4:	20000318 	.word	0x20000318
 80015d8:	2000000c 	.word	0x2000000c
 80015dc:	200001c8 	.word	0x200001c8

080015e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	@ 0x50
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	2234      	movs	r2, #52	@ 0x34
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f007 f8ae 	bl	8008750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	4b34      	ldr	r3, [pc, #208]	@ (80016dc <_Z18SystemClock_Configv+0xfc>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	4a33      	ldr	r2, [pc, #204]	@ (80016dc <_Z18SystemClock_Configv+0xfc>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	@ 0x40
 8001614:	4b31      	ldr	r3, [pc, #196]	@ (80016dc <_Z18SystemClock_Configv+0xfc>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001620:	2300      	movs	r3, #0
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	4b2e      	ldr	r3, [pc, #184]	@ (80016e0 <_Z18SystemClock_Configv+0x100>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a2d      	ldr	r2, [pc, #180]	@ (80016e0 <_Z18SystemClock_Configv+0x100>)
 800162a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b2b      	ldr	r3, [pc, #172]	@ (80016e0 <_Z18SystemClock_Configv+0x100>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800163c:	2301      	movs	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001640:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001644:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800164e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001650:	2310      	movs	r3, #16
 8001652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001654:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001658:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165a:	2302      	movs	r3, #2
 800165c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800165e:	2302      	movs	r3, #2
 8001660:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001662:	2302      	movs	r3, #2
 8001664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4618      	mov	r0, r3
 800166c:	f003 ffac 	bl	80055c8 <HAL_RCC_OscConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001680:	f000 fd41 	bl	8002106 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001684:	f003 fc08 	bl	8004e98 <HAL_PWREx_EnableOverDrive>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001698:	f000 fd35 	bl	8002106 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169c:	230f      	movs	r3, #15
 800169e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a0:	2302      	movs	r3, #2
 80016a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80016ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016b4:	f107 0308 	add.w	r3, r7, #8
 80016b8:	2105      	movs	r1, #5
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fc3c 	bl	8004f38 <HAL_RCC_ClockConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf14      	ite	ne
 80016c6:	2301      	movne	r3, #1
 80016c8:	2300      	moveq	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 80016d0:	f000 fd19 	bl	8002106 <Error_Handler>
  }
}
 80016d4:	bf00      	nop
 80016d6:	3750      	adds	r7, #80	@ 0x50
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40007000 	.word	0x40007000

080016e4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e8:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <_ZL12MX_I2C1_Initv+0x5c>)
 80016ea:	4a16      	ldr	r2, [pc, #88]	@ (8001744 <_ZL12MX_I2C1_Initv+0x60>)
 80016ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <_ZL12MX_I2C1_Initv+0x5c>)
 80016f0:	4a15      	ldr	r2, [pc, #84]	@ (8001748 <_ZL12MX_I2C1_Initv+0x64>)
 80016f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <_ZL12MX_I2C1_Initv+0x5c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <_ZL12MX_I2C1_Initv+0x5c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <_ZL12MX_I2C1_Initv+0x5c>)
 8001702:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001708:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <_ZL12MX_I2C1_Initv+0x5c>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170e:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <_ZL12MX_I2C1_Initv+0x5c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001714:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <_ZL12MX_I2C1_Initv+0x5c>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <_ZL12MX_I2C1_Initv+0x5c>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001720:	4807      	ldr	r0, [pc, #28]	@ (8001740 <_ZL12MX_I2C1_Initv+0x5c>)
 8001722:	f002 fb95 	bl	8003e50 <HAL_I2C_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf14      	ite	ne
 800172c:	2301      	movne	r3, #1
 800172e:	2300      	moveq	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001736:	f000 fce6 	bl	8002106 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000054 	.word	0x20000054
 8001744:	40005400 	.word	0x40005400
 8001748:	000186a0 	.word	0x000186a0

0800174c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	463b      	mov	r3, r7
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001768:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <_ZL12MX_TIM2_Initv+0xb4>)
 800176a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800176e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 8001770:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <_ZL12MX_TIM2_Initv+0xb4>)
 8001772:	2259      	movs	r2, #89	@ 0x59
 8001774:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <_ZL12MX_TIM2_Initv+0xb4>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800177c:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <_ZL12MX_TIM2_Initv+0xb4>)
 800177e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b1e      	ldr	r3, [pc, #120]	@ (8001800 <_ZL12MX_TIM2_Initv+0xb4>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <_ZL12MX_TIM2_Initv+0xb4>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001790:	481b      	ldr	r0, [pc, #108]	@ (8001800 <_ZL12MX_TIM2_Initv+0xb4>)
 8001792:	f004 f9b7 	bl	8005b04 <HAL_TIM_Base_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80017a6:	f000 fcae 	bl	8002106 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	4619      	mov	r1, r3
 80017b6:	4812      	ldr	r0, [pc, #72]	@ (8001800 <_ZL12MX_TIM2_Initv+0xb4>)
 80017b8:	f004 fc70 	bl	800609c <HAL_TIM_ConfigClockSource>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf14      	ite	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	2300      	moveq	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80017cc:	f000 fc9b 	bl	8002106 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4808      	ldr	r0, [pc, #32]	@ (8001800 <_ZL12MX_TIM2_Initv+0xb4>)
 80017de:	f005 f843 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80017f2:	f000 fc88 	bl	8002106 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200000a8 	.word	0x200000a8

08001804 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08e      	sub	sp, #56	@ 0x38
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	615a      	str	r2, [r3, #20]
 8001832:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001834:	4b39      	ldr	r3, [pc, #228]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 8001836:	4a3a      	ldr	r2, [pc, #232]	@ (8001920 <_ZL12MX_TIM4_Initv+0x11c>)
 8001838:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1800-1;
 800183a:	4b38      	ldr	r3, [pc, #224]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 800183c:	f240 7207 	movw	r2, #1799	@ 0x707
 8001840:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b36      	ldr	r3, [pc, #216]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001848:	4b34      	ldr	r3, [pc, #208]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 800184a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800184e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001850:	4b32      	ldr	r3, [pc, #200]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001856:	4b31      	ldr	r3, [pc, #196]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800185c:	482f      	ldr	r0, [pc, #188]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 800185e:	f004 f951 	bl	8005b04 <HAL_TIM_Base_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf14      	ite	ne
 8001868:	2301      	movne	r3, #1
 800186a:	2300      	moveq	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001872:	f000 fc48 	bl	8002106 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800187c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001880:	4619      	mov	r1, r3
 8001882:	4826      	ldr	r0, [pc, #152]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 8001884:	f004 fc0a 	bl	800609c <HAL_TIM_ConfigClockSource>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf14      	ite	ne
 800188e:	2301      	movne	r3, #1
 8001890:	2300      	moveq	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001898:	f000 fc35 	bl	8002106 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800189c:	481f      	ldr	r0, [pc, #124]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 800189e:	f004 f9f1 	bl	8005c84 <HAL_TIM_PWM_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2301      	movne	r3, #1
 80018aa:	2300      	moveq	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 80018b2:	f000 fc28 	bl	8002106 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	4619      	mov	r1, r3
 80018c4:	4815      	ldr	r0, [pc, #84]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 80018c6:	f004 ffcf 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 80018da:	f000 fc14 	bl	8002106 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018de:	2360      	movs	r3, #96	@ 0x60
 80018e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	4619      	mov	r1, r3
 80018f4:	4809      	ldr	r0, [pc, #36]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 80018f6:	f004 fb0f 	bl	8005f18 <HAL_TIM_PWM_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 800190a:	f000 fbfc 	bl	8002106 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800190e:	4803      	ldr	r0, [pc, #12]	@ (800191c <_ZL12MX_TIM4_Initv+0x118>)
 8001910:	f001 f950 	bl	8002bb4 <HAL_TIM_MspPostInit>

}
 8001914:	bf00      	nop
 8001916:	3738      	adds	r7, #56	@ 0x38
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200000f0 	.word	0x200000f0
 8001920:	40000800 	.word	0x40000800

08001924 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <_ZL13MX_UART5_Initv+0x54>)
 800192a:	4a14      	ldr	r2, [pc, #80]	@ (800197c <_ZL13MX_UART5_Initv+0x58>)
 800192c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800192e:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <_ZL13MX_UART5_Initv+0x54>)
 8001930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001934:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <_ZL13MX_UART5_Initv+0x54>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <_ZL13MX_UART5_Initv+0x54>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <_ZL13MX_UART5_Initv+0x54>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <_ZL13MX_UART5_Initv+0x54>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <_ZL13MX_UART5_Initv+0x54>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <_ZL13MX_UART5_Initv+0x54>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800195a:	4807      	ldr	r0, [pc, #28]	@ (8001978 <_ZL13MX_UART5_Initv+0x54>)
 800195c:	f005 f814 	bl	8006988 <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf14      	ite	ne
 8001966:	2301      	movne	r3, #1
 8001968:	2300      	moveq	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 8001970:	f000 fbc9 	bl	8002106 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000138 	.word	0x20000138
 800197c:	40005000 	.word	0x40005000

08001980 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001986:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800198a:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800198c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b6:	4807      	ldr	r0, [pc, #28]	@ (80019d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019b8:	f004 ffe6 	bl	8006988 <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bf14      	ite	ne
 80019c2:	2301      	movne	r3, #1
 80019c4:	2300      	moveq	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80019cc:	f000 fb9b 	bl	8002106 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000180 	.word	0x20000180
 80019d8:	40004400 	.word	0x40004400

080019dc <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <_ZL19MX_USART3_UART_Initv+0x54>)
 80019e2:	4a14      	ldr	r2, [pc, #80]	@ (8001a34 <_ZL19MX_USART3_UART_Initv+0x58>)
 80019e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <_ZL19MX_USART3_UART_Initv+0x54>)
 80019e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <_ZL19MX_USART3_UART_Initv+0x54>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <_ZL19MX_USART3_UART_Initv+0x54>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001a30 <_ZL19MX_USART3_UART_Initv+0x54>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a02:	220c      	movs	r2, #12
 8001a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a06:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a12:	4807      	ldr	r0, [pc, #28]	@ (8001a30 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a14:	f004 ffb8 	bl	8006988 <HAL_UART_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001a28:	f000 fb6d 	bl	8002106 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200001c8 	.word	0x200001c8
 8001a34:	40004800 	.word	0x40004800

08001a38 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a3e:	4a14      	ldr	r2, [pc, #80]	@ (8001a90 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a6e:	4807      	ldr	r0, [pc, #28]	@ (8001a8c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a70:	f004 ff8a 	bl	8006988 <HAL_UART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf14      	ite	ne
 8001a7a:	2301      	movne	r3, #1
 8001a7c:	2300      	moveq	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001a84:	f000 fb3f 	bl	8002106 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000210 	.word	0x20000210
 8001a90:	40011400 	.word	0x40011400

08001a94 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <_ZL11MX_DMA_Initv+0x4c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae0 <_ZL11MX_DMA_Initv+0x4c>)
 8001aa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <_ZL11MX_DMA_Initv+0x4c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	200b      	movs	r0, #11
 8001abc:	f001 fc41 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ac0:	200b      	movs	r0, #11
 8001ac2:	f001 fc5a 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2010      	movs	r0, #16
 8001acc:	f001 fc39 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ad0:	2010      	movs	r0, #16
 8001ad2:	f001 fc52 	bl	800337a <HAL_NVIC_EnableIRQ>

}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a3c      	ldr	r2, [pc, #240]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b36      	ldr	r3, [pc, #216]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a35      	ldr	r2, [pc, #212]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a27      	ldr	r2, [pc, #156]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a20      	ldr	r2, [pc, #128]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <_ZL12MX_GPIO_Initv+0x110>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Servo_ON_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2122      	movs	r1, #34	@ 0x22
 8001b8a:	481b      	ldr	r0, [pc, #108]	@ (8001bf8 <_ZL12MX_GPIO_Initv+0x114>)
 8001b8c:	f002 f92c 	bl	8003de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2104      	movs	r1, #4
 8001b94:	4819      	ldr	r0, [pc, #100]	@ (8001bfc <_ZL12MX_GPIO_Initv+0x118>)
 8001b96:	f002 f927 	bl	8003de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Servo_ON_Pin LED1_Pin */
  GPIO_InitStruct.Pin = Servo_ON_Pin|LED1_Pin;
 8001b9a:	2322      	movs	r3, #34	@ 0x22
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4811      	ldr	r0, [pc, #68]	@ (8001bf8 <_ZL12MX_GPIO_Initv+0x114>)
 8001bb2:	f001 ff6d 	bl	8003a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480b      	ldr	r0, [pc, #44]	@ (8001bfc <_ZL12MX_GPIO_Initv+0x118>)
 8001bce:	f001 ff5f 	bl	8003a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : STRTSW_Pin TACTSW0_Pin */
  GPIO_InitStruct.Pin = STRTSW_Pin|TACTSW0_Pin;
 8001bd2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <_ZL12MX_GPIO_Initv+0x118>)
 8001be8:	f001 ff52 	bl	8003a90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	@ 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020400 	.word	0x40020400

08001c00 <_Z9speed_setiiiPsf>:

/* USER CODE BEGIN 4 */
void speed_set(int gyro_degree, int goal_speed, int goal_degree, int16_t* mtrspeed, float motor_rate){
 8001c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c04:	b08a      	sub	sp, #40	@ 0x28
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6178      	str	r0, [r7, #20]
 8001c0a:	6139      	str	r1, [r7, #16]
 8001c0c:	60fa      	str	r2, [r7, #12]
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	ed87 0a01 	vstr	s0, [r7, #4]
	goal_degree = goal_degree % 360;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a78      	ldr	r2, [pc, #480]	@ (8001df8 <_Z9speed_setiiiPsf+0x1f8>)
 8001c18:	fb82 1203 	smull	r1, r2, r2, r3
 8001c1c:	441a      	add	r2, r3
 8001c1e:	1211      	asrs	r1, r2, #8
 8001c20:	17da      	asrs	r2, r3, #31
 8001c22:	1a8a      	subs	r2, r1, r2
 8001c24:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001c28:	fb01 f202 	mul.w	r2, r1, r2
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
	if(goal_degree < 0){goal_degree += 360;}
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da03      	bge.n	8001c3e <_Z9speed_setiiiPsf+0x3e>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c3c:	60fb      	str	r3, [r7, #12]


    int roll_speed;
    if(gyro_degree > 180 * 50){gyro_degree -= 360 * 50;}
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f242 3228 	movw	r2, #9000	@ 0x2328
 8001c44:	4293      	cmp	r3, r2
 8001c46:	dd05      	ble.n	8001c54 <_Z9speed_setiiiPsf+0x54>
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f5a3 438c 	sub.w	r3, r3, #17920	@ 0x4600
 8001c4e:	3b50      	subs	r3, #80	@ 0x50
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e008      	b.n	8001c66 <_Z9speed_setiiiPsf+0x66>
    else if(gyro_degree <-180 * 50){gyro_degree += 360 * 50;}
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	4a69      	ldr	r2, [pc, #420]	@ (8001dfc <_Z9speed_setiiiPsf+0x1fc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	da04      	bge.n	8001c66 <_Z9speed_setiiiPsf+0x66>
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f503 438c 	add.w	r3, r3, #17920	@ 0x4600
 8001c62:	3350      	adds	r3, #80	@ 0x50
 8001c64:	617b      	str	r3, [r7, #20]
    else{}


    if (gyro_degree > 0){
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	dd0e      	ble.n	8001c8a <_Z9speed_setiiiPsf+0x8a>
        roll_speed = gyro_degree;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (gyro_degree < 2 * 50){
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b63      	cmp	r3, #99	@ 0x63
 8001c74:	dc01      	bgt.n	8001c7a <_Z9speed_setiiiPsf+0x7a>
            roll_speed = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (roll_speed > 500){
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c80:	dd17      	ble.n	8001cb2 <_Z9speed_setiiiPsf+0xb2>
            roll_speed = 500;
 8001c82:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c88:	e013      	b.n	8001cb2 <_Z9speed_setiiiPsf+0xb2>
        }
    }else if (gyro_degree < 0){
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da0e      	bge.n	8001cae <_Z9speed_setiiiPsf+0xae>
        roll_speed = gyro_degree;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
        if (gyro_degree > -2 * 50){
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8001c9a:	db01      	blt.n	8001ca0 <_Z9speed_setiiiPsf+0xa0>
            roll_speed = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
		if (roll_speed < -500){
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8001ca6:	da04      	bge.n	8001cb2 <_Z9speed_setiiiPsf+0xb2>
			roll_speed = -500;
 8001ca8:	4b55      	ldr	r3, [pc, #340]	@ (8001e00 <_Z9speed_setiiiPsf+0x200>)
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cac:	e001      	b.n	8001cb2 <_Z9speed_setiiiPsf+0xb2>
        }

    }else{
        roll_speed = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    }


	int conv_degree = -goal_degree + 45;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 8001cb8:	623b      	str	r3, [r7, #32]
	if(conv_degree < 0){conv_degree = conv_degree + 360;}
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da03      	bge.n	8001cc8 <_Z9speed_setiiiPsf+0xc8>
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001cc6:	623b      	str	r3, [r7, #32]

	for(int i=0; i<4; i++){
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	e085      	b.n	8001dda <_Z9speed_setiiiPsf+0x1da>
		mtrspeed[i] = goal_speed * sin((conv_degree + 90.0*i) / 180.0 * 3.1415);
 8001cce:	6938      	ldr	r0, [r7, #16]
 8001cd0:	f7fe fbec 	bl	80004ac <__aeabi_i2d>
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	460d      	mov	r5, r1
 8001cd8:	6a38      	ldr	r0, [r7, #32]
 8001cda:	f7fe fbe7 	bl	80004ac <__aeabi_i2d>
 8001cde:	4680      	mov	r8, r0
 8001ce0:	4689      	mov	r9, r1
 8001ce2:	69f8      	ldr	r0, [r7, #28]
 8001ce4:	f7fe fbe2 	bl	80004ac <__aeabi_i2d>
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4b45      	ldr	r3, [pc, #276]	@ (8001e04 <_Z9speed_setiiiPsf+0x204>)
 8001cee:	f7fe fc47 	bl	8000580 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	f7fe fa8b 	bl	8000214 <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e08 <_Z9speed_setiiiPsf+0x208>)
 8001d0c:	f7fe fd62 	bl	80007d4 <__aeabi_ddiv>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	a335      	add	r3, pc, #212	@ (adr r3, 8001df0 <_Z9speed_setiiiPsf+0x1f0>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fc2f 	bl	8000580 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ec43 2b17 	vmov	d7, r2, r3
 8001d2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d2e:	eef0 0a67 	vmov.f32	s1, s15
 8001d32:	f005 fcdd 	bl	80076f0 <sin>
 8001d36:	ec53 2b10 	vmov	r2, r3, d0
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f7fe fc1f 	bl	8000580 <__aeabi_dmul>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	18d4      	adds	r4, r2, r3
 8001d52:	f7fe feaf 	bl	8000ab4 <__aeabi_d2iz>
 8001d56:	4603      	mov	r3, r0
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	8023      	strh	r3, [r4, #0]
		mtrspeed[i] = (mtrspeed[i] * motor_rate) + (roll_speed * (1.0 - motor_rate));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	4413      	add	r3, r2
 8001d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d78:	ee17 0a90 	vmov	r0, s15
 8001d7c:	f7fe fba8 	bl	80004d0 <__aeabi_f2d>
 8001d80:	4604      	mov	r4, r0
 8001d82:	460d      	mov	r5, r1
 8001d84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d86:	f7fe fb91 	bl	80004ac <__aeabi_i2d>
 8001d8a:	4680      	mov	r8, r0
 8001d8c:	4689      	mov	r9, r1
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fb9e 	bl	80004d0 <__aeabi_f2d>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	f04f 0000 	mov.w	r0, #0
 8001d9c:	491b      	ldr	r1, [pc, #108]	@ (8001e0c <_Z9speed_setiiiPsf+0x20c>)
 8001d9e:	f7fe fa37 	bl	8000210 <__aeabi_dsub>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4640      	mov	r0, r8
 8001da8:	4649      	mov	r1, r9
 8001daa:	f7fe fbe9 	bl	8000580 <__aeabi_dmul>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4620      	mov	r0, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	f7fe fa2d 	bl	8000214 <__adddf3>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	18d4      	adds	r4, r2, r3
 8001dca:	f7fe fe73 	bl	8000ab4 <__aeabi_d2iz>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	8023      	strh	r3, [r4, #0]
	for(int i=0; i<4; i++){
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	f77f af76 	ble.w	8001cce <_Z9speed_setiiiPsf+0xce>
	}
}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	3728      	adds	r7, #40	@ 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dee:	bf00      	nop
 8001df0:	c083126f 	.word	0xc083126f
 8001df4:	400921ca 	.word	0x400921ca
 8001df8:	b60b60b7 	.word	0xb60b60b7
 8001dfc:	ffffdcd8 	.word	0xffffdcd8
 8001e00:	fffffe0c 	.word	0xfffffe0c
 8001e04:	40568000 	.word	0x40568000
 8001e08:	40668000 	.word	0x40668000
 8001e0c:	3ff00000 	.word	0x3ff00000

08001e10 <_Z9set_arrayPsPh>:

void set_array(int16_t* mtrspeed, uint8_t* sendarray){
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
	uint16_t conv_mtrspeed[4];
	for(int i=0; i<4; i++){conv_mtrspeed[i] = 10000 - (mtrspeed[i] + 5000);}
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e013      	b.n	8001e48 <_Z9set_arrayPsPh+0x38>
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f5c3 539c 	rsb	r3, r3, #4992	@ 0x1380
 8001e32:	3308      	adds	r3, #8
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	3318      	adds	r3, #24
 8001e3c:	443b      	add	r3, r7
 8001e3e:	f823 2c10 	strh.w	r2, [r3, #-16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	dde8      	ble.n	8001e20 <_Z9set_arrayPsPh+0x10>
	for(int i=0; i<4; i++){
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	e03a      	b.n	8001eca <_Z9set_arrayPsPh+0xba>
		sendarray[3*i] = 250+i;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	b2d9      	uxtb	r1, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	1f8a      	subs	r2, r1, #6
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+1] = conv_mtrspeed[i] % 100;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	3318      	adds	r3, #24
 8001e72:	443b      	add	r3, r7
 8001e74:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001e78:	4a19      	ldr	r2, [pc, #100]	@ (8001ee0 <_Z9set_arrayPsPh+0xd0>)
 8001e7a:	fba2 1203 	umull	r1, r2, r2, r3
 8001e7e:	0952      	lsrs	r2, r2, #5
 8001e80:	2164      	movs	r1, #100	@ 0x64
 8001e82:	fb01 f202 	mul.w	r2, r1, r2
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	b299      	uxth	r1, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	3301      	adds	r3, #1
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	b2ca      	uxtb	r2, r1
 8001e9a:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+2] = conv_mtrspeed[i] / 100;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	3318      	adds	r3, #24
 8001ea2:	443b      	add	r3, r7
 8001ea4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <_Z9set_arrayPsPh+0xd0>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	b299      	uxth	r1, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b2ca      	uxtb	r2, r1
 8001ec2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; i++){
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	ddc1      	ble.n	8001e54 <_Z9set_arrayPsPh+0x44>
	}
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	51eb851f 	.word	0x51eb851f

08001ee4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>:

void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint16_t* stop_counter, uint16_t* error_counter, uint8_t go_back){
 8001ee4:	b480      	push	{r7}
 8001ee6:	b08d      	sub	sp, #52	@ 0x34
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->NDTR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
	wrt_pt= buf_size - wrt_pt;
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	61bb      	str	r3, [r7, #24]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付かれてな?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 8001f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d031      	beq.n	8001f74 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x90>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてな?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?=追?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?越されてな?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 8001f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4413      	add	r3, r2
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2bff      	cmp	r3, #255	@ 0xff
 8001f1e:	d116      	bne.n	8001f4e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x6a>
			if(wrt_pt != *p_wrtpt){//wrt_ptが�??????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��んだ=受信した
 8001f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d006      	beq.n	8001f3a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x56>
//正常
				*stop_counter = 0;
 8001f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f2e:	2200      	movs	r2, #0
 8001f30:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8001f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f38:	e049      	b.n	8001fce <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
			}else{//wrt_ptが�??????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��んでな?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?=受信してな?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
//受信してな?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
				(*stop_counter)++;
 8001f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f44:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8001f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f4c:	e03f      	b.n	8001fce <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
			}
		}else{//p_rdptが書き換えられた=追?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?越された
//追?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?越された
			(*error_counter)++;
 8001f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f58:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 8001f5a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8001f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	da31      	bge.n	8001fce <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
 8001f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f72:	e02c      	b.n	8001fce <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
		}
	}else{//wrtに追?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付かれた,追?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付い?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
		int front_pt = wrt_pt + 1;
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	3301      	adds	r3, #1
 8001f78:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dc03      	bgt.n	8001f8a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xa6>
 8001f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(buf[front_pt] == 255){
 8001f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	4413      	add	r3, r2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2bff      	cmp	r3, #255	@ 0xff
 8001f94:	d109      	bne.n	8001faa <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xc6>
//追?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付い?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
			(*stop_counter)++;
 8001f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fa0:	801a      	strh	r2, [r3, #0]
			rd_pt = *p_rdpt;
 8001fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa8:	e011      	b.n	8001fce <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
		}else{
//追?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?付かれた
			(*error_counter)++;
 8001faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fb4:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 8001fb6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8001fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	da03      	bge.n	8001fce <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xea>
 8001fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}

	if(*stop_counter > 65500){*stop_counter = 65500;}
 8001fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d903      	bls.n	8001fe2 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xfe>
 8001fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fdc:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001fe0:	801a      	strh	r2, [r3, #0]
	if(*error_counter > 65500){*error_counter = 65500;}
 8001fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d903      	bls.n	8001ff6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
 8001fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ff0:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001ff4:	801a      	strh	r2, [r3, #0]


	while(1){
		int dif_pt = wrt_pt - rd_pt;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt < 0){dif_pt += buf_size;}
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	2b00      	cmp	r3, #0
 8002002:	da03      	bge.n	800200c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x128>
 8002004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
		if(dif_pt <= go_back/2){break;}
 800200c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	4293      	cmp	r3, r2
 800201a:	dd65      	ble.n	80020e8 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x204>

		rd_pt++;
 800201c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800201e:	3301      	adds	r3, #1
 8002020:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002026:	429a      	cmp	r2, r3
 8002028:	dc03      	bgt.n	8002032 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x14e>
 800202a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if(buf[rd_pt] == 250+id){
 8002032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	4413      	add	r3, r2
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002040:	33fa      	adds	r3, #250	@ 0xfa
 8002042:	429a      	cmp	r2, r3
 8002044:	d14a      	bne.n	80020dc <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1f8>
			int goal_rdpt = rd_pt + data_size;//data_sizeに0はとれな?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?,25以上も?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 8002046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800204a:	4413      	add	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

				if(goal_rdpt>buf_size-1){goal_rdpt -= buf_size;}
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	429a      	cmp	r2, r3
 8002054:	dc03      	bgt.n	800205e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x17a>
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
			int temp_rdpt = rd_pt;
 800205e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002060:	623b      	str	r3, [r7, #32]

			buf[rd_pt] = 255;
 8002062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	4413      	add	r3, r2
 8002068:	22ff      	movs	r2, #255	@ 0xff
 800206a:	701a      	strb	r2, [r3, #0]

			for(int i=0; i<data_size; i++){
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	e01a      	b.n	80020a8 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1c4>
				temp_rdpt += 1;
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	3301      	adds	r3, #1
 8002076:	623b      	str	r3, [r7, #32]
					if(temp_rdpt>buf_size-1){temp_rdpt -= buf_size;}
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	429a      	cmp	r2, r3
 800207e:	dc03      	bgt.n	8002088 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1a4>
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	623b      	str	r3, [r7, #32]

				data[i] = buf[temp_rdpt];
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	441a      	add	r2, r3
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	440b      	add	r3, r1
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	701a      	strb	r2, [r3, #0]
				buf[temp_rdpt] = 255;
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	4413      	add	r3, r2
 800209e:	22ff      	movs	r2, #255	@ 0xff
 80020a0:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<data_size; i++){
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3301      	adds	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dbe0      	blt.n	8002072 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x18e>
			}

			rd_pt = temp_rdpt;
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			dif_pt = wrt_pt - rd_pt;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
				if(dif_pt < 0){dif_pt += buf_size;}
 80020bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020be:	2b00      	cmp	r3, #0
 80020c0:	da03      	bge.n	80020ca <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1e6>
 80020c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt >= buf_size/2){}
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0fda      	lsrs	r2, r3, #31
 80020ce:	4413      	add	r3, r2
 80020d0:	105b      	asrs	r3, r3, #1
 80020d2:	461a      	mov	r2, r3
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	4293      	cmp	r3, r2
 80020d8:	da8d      	bge.n	8001ff6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
			else{break;}
 80020da:	e006      	b.n	80020ea <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x206>
		}else{buf[rd_pt] = 255;}
 80020dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4413      	add	r3, r2
 80020e2:	22ff      	movs	r2, #255	@ 0xff
 80020e4:	701a      	strb	r2, [r3, #0]
	}
 80020e6:	e786      	b.n	8001ff6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x112>
		if(dif_pt <= go_back/2){break;}
 80020e8:	bf00      	nop

	*p_rdpt = rd_pt;
 80020ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020f0:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f8:	701a      	strb	r2, [r3, #0]
}
 80020fa:	bf00      	nop
 80020fc:	3734      	adds	r7, #52	@ 0x34
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210a:	b672      	cpsid	i
}
 800210c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800210e:	bf00      	nop
 8002110:	e7fd      	b.n	800210e <Error_Handler+0x8>

08002112 <_ZN11PERFORMANCEC1EPtPhPsS2_S2_>:

#include "performance.h"

PERFORMANCE::PERFORMANCE(uint16_t* ptr_perform_array, uint8_t* ptr_display_send_array, int16_t* ptr_circle_relative_position_array, int16_t* ptr_fish_relative_position_array, int16_t* ptr_now_position_array){
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3318      	adds	r3, #24
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	809a      	strh	r2, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	331e      	adds	r3, #30
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	821a      	strh	r2, [r3, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3330      	adds	r3, #48	@ 0x30
 800213e:	2224      	movs	r2, #36	@ 0x24
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f006 fb04 	bl	8008750 <memset>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	220a      	movs	r2, #10
 8002152:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	22fb      	movs	r2, #251	@ 0xfb
 8002162:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2232      	movs	r2, #50	@ 0x32
 800216a:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	220a      	movs	r2, #10
 8002172:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2296      	movs	r2, #150	@ 0x96
 800217a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8002184:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	perform_array = ptr_perform_array;//TweLiteからのデータ
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	601a      	str	r2, [r3, #0]
	display_send_array = ptr_display_send_array;//displayに送るデータ
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]
	circle_relative_position_array = ptr_circle_relative_position_array;//円の相対座標
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	60da      	str	r2, [r3, #12]
	fish_relative_position_array = ptr_fish_relative_position_array;//おさかなの相対座標
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	611a      	str	r2, [r3, #16]
	now_position_array = ptr_now_position_array;//ロボットの絶対座標 {x, y, speed}
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	615a      	str	r2, [r3, #20]

	circle_position_array[0] = now_position_array[0];
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	831a      	strh	r2, [r3, #24]
	circle_position_array[1] = 24 * 10;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	22f0      	movs	r2, #240	@ 0xf0
 80021b6:	835a      	strh	r2, [r3, #26]
	circle_position_array[2] = r_standard * 10;//r
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80021be:	461a      	mov	r2, r3
 80021c0:	0092      	lsls	r2, r2, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	b21a      	sxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	839a      	strh	r2, [r3, #28]

}
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_ZN11PERFORMANCE22set_display_send_arrayEv>:

void PERFORMANCE::set_display_send_array(){
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
//円
	display_send_array[1] = circle_relative_position_array[0]+100;//左右、送信用に100たす
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	3301      	adds	r3, #1
 80021f0:	3264      	adds	r2, #100	@ 0x64
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
	display_send_array[2] = circle_relative_position_array[1]+100;//上下、送信用に100たす
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	3302      	adds	r3, #2
 80021fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	3302      	adds	r3, #2
 8002208:	3264      	adds	r2, #100	@ 0x64
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]
	display_send_array[3] = circle_relative_position_array[2];//半径
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	3304      	adds	r3, #4
 8002214:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	3303      	adds	r3, #3
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

//光の設定
//	for(int i=0; i<9; i++){
//		display_send_array[i+4] = light_status_array[i];//光のステータスの設定
//	}
	display_send_array[4] = light_status_array[0];
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	3304      	adds	r3, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]
	display_send_array[5] = light_status_array[1];
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	3305      	adds	r3, #5
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]
	display_send_array[6] = light_status_array[2];
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	3306      	adds	r3, #6
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]
	display_send_array[7] = light_status_array[3];
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	3307      	adds	r3, #7
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]
	display_send_array[8] = light_status_array[4];
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	3308      	adds	r3, #8
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]
	display_send_array[9] = light_status_array[5];
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	3309      	adds	r3, #9
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]
	display_send_array[10] = light_status_array[6];
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	330a      	adds	r3, #10
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]
	display_send_array[11] = light_status_array[7];
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	330b      	adds	r3, #11
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]
	display_send_array[12] = light_status_array[8];
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	330c      	adds	r3, #12
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]



//おさかなさん
	for(int i=0; i<6; i++){
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e046      	b.n	8002346 <_ZN11PERFORMANCE22set_display_send_arrayEv+0x16e>
		display_send_array[3*i+13] = fish_position_array[3*i];//モード設定
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	441a      	add	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3218      	adds	r2, #24
 80022c4:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6899      	ldr	r1, [r3, #8]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	330d      	adds	r3, #13
 80022d6:	440b      	add	r3, r1
 80022d8:	b2c2      	uxtb	r2, r0
 80022da:	701a      	strb	r2, [r3, #0]
		display_send_array[3*i+14] = fish_relative_position_array[i+2] + 100;//左右、送信用に100たす
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3302      	adds	r3, #2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ec:	b2d9      	uxtb	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6898      	ldr	r0, [r3, #8]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	330e      	adds	r3, #14
 80022fc:	4403      	add	r3, r0
 80022fe:	f101 0264 	add.w	r2, r1, #100	@ 0x64
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]
		display_send_array[3*i+15] = fish_position_array[3*i+2] / 10 + 100;//上下、送信用に100たす
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	1c9a      	adds	r2, r3, #2
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3218      	adds	r2, #24
 8002314:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002318:	4a1d      	ldr	r2, [pc, #116]	@ (8002390 <_ZN11PERFORMANCE22set_display_send_arrayEv+0x1b8>)
 800231a:	fb82 1203 	smull	r1, r2, r2, r3
 800231e:	1092      	asrs	r2, r2, #2
 8002320:	17db      	asrs	r3, r3, #31
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	b21b      	sxth	r3, r3
 8002326:	b2d9      	uxtb	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6898      	ldr	r0, [r3, #8]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	330f      	adds	r3, #15
 8002336:	4403      	add	r3, r0
 8002338:	f101 0264 	add.w	r2, r1, #100	@ 0x64
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<6; i++){
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b05      	cmp	r3, #5
 800234a:	ddb5      	ble.n	80022b8 <_ZN11PERFORMANCE22set_display_send_arrayEv+0xe0>
	}

//250チェック
	for(int i=0; i<30; i++){
 800234c:	2300      	movs	r3, #0
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	e013      	b.n	800237a <_ZN11PERFORMANCE22set_display_send_arrayEv+0x1a2>
		if(display_send_array[i+1] == 250){display_send_array[i+1]++;}
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3301      	adds	r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002360:	d108      	bne.n	8002374 <_ZN11PERFORMANCE22set_display_send_arrayEv+0x19c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3301      	adds	r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	3201      	adds	r2, #1
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<30; i++){
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	3301      	adds	r3, #1
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b1d      	cmp	r3, #29
 800237e:	dde8      	ble.n	8002352 <_ZN11PERFORMANCE22set_display_send_arrayEv+0x17a>
		else{}
	}
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	66666667 	.word	0x66666667

08002394 <_ZN11PERFORMANCE30get_drawing_status_performanceEv>:

void PERFORMANCE::get_drawing_status_performance(){
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
//円
	circle_relative_position_array[0] = circle_position_array[0] - now_position_array[0];//円との相対距離
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	b212      	sxth	r2, r2
 80023b8:	801a      	strh	r2, [r3, #0]
	circle_relative_position_array[0] /= 10;//cmになおす
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68d2      	ldr	r2, [r2, #12]
 80023c6:	495d      	ldr	r1, [pc, #372]	@ (800253c <_ZN11PERFORMANCE30get_drawing_status_performanceEv+0x1a8>)
 80023c8:	fb81 0103 	smull	r0, r1, r1, r3
 80023cc:	1089      	asrs	r1, r1, #2
 80023ce:	17db      	asrs	r3, r3, #31
 80023d0:	1acb      	subs	r3, r1, r3
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	8013      	strh	r3, [r2, #0]
	circle_relative_position_array[0] += 24;//原点を左下にした値にする
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3318      	adds	r3, #24
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	b212      	sxth	r2, r2
 80023ea:	801a      	strh	r2, [r3, #0]

	circle_relative_position_array[1] = circle_position_array[1] / 10;//上下方向、cmになおす
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68d2      	ldr	r2, [r2, #12]
 80023f6:	3202      	adds	r2, #2
 80023f8:	4950      	ldr	r1, [pc, #320]	@ (800253c <_ZN11PERFORMANCE30get_drawing_status_performanceEv+0x1a8>)
 80023fa:	fb81 0103 	smull	r0, r1, r1, r3
 80023fe:	1089      	asrs	r1, r1, #2
 8002400:	17db      	asrs	r3, r3, #31
 8002402:	1acb      	subs	r3, r1, r3
 8002404:	b21b      	sxth	r3, r3
 8002406:	8013      	strh	r3, [r2, #0]
	circle_relative_position_array[2] = circle_position_array[2] / 10;//半径、cmになおす
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68d2      	ldr	r2, [r2, #12]
 8002412:	3204      	adds	r2, #4
 8002414:	4949      	ldr	r1, [pc, #292]	@ (800253c <_ZN11PERFORMANCE30get_drawing_status_performanceEv+0x1a8>)
 8002416:	fb81 0103 	smull	r0, r1, r1, r3
 800241a:	1089      	asrs	r1, r1, #2
 800241c:	17db      	asrs	r3, r3, #31
 800241e:	1acb      	subs	r3, r1, r3
 8002420:	b21b      	sxth	r3, r3
 8002422:	8013      	strh	r3, [r2, #0]

//おさかなさん
	for(int i=0; i<6; i++){
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	e07d      	b.n	8002526 <_ZN11PERFORMANCE30get_drawing_status_performanceEv+0x192>
		fish_relative_position_array[3*i] = fish_position_array[3*i];//モード
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	1899      	adds	r1, r3, r2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6918      	ldr	r0, [r3, #16]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4403      	add	r3, r0
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	3118      	adds	r1, #24
 8002446:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800244a:	801a      	strh	r2, [r3, #0]

		fish_relative_position_array[3*i+1] = fish_position_array[3*i+1] - now_position_array[0];//さかなとの相対距離
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3218      	adds	r2, #24
 800245a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800245e:	b29a      	uxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002468:	b29b      	uxth	r3, r3
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	b298      	uxth	r0, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6919      	ldr	r1, [r3, #16]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	3302      	adds	r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	b202      	sxth	r2, r0
 8002482:	801a      	strh	r2, [r3, #0]
		fish_relative_position_array[3*i+1] /= 10;//cmになおす
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6919      	ldr	r1, [r3, #16]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	3302      	adds	r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	f9b3 2000 	ldrsh.w	r2, [r3]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6918      	ldr	r0, [r3, #16]
 800249e:	68f9      	ldr	r1, [r7, #12]
 80024a0:	460b      	mov	r3, r1
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	440b      	add	r3, r1
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	3302      	adds	r3, #2
 80024aa:	4403      	add	r3, r0
 80024ac:	4923      	ldr	r1, [pc, #140]	@ (800253c <_ZN11PERFORMANCE30get_drawing_status_performanceEv+0x1a8>)
 80024ae:	fb81 0102 	smull	r0, r1, r1, r2
 80024b2:	1089      	asrs	r1, r1, #2
 80024b4:	17d2      	asrs	r2, r2, #31
 80024b6:	1a8a      	subs	r2, r1, r2
 80024b8:	b212      	sxth	r2, r2
 80024ba:	801a      	strh	r2, [r3, #0]
		fish_relative_position_array[3*i+1] += 24;//原点を左下にした値にする
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6919      	ldr	r1, [r3, #16]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	3302      	adds	r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3318      	adds	r3, #24
 80024d6:	b298      	uxth	r0, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6919      	ldr	r1, [r3, #16]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	3302      	adds	r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	b202      	sxth	r2, r0
 80024ec:	801a      	strh	r2, [r3, #0]

		fish_relative_position_array[3*i] = fish_position_array[3*i+2] / 10;//上下方向、cmになおす
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	1c9a      	adds	r2, r3, #2
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3218      	adds	r2, #24
 80024fc:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6918      	ldr	r0, [r3, #16]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	460b      	mov	r3, r1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	440b      	add	r3, r1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4403      	add	r3, r0
 8002510:	490a      	ldr	r1, [pc, #40]	@ (800253c <_ZN11PERFORMANCE30get_drawing_status_performanceEv+0x1a8>)
 8002512:	fb81 0102 	smull	r0, r1, r1, r2
 8002516:	1089      	asrs	r1, r1, #2
 8002518:	17d2      	asrs	r2, r2, #31
 800251a:	1a8a      	subs	r2, r1, r2
 800251c:	b212      	sxth	r2, r2
 800251e:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<6; i++){
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3301      	adds	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b05      	cmp	r3, #5
 800252a:	f77f af7e 	ble.w	800242a <_ZN11PERFORMANCE30get_drawing_status_performanceEv+0x96>
	}
}
 800252e:	bf00      	nop
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	66666667 	.word	0x66666667

08002540 <_ZN11PERFORMANCE30cal_drawing_status_performanceEm>:


void PERFORMANCE::cal_drawing_status_performance(uint32_t count){
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	//描画モードを選択する
	//停止、まる固定、おさかな固定,まる運び


//ラインポジション
	line_position_array[0] = now_position_array[0] - 220;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002552:	b29b      	uxth	r3, r3
 8002554:	3bdc      	subs	r3, #220	@ 0xdc
 8002556:	b29b      	uxth	r3, r3
 8002558:	b21a      	sxth	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	line_position_array[1] = now_position_array[0] + 220;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002568:	b29b      	uxth	r3, r3
 800256a:	33dc      	adds	r3, #220	@ 0xdc
 800256c:	b29b      	uxth	r3, r3
 800256e:	b21a      	sxth	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

//サークルポジション
	//circle_position_array[0]は基本前の値と同じ

	circle_position_array[1] = 24 * 10;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	22f0      	movs	r2, #240	@ 0xf0
 800257a:	835a      	strh	r2, [r3, #26]

	circle_position_array[2] = r_standard * 10;//r
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002582:	461a      	mov	r2, r3
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	4413      	add	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	b29b      	uxth	r3, r3
 800258c:	b21a      	sxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	839a      	strh	r2, [r3, #28]
	circle_position_array[2] = circle_position_array[2] - now_position_array[1] * circle_position_array[2] / shrink_const;//前後
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	3302      	adds	r3, #2
 80025a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a4:	4619      	mov	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	f8b1 105e 	ldrh.w	r1, [r1, #94]	@ 0x5e
 80025b6:	fb93 f3f1 	sdiv	r3, r3, r1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	b29b      	uxth	r3, r3
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	839a      	strh	r2, [r3, #28]
//	if(perform_array[3] == 0){
//		circle_position_array[2] = circle_position_array[2] + circle_position_array[2] * sin() / 8;
//	}else{}

	if(perform_array[3] == 3){
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3306      	adds	r3, #6
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d134      	bne.n	800263c <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0xfc>
		if(circle_position_array[0] - circle_position_array[2] <= line_position_array[0]){
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80025d8:	461a      	mov	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	f9b2 2054 	ldrsh.w	r2, [r2, #84]	@ 0x54
 80025e8:	4293      	cmp	r3, r2
 80025ea:	dc0d      	bgt.n	8002608 <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0xc8>
			circle_position_array[0] = line_position_array[0] + circle_position_array[2];
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	@ 0x54
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	b29b      	uxth	r3, r3
 8002600:	b21a      	sxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	831a      	strh	r2, [r3, #24]
 8002606:	e019      	b.n	800263c <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0xfc>
//		}else if((circle_position_array[0] - circle_position_array[2] > line_position_array[0]) || (circle_position_array[0] + circle_position_array[2] > line_position_array[1])){
//
		}else if(circle_position_array[0] + circle_position_array[2] >= line_position_array[1]){
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800260e:	461a      	mov	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002616:	4413      	add	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	@ 0x56
 800261e:	4293      	cmp	r3, r2
 8002620:	db0c      	blt.n	800263c <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0xfc>
			circle_position_array[0] = line_position_array[1] - circle_position_array[2];
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	@ 0x56
 8002628:	b29a      	uxth	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002630:	b29b      	uxth	r3, r3
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	b29b      	uxth	r3, r3
 8002636:	b21a      	sxth	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	831a      	strh	r2, [r3, #24]
		}else{}
	}else{}


//光の設定
	if(perform_array[3] == 0){
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3306      	adds	r3, #6
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d138      	bne.n	80026ba <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0x17a>
		light_status_array[0] = perform_array[0] + 128;//circle_H
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	3380      	adds	r3, #128	@ 0x80
 8002650:	b29b      	uxth	r3, r3
 8002652:	b21a      	sxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	83da      	strh	r2, [r3, #30]
		light_status_array[1] = S_standard;//circle_S
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800265e:	b21a      	sxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	841a      	strh	r2, [r3, #32]
		light_status_array[2] = V_standard;//circle_V
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800266a:	b21a      	sxth	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	845a      	strh	r2, [r3, #34]	@ 0x22
		light_status_array[3] = perform_array[0];//background_H
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b21a      	sxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	849a      	strh	r2, [r3, #36]	@ 0x24
		light_status_array[4] = S_standard;//background_S
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8002682:	b21a      	sxth	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	84da      	strh	r2, [r3, #38]	@ 0x26
		light_status_array[5] = V_standard;//background_V
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800268e:	b21a      	sxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	851a      	strh	r2, [r3, #40]	@ 0x28
		light_status_array[6] = perform_array[0];//frame_H
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b21a      	sxth	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	855a      	strh	r2, [r3, #42]	@ 0x2a
		light_status_array[7] = S_standard;//frame_S
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 80026a6:	b21a      	sxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
		light_status_array[8] = V_standard;//frame_V
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026b2:	b21a      	sxth	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80026b8:	e115      	b.n	80028e6 <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0x3a6>

	}else if(perform_array[3] == 1){
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3306      	adds	r3, #6
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d143      	bne.n	800274e <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0x20e>
		light_status_array[0] = perform_array[0] + 128;//circle_H
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	3380      	adds	r3, #128	@ 0x80
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	83da      	strh	r2, [r3, #30]
			light_status_array[0] %= 256;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80026dc:	425a      	negs	r2, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	bf58      	it	pl
 80026e4:	4253      	negpl	r3, r2
 80026e6:	b21a      	sxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	83da      	strh	r2, [r3, #30]
		light_status_array[1] = S_standard;//circle_S
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 80026f2:	b21a      	sxth	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	841a      	strh	r2, [r3, #32]
		light_status_array[2] = V_standard;//circle_V
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026fe:	b21a      	sxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	845a      	strh	r2, [r3, #34]	@ 0x22
		light_status_array[3] = perform_array[0];//background_H
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b21a      	sxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	849a      	strh	r2, [r3, #36]	@ 0x24
		light_status_array[4] = S_standard;//background_S
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8002716:	b21a      	sxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	84da      	strh	r2, [r3, #38]	@ 0x26
		light_status_array[5] = V_standard;//background_V
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002722:	b21a      	sxth	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	851a      	strh	r2, [r3, #40]	@ 0x28
		light_status_array[6] = perform_array[0];//frame_H
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b21a      	sxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	855a      	strh	r2, [r3, #42]	@ 0x2a
		light_status_array[7] = S_standard;//frame_S
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800273a:	b21a      	sxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	859a      	strh	r2, [r3, #44]	@ 0x2c
		light_status_array[8] = V_standard;//frame_V
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002746:	b21a      	sxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800274c:	e0cb      	b.n	80028e6 <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0x3a6>

	}else if(perform_array[3] == 2){
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3306      	adds	r3, #6
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d136      	bne.n	80027c8 <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0x288>
		light_status_array[0] = perform_array[0];//circle_H
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	b21a      	sxth	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	83da      	strh	r2, [r3, #30]
		light_status_array[1] = S_standard;//circle_S
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800276c:	b21a      	sxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	841a      	strh	r2, [r3, #32]
		light_status_array[2] = V_standard;//circle_V
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002778:	b21a      	sxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	845a      	strh	r2, [r3, #34]	@ 0x22
		light_status_array[3] = perform_array[0];//background_H
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b21a      	sxth	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	849a      	strh	r2, [r3, #36]	@ 0x24
		light_status_array[4] = S_standard;//background_S
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8002790:	b21a      	sxth	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	84da      	strh	r2, [r3, #38]	@ 0x26
		light_status_array[5] = V_standard;//background_V
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800279c:	b21a      	sxth	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	851a      	strh	r2, [r3, #40]	@ 0x28
		light_status_array[6] = perform_array[0];//frame_H
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	b21a      	sxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
		light_status_array[7] = S_standard;//frame_S
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	859a      	strh	r2, [r3, #44]	@ 0x2c
		light_status_array[8] = V_standard;//frame_V
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80027c6:	e08e      	b.n	80028e6 <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0x3a6>

	}else if(perform_array[3] == 3){
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3306      	adds	r3, #6
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d150      	bne.n	8002876 <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0x336>
		light_status_array[0] = perform_array[0] + 80;//circle_H
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	3350      	adds	r3, #80	@ 0x50
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b21a      	sxth	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	83da      	strh	r2, [r3, #30]
			light_status_array[0] %= 256;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80027ea:	425a      	negs	r2, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	bf58      	it	pl
 80027f2:	4253      	negpl	r3, r2
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	83da      	strh	r2, [r3, #30]
		light_status_array[1] = S_standard;//circle_S
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8002800:	b21a      	sxth	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	841a      	strh	r2, [r3, #32]
		light_status_array[2] = V_standard;//circle_V
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800280c:	b21a      	sxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	845a      	strh	r2, [r3, #34]	@ 0x22
		light_status_array[3] = perform_array[0];//background_H
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b21a      	sxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	849a      	strh	r2, [r3, #36]	@ 0x24
		light_status_array[4] = S_standard;//background_S
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8002824:	b21a      	sxth	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	84da      	strh	r2, [r3, #38]	@ 0x26
		light_status_array[5] = V_standard;//background_V
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002830:	b21a      	sxth	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	851a      	strh	r2, [r3, #40]	@ 0x28
		light_status_array[6] = perform_array[0] + 160;//枠表示
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	33a0      	adds	r3, #160	@ 0xa0
 800283e:	b29b      	uxth	r3, r3
 8002840:	b21a      	sxth	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	855a      	strh	r2, [r3, #42]	@ 0x2a
			light_status_array[6] %= 256;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800284c:	425a      	negs	r2, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	bf58      	it	pl
 8002854:	4253      	negpl	r3, r2
 8002856:	b21a      	sxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	855a      	strh	r2, [r3, #42]	@ 0x2a
		light_status_array[7] = S_standard;//frame_S
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8002862:	b21a      	sxth	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	859a      	strh	r2, [r3, #44]	@ 0x2c
		light_status_array[8] = V_standard;//frame_V
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800286e:	b21a      	sxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8002874:	e037      	b.n	80028e6 <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0x3a6>

	}else{
		light_status_array[0] = perform_array[0] + 128;//circle_H
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	3380      	adds	r3, #128	@ 0x80
 800287e:	b29b      	uxth	r3, r3
 8002880:	b21a      	sxth	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	83da      	strh	r2, [r3, #30]
		light_status_array[1] = S_standard;//circle_S
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800288c:	b21a      	sxth	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	841a      	strh	r2, [r3, #32]
		light_status_array[2] = V_standard;//circle_V
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002898:	b21a      	sxth	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	845a      	strh	r2, [r3, #34]	@ 0x22
		light_status_array[3] = perform_array[0];//background_H
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b21a      	sxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	849a      	strh	r2, [r3, #36]	@ 0x24
		light_status_array[4] = S_standard;//background_S
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 80028b0:	b21a      	sxth	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	84da      	strh	r2, [r3, #38]	@ 0x26
		light_status_array[5] = V_standard;//background_V
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028bc:	b21a      	sxth	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28
		light_status_array[6] = perform_array[0];//frame_H
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	b21a      	sxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
		light_status_array[7] = S_standard;//frame_S
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 80028d4:	b21a      	sxth	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	859a      	strh	r2, [r3, #44]	@ 0x2c
		light_status_array[8] = V_standard;//frame_V
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028e0:	b21a      	sxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
	}


//おさかなの設定
	if(perform_array[3] == 2){
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3306      	adds	r3, #6
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d165      	bne.n	80029be <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0x47e>
		fish_position_array[0] = 2;//ID
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	861a      	strh	r2, [r3, #48]	@ 0x30
		fish_position_array[1] = circle_position_array[0];//X
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	865a      	strh	r2, [r3, #50]	@ 0x32
		fish_position_array[2] = 150;//Z
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2296      	movs	r2, #150	@ 0x96
 8002906:	869a      	strh	r2, [r3, #52]	@ 0x34

		fish_position_array[3] = 2;//ID
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	86da      	strh	r2, [r3, #54]	@ 0x36
		fish_position_array[4] = circle_position_array[0] + 400;//X
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002914:	b29b      	uxth	r3, r3
 8002916:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800291a:	b29b      	uxth	r3, r3
 800291c:	b21a      	sxth	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	871a      	strh	r2, [r3, #56]	@ 0x38
		fish_position_array[5] = 300;//Z
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002928:	875a      	strh	r2, [r3, #58]	@ 0x3a

		fish_position_array[6] = 2;//ID
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2202      	movs	r2, #2
 800292e:	879a      	strh	r2, [r3, #60]	@ 0x3c
		fish_position_array[6] = circle_position_array[0] - 200;//X
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002936:	b29b      	uxth	r3, r3
 8002938:	3bc8      	subs	r3, #200	@ 0xc8
 800293a:	b29b      	uxth	r3, r3
 800293c:	b21a      	sxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	879a      	strh	r2, [r3, #60]	@ 0x3c
		fish_position_array[8] = 50;//Z
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2232      	movs	r2, #50	@ 0x32
 8002946:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

		fish_position_array[9] = 2;//ID
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		fish_position_array[10] = circle_position_array[0] + 700;//X
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 800295e:	b29b      	uxth	r3, r3
 8002960:	b21a      	sxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		fish_position_array[11] = 75;//Z
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	224b      	movs	r2, #75	@ 0x4b
 800296c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

		fish_position_array[12] = 2;//ID
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		fish_position_array[13] = circle_position_array[0] - 400;//X
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800297e:	b29b      	uxth	r3, r3
 8002980:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002984:	b29b      	uxth	r3, r3
 8002986:	b21a      	sxth	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		fish_position_array[14] = 250;//Z
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	22fa      	movs	r2, #250	@ 0xfa
 8002992:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

		fish_position_array[15] = 2;//ID
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		fish_position_array[16] = circle_position_array[0] - 700;//X
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
		fish_position_array[17] = 200;//Z
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	22c8      	movs	r2, #200	@ 0xc8
 80029b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
		fish_position_array[16] = 3500;//X
		fish_position_array[17] = 300;//Z
	}


}
 80029bc:	e048      	b.n	8002a50 <_ZN11PERFORMANCE30cal_drawing_status_performanceEm+0x510>
		fish_position_array[0] = 0;//ID
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	861a      	strh	r2, [r3, #48]	@ 0x30
		fish_position_array[1] = 1500;//X
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80029ca:	865a      	strh	r2, [r3, #50]	@ 0x32
		fish_position_array[2] = 150;//Z
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2296      	movs	r2, #150	@ 0x96
 80029d0:	869a      	strh	r2, [r3, #52]	@ 0x34
		fish_position_array[3] = 0;//ID
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	86da      	strh	r2, [r3, #54]	@ 0x36
		fish_position_array[4] = 1900;//X
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f240 726c 	movw	r2, #1900	@ 0x76c
 80029de:	871a      	strh	r2, [r3, #56]	@ 0x38
		fish_position_array[5] = 300;//Z
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029e6:	875a      	strh	r2, [r3, #58]	@ 0x3a
		fish_position_array[6] = 0;//ID
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
		fish_position_array[7] = 2300;//X
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 80029f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
		fish_position_array[8] = 150;//Z
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2296      	movs	r2, #150	@ 0x96
 80029fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		fish_position_array[9] = 0;//ID
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		fish_position_array[10] = 2700;//X
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f640 228c 	movw	r2, #2700	@ 0xa8c
 8002a0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		fish_position_array[11] = 300;//Z
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		fish_position_array[12] = 0;//ID
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		fish_position_array[13] = 3100;//X
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f640 421c 	movw	r2, #3100	@ 0xc1c
 8002a28:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		fish_position_array[14] = 150;//Z
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2296      	movs	r2, #150	@ 0x96
 8002a30:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		fish_position_array[15] = 0;//ID
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		fish_position_array[16] = 3500;//X
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002a42:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
		fish_position_array[17] = 300;//Z
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_MspInit+0x4c>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa8 <HAL_MspInit+0x4c>)
 8002a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a72:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <HAL_MspInit+0x4c>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <HAL_MspInit+0x4c>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	4a08      	ldr	r2, [pc, #32]	@ (8002aa8 <HAL_MspInit+0x4c>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HAL_MspInit+0x4c>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800

08002aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	@ 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a19      	ldr	r2, [pc, #100]	@ (8002b30 <HAL_I2C_MspInit+0x84>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12c      	bne.n	8002b28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <HAL_I2C_MspInit+0x88>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	4a17      	ldr	r2, [pc, #92]	@ (8002b34 <HAL_I2C_MspInit+0x88>)
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ade:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <HAL_I2C_MspInit+0x88>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002aea:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af0:	2312      	movs	r3, #18
 8002af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002afc:	2304      	movs	r3, #4
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	4619      	mov	r1, r3
 8002b06:	480c      	ldr	r0, [pc, #48]	@ (8002b38 <HAL_I2C_MspInit+0x8c>)
 8002b08:	f000 ffc2 	bl	8003a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	4b08      	ldr	r3, [pc, #32]	@ (8002b34 <HAL_I2C_MspInit+0x88>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	4a07      	ldr	r2, [pc, #28]	@ (8002b34 <HAL_I2C_MspInit+0x88>)
 8002b16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_I2C_MspInit+0x88>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002b28:	bf00      	nop
 8002b2a:	3728      	adds	r7, #40	@ 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40005400 	.word	0x40005400
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40020400 	.word	0x40020400

08002b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4c:	d116      	bne.n	8002b7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b16      	ldr	r3, [pc, #88]	@ (8002bac <HAL_TIM_Base_MspInit+0x70>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	4a15      	ldr	r2, [pc, #84]	@ (8002bac <HAL_TIM_Base_MspInit+0x70>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5e:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <HAL_TIM_Base_MspInit+0x70>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	201c      	movs	r0, #28
 8002b70:	f000 fbe7 	bl	8003342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b74:	201c      	movs	r0, #28
 8002b76:	f000 fc00 	bl	800337a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b7a:	e012      	b.n	8002ba2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb0 <HAL_TIM_Base_MspInit+0x74>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10d      	bne.n	8002ba2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	4b08      	ldr	r3, [pc, #32]	@ (8002bac <HAL_TIM_Base_MspInit+0x70>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	4a07      	ldr	r2, [pc, #28]	@ (8002bac <HAL_TIM_Base_MspInit+0x70>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b96:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <HAL_TIM_Base_MspInit+0x70>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40000800 	.word	0x40000800

08002bb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a12      	ldr	r2, [pc, #72]	@ (8002c1c <HAL_TIM_MspPostInit+0x68>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d11d      	bne.n	8002c12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <HAL_TIM_MspPostInit+0x6c>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	4a10      	ldr	r2, [pc, #64]	@ (8002c20 <HAL_TIM_MspPostInit+0x6c>)
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <HAL_TIM_MspPostInit+0x6c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bf2:	2340      	movs	r3, #64	@ 0x40
 8002bf4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c02:	2302      	movs	r3, #2
 8002c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <HAL_TIM_MspPostInit+0x70>)
 8002c0e:	f000 ff3f 	bl	8003a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002c12:	bf00      	nop
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40000800 	.word	0x40000800
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40020400 	.word	0x40020400

08002c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b092      	sub	sp, #72	@ 0x48
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a97      	ldr	r2, [pc, #604]	@ (8002ea4 <HAL_UART_MspInit+0x27c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d17a      	bne.n	8002d40 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c4e:	4b96      	ldr	r3, [pc, #600]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	4a95      	ldr	r2, [pc, #596]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002c54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c5a:	4b93      	ldr	r3, [pc, #588]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c62:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	4a8e      	ldr	r2, [pc, #568]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c76:	4b8c      	ldr	r3, [pc, #560]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c86:	4b88      	ldr	r3, [pc, #544]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	4a87      	ldr	r2, [pc, #540]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002c8c:	f043 0308 	orr.w	r3, r3, #8
 8002c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c92:	4b85      	ldr	r3, [pc, #532]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ca2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cb8:	4619      	mov	r1, r3
 8002cba:	487c      	ldr	r0, [pc, #496]	@ (8002eac <HAL_UART_MspInit+0x284>)
 8002cbc:	f000 fee8 	bl	8003a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4875      	ldr	r0, [pc, #468]	@ (8002eb0 <HAL_UART_MspInit+0x288>)
 8002cdc:	f000 fed8 	bl	8003a90 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002ce0:	4b74      	ldr	r3, [pc, #464]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002ce2:	4a75      	ldr	r2, [pc, #468]	@ (8002eb8 <HAL_UART_MspInit+0x290>)
 8002ce4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002ce6:	4b73      	ldr	r3, [pc, #460]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002ce8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002cec:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cee:	4b71      	ldr	r3, [pc, #452]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002cfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d00:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d02:	4b6c      	ldr	r3, [pc, #432]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d08:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002d0e:	4b69      	ldr	r3, [pc, #420]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002d10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d14:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d16:	4b67      	ldr	r3, [pc, #412]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d1c:	4b65      	ldr	r3, [pc, #404]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002d22:	4864      	ldr	r0, [pc, #400]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002d24:	f000 fb44 	bl	80033b0 <HAL_DMA_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002d2e:	f7ff f9ea 	bl	8002106 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a5f      	ldr	r2, [pc, #380]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002d36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d38:	4a5e      	ldr	r2, [pc, #376]	@ (8002eb4 <HAL_UART_MspInit+0x28c>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d3e:	e0fa      	b.n	8002f36 <HAL_UART_MspInit+0x30e>
  else if(huart->Instance==USART2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5d      	ldr	r2, [pc, #372]	@ (8002ebc <HAL_UART_MspInit+0x294>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d15b      	bne.n	8002e02 <HAL_UART_MspInit+0x1da>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4e:	4b56      	ldr	r3, [pc, #344]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	4a55      	ldr	r2, [pc, #340]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5a:	4b53      	ldr	r3, [pc, #332]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	623b      	str	r3, [r7, #32]
 8002d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d76:	4b4c      	ldr	r3, [pc, #304]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	623b      	str	r3, [r7, #32]
 8002d80:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d82:	230c      	movs	r3, #12
 8002d84:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d92:	2307      	movs	r3, #7
 8002d94:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4848      	ldr	r0, [pc, #288]	@ (8002ec0 <HAL_UART_MspInit+0x298>)
 8002d9e:	f000 fe77 	bl	8003a90 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002da2:	4b48      	ldr	r3, [pc, #288]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002da4:	4a48      	ldr	r2, [pc, #288]	@ (8002ec8 <HAL_UART_MspInit+0x2a0>)
 8002da6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002da8:	4b46      	ldr	r3, [pc, #280]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002daa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002dae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db0:	4b44      	ldr	r3, [pc, #272]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db6:	4b43      	ldr	r3, [pc, #268]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dbc:	4b41      	ldr	r3, [pc, #260]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002dbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dc2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dca:	4b3e      	ldr	r3, [pc, #248]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002dd0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002dd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dd6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dde:	4b39      	ldr	r3, [pc, #228]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002de4:	4837      	ldr	r0, [pc, #220]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002de6:	f000 fae3 	bl	80033b0 <HAL_DMA_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8002df0:	f7ff f989 	bl	8002106 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a33      	ldr	r2, [pc, #204]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002df8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002dfa:	4a32      	ldr	r2, [pc, #200]	@ (8002ec4 <HAL_UART_MspInit+0x29c>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002e00:	e099      	b.n	8002f36 <HAL_UART_MspInit+0x30e>
  else if(huart->Instance==USART3)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a31      	ldr	r2, [pc, #196]	@ (8002ecc <HAL_UART_MspInit+0x2a4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d163      	bne.n	8002ed4 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	4b25      	ldr	r3, [pc, #148]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	4a24      	ldr	r2, [pc, #144]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002e16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002e32:	f043 0304 	orr.w	r3, r3, #4
 8002e36:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	4a16      	ldr	r2, [pc, #88]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002e4e:	f043 0302 	orr.w	r3, r3, #2
 8002e52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e54:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <HAL_UART_MspInit+0x280>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e60:	2320      	movs	r3, #32
 8002e62:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e70:	2307      	movs	r3, #7
 8002e72:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e74:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e78:	4619      	mov	r1, r3
 8002e7a:	480c      	ldr	r0, [pc, #48]	@ (8002eac <HAL_UART_MspInit+0x284>)
 8002e7c:	f000 fe08 	bl	8003a90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e84:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e92:	2307      	movs	r3, #7
 8002e94:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480c      	ldr	r0, [pc, #48]	@ (8002ed0 <HAL_UART_MspInit+0x2a8>)
 8002e9e:	f000 fdf7 	bl	8003a90 <HAL_GPIO_Init>
}
 8002ea2:	e048      	b.n	8002f36 <HAL_UART_MspInit+0x30e>
 8002ea4:	40005000 	.word	0x40005000
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020800 	.word	0x40020800
 8002eb0:	40020c00 	.word	0x40020c00
 8002eb4:	20000258 	.word	0x20000258
 8002eb8:	40026010 	.word	0x40026010
 8002ebc:	40004400 	.word	0x40004400
 8002ec0:	40020000 	.word	0x40020000
 8002ec4:	200002b8 	.word	0x200002b8
 8002ec8:	40026088 	.word	0x40026088
 8002ecc:	40004800 	.word	0x40004800
 8002ed0:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a19      	ldr	r2, [pc, #100]	@ (8002f40 <HAL_UART_MspInit+0x318>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d12b      	bne.n	8002f36 <HAL_UART_MspInit+0x30e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	4b18      	ldr	r3, [pc, #96]	@ (8002f44 <HAL_UART_MspInit+0x31c>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	4a17      	ldr	r2, [pc, #92]	@ (8002f44 <HAL_UART_MspInit+0x31c>)
 8002ee8:	f043 0320 	orr.w	r3, r3, #32
 8002eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eee:	4b15      	ldr	r3, [pc, #84]	@ (8002f44 <HAL_UART_MspInit+0x31c>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <HAL_UART_MspInit+0x31c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	4a10      	ldr	r2, [pc, #64]	@ (8002f44 <HAL_UART_MspInit+0x31c>)
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <HAL_UART_MspInit+0x31c>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f16:	23c0      	movs	r3, #192	@ 0xc0
 8002f18:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f22:	2303      	movs	r3, #3
 8002f24:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f26:	2308      	movs	r3, #8
 8002f28:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4805      	ldr	r0, [pc, #20]	@ (8002f48 <HAL_UART_MspInit+0x320>)
 8002f32:	f000 fdad 	bl	8003a90 <HAL_GPIO_Init>
}
 8002f36:	bf00      	nop
 8002f38:	3748      	adds	r7, #72	@ 0x48
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40011400 	.word	0x40011400
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020800 	.word	0x40020800

08002f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f50:	bf00      	nop
 8002f52:	e7fd      	b.n	8002f50 <NMI_Handler+0x4>

08002f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <HardFault_Handler+0x4>

08002f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f60:	bf00      	nop
 8002f62:	e7fd      	b.n	8002f60 <MemManage_Handler+0x4>

08002f64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <BusFault_Handler+0x4>

08002f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <UsageFault_Handler+0x4>

08002f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa2:	f000 f8af 	bl	8003104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002fb0:	4802      	ldr	r0, [pc, #8]	@ (8002fbc <DMA1_Stream0_IRQHandler+0x10>)
 8002fb2:	f000 fb03 	bl	80035bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000258 	.word	0x20000258

08002fc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002fc4:	4802      	ldr	r0, [pc, #8]	@ (8002fd0 <DMA1_Stream5_IRQHandler+0x10>)
 8002fc6:	f000 faf9 	bl	80035bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200002b8 	.word	0x200002b8

08002fd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fd8:	4802      	ldr	r0, [pc, #8]	@ (8002fe4 <TIM2_IRQHandler+0x10>)
 8002fda:	f002 feac 	bl	8005d36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200000a8 	.word	0x200000a8

08002fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fec:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <SystemInit+0x20>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff2:	4a05      	ldr	r2, [pc, #20]	@ (8003008 <SystemInit+0x20>)
 8002ff4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ff8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800300c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003044 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003010:	f7ff ffea 	bl	8002fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003014:	480c      	ldr	r0, [pc, #48]	@ (8003048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003016:	490d      	ldr	r1, [pc, #52]	@ (800304c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003018:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800301c:	e002      	b.n	8003024 <LoopCopyDataInit>

0800301e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800301e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003022:	3304      	adds	r3, #4

08003024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003028:	d3f9      	bcc.n	800301e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302a:	4a0a      	ldr	r2, [pc, #40]	@ (8003054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800302c:	4c0a      	ldr	r4, [pc, #40]	@ (8003058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003030:	e001      	b.n	8003036 <LoopFillZerobss>

08003032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003034:	3204      	adds	r2, #4

08003036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003038:	d3fb      	bcc.n	8003032 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800303a:	f005 fb91 	bl	8008760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800303e:	f7fe f837 	bl	80010b0 <main>
  bx  lr    
 8003042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003044:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800304c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8003050:	080089d0 	.word	0x080089d0
  ldr r2, =_sbss
 8003054:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8003058:	20000410 	.word	0x20000410

0800305c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800305c:	e7fe      	b.n	800305c <ADC_IRQHandler>
	...

08003060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003064:	4b0e      	ldr	r3, [pc, #56]	@ (80030a0 <HAL_Init+0x40>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0d      	ldr	r2, [pc, #52]	@ (80030a0 <HAL_Init+0x40>)
 800306a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800306e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <HAL_Init+0x40>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0a      	ldr	r2, [pc, #40]	@ (80030a0 <HAL_Init+0x40>)
 8003076:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800307a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800307c:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <HAL_Init+0x40>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a07      	ldr	r2, [pc, #28]	@ (80030a0 <HAL_Init+0x40>)
 8003082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003088:	2003      	movs	r0, #3
 800308a:	f000 f94f 	bl	800332c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800308e:	200f      	movs	r0, #15
 8003090:	f000 f808 	bl	80030a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003094:	f7ff fce2 	bl	8002a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023c00 	.word	0x40023c00

080030a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030ac:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <HAL_InitTick+0x54>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b12      	ldr	r3, [pc, #72]	@ (80030fc <HAL_InitTick+0x58>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4619      	mov	r1, r3
 80030b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f967 	bl	8003396 <HAL_SYSTICK_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00e      	b.n	80030f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b0f      	cmp	r3, #15
 80030d6:	d80a      	bhi.n	80030ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d8:	2200      	movs	r2, #0
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	f000 f92f 	bl	8003342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030e4:	4a06      	ldr	r2, [pc, #24]	@ (8003100 <HAL_InitTick+0x5c>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e000      	b.n	80030f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	2000002c 	.word	0x2000002c
 80030fc:	20000034 	.word	0x20000034
 8003100:	20000030 	.word	0x20000030

08003104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003108:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_IncTick+0x20>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <HAL_IncTick+0x24>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4413      	add	r3, r2
 8003114:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <HAL_IncTick+0x24>)
 8003116:	6013      	str	r3, [r2, #0]
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000034 	.word	0x20000034
 8003128:	2000040c 	.word	0x2000040c

0800312c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return uwTick;
 8003130:	4b03      	ldr	r3, [pc, #12]	@ (8003140 <HAL_GetTick+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	2000040c 	.word	0x2000040c

08003144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800314c:	f7ff ffee 	bl	800312c <HAL_GetTick>
 8003150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d005      	beq.n	800316a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800315e:	4b0a      	ldr	r3, [pc, #40]	@ (8003188 <HAL_Delay+0x44>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800316a:	bf00      	nop
 800316c:	f7ff ffde 	bl	800312c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	429a      	cmp	r2, r3
 800317a:	d8f7      	bhi.n	800316c <HAL_Delay+0x28>
  {
  }
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000034 	.word	0x20000034

0800318c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800319c:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a8:	4013      	ands	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031be:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	60d3      	str	r3, [r2, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d8:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <__NVIC_GetPriorityGrouping+0x18>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	f003 0307 	and.w	r3, r3, #7
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	db0b      	blt.n	800321a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	4907      	ldr	r1, [pc, #28]	@ (8003228 <__NVIC_EnableIRQ+0x38>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2001      	movs	r0, #1
 8003212:	fa00 f202 	lsl.w	r2, r0, r2
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000e100 	.word	0xe000e100

0800322c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	db0a      	blt.n	8003256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	490c      	ldr	r1, [pc, #48]	@ (8003278 <__NVIC_SetPriority+0x4c>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	0112      	lsls	r2, r2, #4
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	440b      	add	r3, r1
 8003250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003254:	e00a      	b.n	800326c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4908      	ldr	r1, [pc, #32]	@ (800327c <__NVIC_SetPriority+0x50>)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	3b04      	subs	r3, #4
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	440b      	add	r3, r1
 800326a:	761a      	strb	r2, [r3, #24]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000e100 	.word	0xe000e100
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	@ 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f1c3 0307 	rsb	r3, r3, #7
 800329a:	2b04      	cmp	r3, #4
 800329c:	bf28      	it	cs
 800329e:	2304      	movcs	r3, #4
 80032a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d902      	bls.n	80032b0 <NVIC_EncodePriority+0x30>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3b03      	subs	r3, #3
 80032ae:	e000      	b.n	80032b2 <NVIC_EncodePriority+0x32>
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c8:	f04f 31ff 	mov.w	r1, #4294967295
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	43d9      	mvns	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	4313      	orrs	r3, r2
         );
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3724      	adds	r7, #36	@ 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f8:	d301      	bcc.n	80032fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00f      	b.n	800331e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003328 <SysTick_Config+0x40>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003306:	210f      	movs	r1, #15
 8003308:	f04f 30ff 	mov.w	r0, #4294967295
 800330c:	f7ff ff8e 	bl	800322c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <SysTick_Config+0x40>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003316:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <SysTick_Config+0x40>)
 8003318:	2207      	movs	r2, #7
 800331a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	e000e010 	.word	0xe000e010

0800332c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff29 	bl	800318c <__NVIC_SetPriorityGrouping>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	4603      	mov	r3, r0
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003354:	f7ff ff3e 	bl	80031d4 <__NVIC_GetPriorityGrouping>
 8003358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f7ff ff8e 	bl	8003280 <NVIC_EncodePriority>
 8003364:	4602      	mov	r2, r0
 8003366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff5d 	bl	800322c <__NVIC_SetPriority>
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff31 	bl	80031f0 <__NVIC_EnableIRQ>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffa2 	bl	80032e8 <SysTick_Config>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7ff feb6 	bl	800312c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e099      	b.n	8003500 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033ec:	e00f      	b.n	800340e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033ee:	f7ff fe9d 	bl	800312c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d908      	bls.n	800340e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2203      	movs	r2, #3
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e078      	b.n	8003500 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e8      	bne.n	80033ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4b38      	ldr	r3, [pc, #224]	@ (8003508 <HAL_DMA_Init+0x158>)
 8003428:	4013      	ands	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800343a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003446:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003452:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	2b04      	cmp	r3, #4
 8003466:	d107      	bne.n	8003478 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003470:	4313      	orrs	r3, r2
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0307 	bic.w	r3, r3, #7
 800348e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d117      	bne.n	80034d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00e      	beq.n	80034d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fa6f 	bl	8003998 <DMA_CheckFifoParam>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2240      	movs	r2, #64	@ 0x40
 80034c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80034ce:	2301      	movs	r3, #1
 80034d0:	e016      	b.n	8003500 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fa26 	bl	800392c <DMA_CalcBaseAndBitshift>
 80034e0:	4603      	mov	r3, r0
 80034e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e8:	223f      	movs	r2, #63	@ 0x3f
 80034ea:	409a      	lsls	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	f010803f 	.word	0xf010803f

0800350c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003522:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_DMA_Start_IT+0x26>
 800352e:	2302      	movs	r3, #2
 8003530:	e040      	b.n	80035b4 <HAL_DMA_Start_IT+0xa8>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d12f      	bne.n	80035a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f9b8 	bl	80038d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	223f      	movs	r2, #63	@ 0x3f
 8003566:	409a      	lsls	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0216 	orr.w	r2, r2, #22
 800357a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0208 	orr.w	r2, r2, #8
 8003592:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e005      	b.n	80035b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003804 <HAL_DMA_IRQHandler+0x248>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a8e      	ldr	r2, [pc, #568]	@ (8003808 <HAL_DMA_IRQHandler+0x24c>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	0a9b      	lsrs	r3, r3, #10
 80035d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e6:	2208      	movs	r2, #8
 80035e8:	409a      	lsls	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01a      	beq.n	8003628 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d013      	beq.n	8003628 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0204 	bic.w	r2, r2, #4
 800360e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	2208      	movs	r2, #8
 8003616:	409a      	lsls	r2, r3
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003620:	f043 0201 	orr.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	2201      	movs	r2, #1
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d012      	beq.n	800365e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00b      	beq.n	800365e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364a:	2201      	movs	r2, #1
 800364c:	409a      	lsls	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003656:	f043 0202 	orr.w	r2, r3, #2
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003662:	2204      	movs	r2, #4
 8003664:	409a      	lsls	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d012      	beq.n	8003694 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	2204      	movs	r2, #4
 8003682:	409a      	lsls	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	2210      	movs	r2, #16
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d043      	beq.n	800372c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d03c      	beq.n	800372c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	2210      	movs	r2, #16
 80036b8:	409a      	lsls	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d018      	beq.n	80036fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d108      	bne.n	80036ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d024      	beq.n	800372c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
 80036ea:	e01f      	b.n	800372c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01b      	beq.n	800372c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
 80036fc:	e016      	b.n	800372c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0208 	bic.w	r2, r2, #8
 800371a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	2220      	movs	r2, #32
 8003732:	409a      	lsls	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 808f 	beq.w	800385c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8087 	beq.w	800385c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	2220      	movs	r2, #32
 8003754:	409a      	lsls	r2, r3
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b05      	cmp	r3, #5
 8003764:	d136      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0216 	bic.w	r2, r2, #22
 8003774:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003784:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <HAL_DMA_IRQHandler+0x1da>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0208 	bic.w	r2, r2, #8
 80037a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	223f      	movs	r2, #63	@ 0x3f
 80037ac:	409a      	lsls	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d07e      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
        }
        return;
 80037d2:	e079      	b.n	80038c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10d      	bne.n	800380c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d031      	beq.n	800385c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
 8003800:	e02c      	b.n	800385c <HAL_DMA_IRQHandler+0x2a0>
 8003802:	bf00      	nop
 8003804:	2000002c 	.word	0x2000002c
 8003808:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d023      	beq.n	800385c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
 800381c:	e01e      	b.n	800385c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10f      	bne.n	800384c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0210 	bic.w	r2, r2, #16
 800383a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003860:	2b00      	cmp	r3, #0
 8003862:	d032      	beq.n	80038ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d022      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2205      	movs	r2, #5
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	3301      	adds	r3, #1
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	429a      	cmp	r2, r3
 8003892:	d307      	bcc.n	80038a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f2      	bne.n	8003888 <HAL_DMA_IRQHandler+0x2cc>
 80038a2:	e000      	b.n	80038a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
 80038c6:	e000      	b.n	80038ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80038c8:	bf00      	nop
    }
  }
}
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80038ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b40      	cmp	r3, #64	@ 0x40
 80038fc:	d108      	bne.n	8003910 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800390e:	e007      	b.n	8003920 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	60da      	str	r2, [r3, #12]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	3b10      	subs	r3, #16
 800393c:	4a14      	ldr	r2, [pc, #80]	@ (8003990 <DMA_CalcBaseAndBitshift+0x64>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003946:	4a13      	ldr	r2, [pc, #76]	@ (8003994 <DMA_CalcBaseAndBitshift+0x68>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d909      	bls.n	800396e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	1d1a      	adds	r2, r3, #4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	659a      	str	r2, [r3, #88]	@ 0x58
 800396c:	e007      	b.n	800397e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	aaaaaaab 	.word	0xaaaaaaab
 8003994:	080087e0 	.word	0x080087e0

08003998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d11f      	bne.n	80039f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d856      	bhi.n	8003a66 <DMA_CheckFifoParam+0xce>
 80039b8:	a201      	add	r2, pc, #4	@ (adr r2, 80039c0 <DMA_CheckFifoParam+0x28>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039e3 	.word	0x080039e3
 80039c8:	080039d1 	.word	0x080039d1
 80039cc:	08003a67 	.word	0x08003a67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d046      	beq.n	8003a6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e0:	e043      	b.n	8003a6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039ea:	d140      	bne.n	8003a6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f0:	e03d      	b.n	8003a6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039fa:	d121      	bne.n	8003a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d837      	bhi.n	8003a72 <DMA_CheckFifoParam+0xda>
 8003a02:	a201      	add	r2, pc, #4	@ (adr r2, 8003a08 <DMA_CheckFifoParam+0x70>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a1f 	.word	0x08003a1f
 8003a10:	08003a19 	.word	0x08003a19
 8003a14:	08003a31 	.word	0x08003a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1c:	e030      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d025      	beq.n	8003a76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2e:	e022      	b.n	8003a76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a38:	d11f      	bne.n	8003a7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a3e:	e01c      	b.n	8003a7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d903      	bls.n	8003a4e <DMA_CheckFifoParam+0xb6>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d003      	beq.n	8003a54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a4c:	e018      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      break;
 8003a52:	e015      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00e      	beq.n	8003a7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
      break;
 8003a64:	e00b      	b.n	8003a7e <DMA_CheckFifoParam+0xe6>
      break;
 8003a66:	bf00      	nop
 8003a68:	e00a      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e008      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e006      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;
 8003a72:	bf00      	nop
 8003a74:	e004      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop

08003a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b089      	sub	sp, #36	@ 0x24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	e165      	b.n	8003d78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aac:	2201      	movs	r2, #1
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	f040 8154 	bne.w	8003d72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d005      	beq.n	8003ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d130      	bne.n	8003b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	2203      	movs	r2, #3
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b18:	2201      	movs	r2, #1
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 0201 	and.w	r2, r3, #1
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d017      	beq.n	8003b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d123      	bne.n	8003bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	08da      	lsrs	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3208      	adds	r2, #8
 8003b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	220f      	movs	r2, #15
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	08da      	lsrs	r2, r3, #3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3208      	adds	r2, #8
 8003bce:	69b9      	ldr	r1, [r7, #24]
 8003bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	2203      	movs	r2, #3
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4013      	ands	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0203 	and.w	r2, r3, #3
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80ae 	beq.w	8003d72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003d90 <HAL_GPIO_Init+0x300>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003d90 <HAL_GPIO_Init+0x300>)
 8003c20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c26:	4b5a      	ldr	r3, [pc, #360]	@ (8003d90 <HAL_GPIO_Init+0x300>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c32:	4a58      	ldr	r2, [pc, #352]	@ (8003d94 <HAL_GPIO_Init+0x304>)
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	3302      	adds	r3, #2
 8003c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	220f      	movs	r2, #15
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a4f      	ldr	r2, [pc, #316]	@ (8003d98 <HAL_GPIO_Init+0x308>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d025      	beq.n	8003caa <HAL_GPIO_Init+0x21a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4e      	ldr	r2, [pc, #312]	@ (8003d9c <HAL_GPIO_Init+0x30c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01f      	beq.n	8003ca6 <HAL_GPIO_Init+0x216>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4d      	ldr	r2, [pc, #308]	@ (8003da0 <HAL_GPIO_Init+0x310>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d019      	beq.n	8003ca2 <HAL_GPIO_Init+0x212>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a4c      	ldr	r2, [pc, #304]	@ (8003da4 <HAL_GPIO_Init+0x314>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <HAL_GPIO_Init+0x20e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a4b      	ldr	r2, [pc, #300]	@ (8003da8 <HAL_GPIO_Init+0x318>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00d      	beq.n	8003c9a <HAL_GPIO_Init+0x20a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a4a      	ldr	r2, [pc, #296]	@ (8003dac <HAL_GPIO_Init+0x31c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <HAL_GPIO_Init+0x206>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a49      	ldr	r2, [pc, #292]	@ (8003db0 <HAL_GPIO_Init+0x320>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_GPIO_Init+0x202>
 8003c8e:	2306      	movs	r3, #6
 8003c90:	e00c      	b.n	8003cac <HAL_GPIO_Init+0x21c>
 8003c92:	2307      	movs	r3, #7
 8003c94:	e00a      	b.n	8003cac <HAL_GPIO_Init+0x21c>
 8003c96:	2305      	movs	r3, #5
 8003c98:	e008      	b.n	8003cac <HAL_GPIO_Init+0x21c>
 8003c9a:	2304      	movs	r3, #4
 8003c9c:	e006      	b.n	8003cac <HAL_GPIO_Init+0x21c>
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e004      	b.n	8003cac <HAL_GPIO_Init+0x21c>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e002      	b.n	8003cac <HAL_GPIO_Init+0x21c>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <HAL_GPIO_Init+0x21c>
 8003caa:	2300      	movs	r3, #0
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	f002 0203 	and.w	r2, r2, #3
 8003cb2:	0092      	lsls	r2, r2, #2
 8003cb4:	4093      	lsls	r3, r2
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cbc:	4935      	ldr	r1, [pc, #212]	@ (8003d94 <HAL_GPIO_Init+0x304>)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cca:	4b3a      	ldr	r3, [pc, #232]	@ (8003db4 <HAL_GPIO_Init+0x324>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cee:	4a31      	ldr	r2, [pc, #196]	@ (8003db4 <HAL_GPIO_Init+0x324>)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8003db4 <HAL_GPIO_Init+0x324>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d18:	4a26      	ldr	r2, [pc, #152]	@ (8003db4 <HAL_GPIO_Init+0x324>)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d1e:	4b25      	ldr	r3, [pc, #148]	@ (8003db4 <HAL_GPIO_Init+0x324>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d42:	4a1c      	ldr	r2, [pc, #112]	@ (8003db4 <HAL_GPIO_Init+0x324>)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d48:	4b1a      	ldr	r3, [pc, #104]	@ (8003db4 <HAL_GPIO_Init+0x324>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d6c:	4a11      	ldr	r2, [pc, #68]	@ (8003db4 <HAL_GPIO_Init+0x324>)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3301      	adds	r3, #1
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b0f      	cmp	r3, #15
 8003d7c:	f67f ae96 	bls.w	8003aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3724      	adds	r7, #36	@ 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40013800 	.word	0x40013800
 8003d98:	40020000 	.word	0x40020000
 8003d9c:	40020400 	.word	0x40020400
 8003da0:	40020800 	.word	0x40020800
 8003da4:	40020c00 	.word	0x40020c00
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40021400 	.word	0x40021400
 8003db0:	40021800 	.word	0x40021800
 8003db4:	40013c00 	.word	0x40013c00

08003db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	887b      	ldrh	r3, [r7, #2]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
 8003dd4:	e001      	b.n	8003dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
 8003df4:	4613      	mov	r3, r2
 8003df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003df8:	787b      	ldrb	r3, [r7, #1]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dfe:	887a      	ldrh	r2, [r7, #2]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e04:	e003      	b.n	8003e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e06:	887b      	ldrh	r3, [r7, #2]
 8003e08:	041a      	lsls	r2, r3, #16
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	619a      	str	r2, [r3, #24]
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e2c:	887a      	ldrh	r2, [r7, #2]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4013      	ands	r3, r2
 8003e32:	041a      	lsls	r2, r3, #16
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	43d9      	mvns	r1, r3
 8003e38:	887b      	ldrh	r3, [r7, #2]
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	619a      	str	r2, [r3, #24]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e12b      	b.n	80040ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fe fe18 	bl	8002aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	@ 0x24
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f001 f932 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 8003eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a81      	ldr	r2, [pc, #516]	@ (80040c4 <HAL_I2C_Init+0x274>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d807      	bhi.n	8003ed4 <HAL_I2C_Init+0x84>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a80      	ldr	r2, [pc, #512]	@ (80040c8 <HAL_I2C_Init+0x278>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	bf94      	ite	ls
 8003ecc:	2301      	movls	r3, #1
 8003ece:	2300      	movhi	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e006      	b.n	8003ee2 <HAL_I2C_Init+0x92>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a7d      	ldr	r2, [pc, #500]	@ (80040cc <HAL_I2C_Init+0x27c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bf94      	ite	ls
 8003edc:	2301      	movls	r3, #1
 8003ede:	2300      	movhi	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0e7      	b.n	80040ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a78      	ldr	r2, [pc, #480]	@ (80040d0 <HAL_I2C_Init+0x280>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0c9b      	lsrs	r3, r3, #18
 8003ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a6a      	ldr	r2, [pc, #424]	@ (80040c4 <HAL_I2C_Init+0x274>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d802      	bhi.n	8003f24 <HAL_I2C_Init+0xd4>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3301      	adds	r3, #1
 8003f22:	e009      	b.n	8003f38 <HAL_I2C_Init+0xe8>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	4a69      	ldr	r2, [pc, #420]	@ (80040d4 <HAL_I2C_Init+0x284>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	3301      	adds	r3, #1
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	495c      	ldr	r1, [pc, #368]	@ (80040c4 <HAL_I2C_Init+0x274>)
 8003f54:	428b      	cmp	r3, r1
 8003f56:	d819      	bhi.n	8003f8c <HAL_I2C_Init+0x13c>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1e59      	subs	r1, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f66:	1c59      	adds	r1, r3, #1
 8003f68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_I2C_Init+0x138>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1e59      	subs	r1, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f80:	3301      	adds	r3, #1
 8003f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f86:	e051      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	e04f      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d111      	bne.n	8003fb8 <HAL_I2C_Init+0x168>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e012      	b.n	8003fde <HAL_I2C_Init+0x18e>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e58      	subs	r0, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	0099      	lsls	r1, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Init+0x196>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e022      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10e      	bne.n	800400c <HAL_I2C_Init+0x1bc>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1e58      	subs	r0, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	440b      	add	r3, r1
 8003ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004000:	3301      	adds	r3, #1
 8004002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800400a:	e00f      	b.n	800402c <HAL_I2C_Init+0x1dc>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	0099      	lsls	r1, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	6809      	ldr	r1, [r1, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800405a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6911      	ldr	r1, [r2, #16]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	430b      	orrs	r3, r1
 800406e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	000186a0 	.word	0x000186a0
 80040c8:	001e847f 	.word	0x001e847f
 80040cc:	003d08ff 	.word	0x003d08ff
 80040d0:	431bde83 	.word	0x431bde83
 80040d4:	10624dd3 	.word	0x10624dd3

080040d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	817b      	strh	r3, [r7, #10]
 80040ea:	460b      	mov	r3, r1
 80040ec:	813b      	strh	r3, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040f2:	f7ff f81b 	bl	800312c <HAL_GetTick>
 80040f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b20      	cmp	r3, #32
 8004102:	f040 80d9 	bne.w	80042b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	2319      	movs	r3, #25
 800410c:	2201      	movs	r2, #1
 800410e:	496d      	ldr	r1, [pc, #436]	@ (80042c4 <HAL_I2C_Mem_Write+0x1ec>)
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fc8b 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
 800411e:	e0cc      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_I2C_Mem_Write+0x56>
 800412a:	2302      	movs	r3, #2
 800412c:	e0c5      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d007      	beq.n	8004154 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004162:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2221      	movs	r2, #33	@ 0x21
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2240      	movs	r2, #64	@ 0x40
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a3a      	ldr	r2, [r7, #32]
 800417e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004184:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a4d      	ldr	r2, [pc, #308]	@ (80042c8 <HAL_I2C_Mem_Write+0x1f0>)
 8004194:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004196:	88f8      	ldrh	r0, [r7, #6]
 8004198:	893a      	ldrh	r2, [r7, #8]
 800419a:	8979      	ldrh	r1, [r7, #10]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	4603      	mov	r3, r0
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fac2 	bl	8004730 <I2C_RequestMemoryWrite>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d052      	beq.n	8004258 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e081      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fd50 	bl	8004c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d107      	bne.n	80041de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06b      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b04      	cmp	r3, #4
 800421e:	d11b      	bne.n	8004258 <HAL_I2C_Mem_Write+0x180>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d017      	beq.n	8004258 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	781a      	ldrb	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1aa      	bne.n	80041b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fd43 	bl	8004cf0 <I2C_WaitOnBTFFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	2b04      	cmp	r3, #4
 8004276:	d107      	bne.n	8004288 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004286:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e016      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800429a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e000      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	00100002 	.word	0x00100002
 80042c8:	ffff0000 	.word	0xffff0000

080042cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	@ 0x30
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	4608      	mov	r0, r1
 80042d6:	4611      	mov	r1, r2
 80042d8:	461a      	mov	r2, r3
 80042da:	4603      	mov	r3, r0
 80042dc:	817b      	strh	r3, [r7, #10]
 80042de:	460b      	mov	r3, r1
 80042e0:	813b      	strh	r3, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042e6:	f7fe ff21 	bl	800312c <HAL_GetTick>
 80042ea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	f040 8214 	bne.w	8004722 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	2319      	movs	r3, #25
 8004300:	2201      	movs	r2, #1
 8004302:	497b      	ldr	r1, [pc, #492]	@ (80044f0 <HAL_I2C_Mem_Read+0x224>)
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fb91 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
 8004312:	e207      	b.n	8004724 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_I2C_Mem_Read+0x56>
 800431e:	2302      	movs	r3, #2
 8004320:	e200      	b.n	8004724 <HAL_I2C_Mem_Read+0x458>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d007      	beq.n	8004348 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004356:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2222      	movs	r2, #34	@ 0x22
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2240      	movs	r2, #64	@ 0x40
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004372:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004378:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a5b      	ldr	r2, [pc, #364]	@ (80044f4 <HAL_I2C_Mem_Read+0x228>)
 8004388:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800438a:	88f8      	ldrh	r0, [r7, #6]
 800438c:	893a      	ldrh	r2, [r7, #8]
 800438e:	8979      	ldrh	r1, [r7, #10]
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	4603      	mov	r3, r0
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fa5e 	bl	800485c <I2C_RequestMemoryRead>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e1bc      	b.n	8004724 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d113      	bne.n	80043da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b2:	2300      	movs	r3, #0
 80043b4:	623b      	str	r3, [r7, #32]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	623b      	str	r3, [r7, #32]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	623b      	str	r3, [r7, #32]
 80043c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e190      	b.n	80046fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d11b      	bne.n	800441a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e170      	b.n	80046fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441e:	2b02      	cmp	r3, #2
 8004420:	d11b      	bne.n	800445a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004430:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004440:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	e150      	b.n	80046fc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004470:	e144      	b.n	80046fc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004476:	2b03      	cmp	r3, #3
 8004478:	f200 80f1 	bhi.w	800465e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004480:	2b01      	cmp	r3, #1
 8004482:	d123      	bne.n	80044cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004486:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fc79 	bl	8004d80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e145      	b.n	8004724 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044ca:	e117      	b.n	80046fc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d14e      	bne.n	8004572 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044da:	2200      	movs	r2, #0
 80044dc:	4906      	ldr	r1, [pc, #24]	@ (80044f8 <HAL_I2C_Mem_Read+0x22c>)
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 faa4 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e11a      	b.n	8004724 <HAL_I2C_Mem_Read+0x458>
 80044ee:	bf00      	nop
 80044f0:	00100002 	.word	0x00100002
 80044f4:	ffff0000 	.word	0xffff0000
 80044f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800450a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004570:	e0c4      	b.n	80046fc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004578:	2200      	movs	r2, #0
 800457a:	496c      	ldr	r1, [pc, #432]	@ (800472c <HAL_I2C_Mem_Read+0x460>)
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fa55 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0cb      	b.n	8004724 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800459a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d4:	2200      	movs	r2, #0
 80045d6:	4955      	ldr	r1, [pc, #340]	@ (800472c <HAL_I2C_Mem_Read+0x460>)
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fa27 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e09d      	b.n	8004724 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800465c:	e04e      	b.n	80046fc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004660:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fb8c 	bl	8004d80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e058      	b.n	8004724 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d124      	bne.n	80046fc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d107      	bne.n	80046ca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004700:	2b00      	cmp	r3, #0
 8004702:	f47f aeb6 	bne.w	8004472 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	e000      	b.n	8004724 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004722:	2302      	movs	r3, #2
  }
}
 8004724:	4618      	mov	r0, r3
 8004726:	3728      	adds	r7, #40	@ 0x28
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	00010004 	.word	0x00010004

08004730 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	4608      	mov	r0, r1
 800473a:	4611      	mov	r1, r2
 800473c:	461a      	mov	r2, r3
 800473e:	4603      	mov	r3, r0
 8004740:	817b      	strh	r3, [r7, #10]
 8004742:	460b      	mov	r3, r1
 8004744:	813b      	strh	r3, [r7, #8]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004758:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	2200      	movs	r2, #0
 8004762:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f960 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004780:	d103      	bne.n	800478a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004788:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e05f      	b.n	800484e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800478e:	897b      	ldrh	r3, [r7, #10]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800479c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	6a3a      	ldr	r2, [r7, #32]
 80047a2:	492d      	ldr	r1, [pc, #180]	@ (8004858 <I2C_RequestMemoryWrite+0x128>)
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f9bb 	bl	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e04c      	b.n	800484e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047cc:	6a39      	ldr	r1, [r7, #32]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fa46 	bl	8004c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00d      	beq.n	80047f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d107      	bne.n	80047f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e02b      	b.n	800484e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047fc:	893b      	ldrh	r3, [r7, #8]
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	611a      	str	r2, [r3, #16]
 8004806:	e021      	b.n	800484c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004808:	893b      	ldrh	r3, [r7, #8]
 800480a:	0a1b      	lsrs	r3, r3, #8
 800480c:	b29b      	uxth	r3, r3
 800480e:	b2da      	uxtb	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004818:	6a39      	ldr	r1, [r7, #32]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fa20 	bl	8004c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00d      	beq.n	8004842 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	2b04      	cmp	r3, #4
 800482c:	d107      	bne.n	800483e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800483c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e005      	b.n	800484e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004842:	893b      	ldrh	r3, [r7, #8]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	00010002 	.word	0x00010002

0800485c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	4608      	mov	r0, r1
 8004866:	4611      	mov	r1, r2
 8004868:	461a      	mov	r2, r3
 800486a:	4603      	mov	r3, r0
 800486c:	817b      	strh	r3, [r7, #10]
 800486e:	460b      	mov	r3, r1
 8004870:	813b      	strh	r3, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004884:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004894:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	2200      	movs	r2, #0
 800489e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f8c2 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048bc:	d103      	bne.n	80048c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0aa      	b.n	8004a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ca:	897b      	ldrh	r3, [r7, #10]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	4952      	ldr	r1, [pc, #328]	@ (8004a28 <I2C_RequestMemoryRead+0x1cc>)
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f91d 	bl	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e097      	b.n	8004a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004908:	6a39      	ldr	r1, [r7, #32]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f9a8 	bl	8004c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	2b04      	cmp	r3, #4
 800491c:	d107      	bne.n	800492e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800492c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e076      	b.n	8004a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004938:	893b      	ldrh	r3, [r7, #8]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	611a      	str	r2, [r3, #16]
 8004942:	e021      	b.n	8004988 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004944:	893b      	ldrh	r3, [r7, #8]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	b29b      	uxth	r3, r3
 800494a:	b2da      	uxtb	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004954:	6a39      	ldr	r1, [r7, #32]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f982 	bl	8004c60 <I2C_WaitOnTXEFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00d      	beq.n	800497e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	2b04      	cmp	r3, #4
 8004968:	d107      	bne.n	800497a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004978:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e050      	b.n	8004a20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800497e:	893b      	ldrh	r3, [r7, #8]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498a:	6a39      	ldr	r1, [r7, #32]
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f967 	bl	8004c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00d      	beq.n	80049b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	2b04      	cmp	r3, #4
 800499e:	d107      	bne.n	80049b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e035      	b.n	8004a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f82b 	bl	8004a2c <I2C_WaitOnFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00d      	beq.n	80049f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ea:	d103      	bne.n	80049f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e013      	b.n	8004a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049f8:	897b      	ldrh	r3, [r7, #10]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	6a3a      	ldr	r2, [r7, #32]
 8004a0c:	4906      	ldr	r1, [pc, #24]	@ (8004a28 <I2C_RequestMemoryRead+0x1cc>)
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f886 	bl	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	00010002 	.word	0x00010002

08004a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a3c:	e048      	b.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d044      	beq.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a46:	f7fe fb71 	bl	800312c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d302      	bcc.n	8004a5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d139      	bne.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	0c1b      	lsrs	r3, r3, #16
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d10d      	bne.n	8004a82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	43da      	mvns	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4013      	ands	r3, r2
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	e00c      	b.n	8004a9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	43da      	mvns	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d116      	bne.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e023      	b.n	8004b18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d10d      	bne.n	8004af6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	43da      	mvns	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bf0c      	ite	eq
 8004aec:	2301      	moveq	r3, #1
 8004aee:	2300      	movne	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	e00c      	b.n	8004b10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	43da      	mvns	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4013      	ands	r3, r2
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d093      	beq.n	8004a3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b2e:	e071      	b.n	8004c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3e:	d123      	bne.n	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	f043 0204 	orr.w	r2, r3, #4
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e067      	b.n	8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d041      	beq.n	8004c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b90:	f7fe facc 	bl	800312c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d302      	bcc.n	8004ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d136      	bne.n	8004c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10c      	bne.n	8004bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	bf14      	ite	ne
 8004bc2:	2301      	movne	r3, #1
 8004bc4:	2300      	moveq	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	e00b      	b.n	8004be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	43da      	mvns	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d016      	beq.n	8004c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e021      	b.n	8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	0c1b      	lsrs	r3, r3, #16
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d10c      	bne.n	8004c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	43da      	mvns	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	e00b      	b.n	8004c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	43da      	mvns	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4013      	ands	r3, r2
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bf14      	ite	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	2300      	moveq	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f47f af6d 	bne.w	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c6c:	e034      	b.n	8004cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f8e3 	bl	8004e3a <I2C_IsAcknowledgeFailed>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e034      	b.n	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d028      	beq.n	8004cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c86:	f7fe fa51 	bl	800312c <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d302      	bcc.n	8004c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d11d      	bne.n	8004cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca6:	2b80      	cmp	r3, #128	@ 0x80
 8004ca8:	d016      	beq.n	8004cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc4:	f043 0220 	orr.w	r2, r3, #32
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e007      	b.n	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce2:	2b80      	cmp	r3, #128	@ 0x80
 8004ce4:	d1c3      	bne.n	8004c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cfc:	e034      	b.n	8004d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f89b 	bl	8004e3a <I2C_IsAcknowledgeFailed>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e034      	b.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d028      	beq.n	8004d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d16:	f7fe fa09 	bl	800312c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d302      	bcc.n	8004d2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d11d      	bne.n	8004d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d016      	beq.n	8004d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e007      	b.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d1c3      	bne.n	8004cfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d8c:	e049      	b.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d119      	bne.n	8004dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0210 	mvn.w	r2, #16
 8004da4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e030      	b.n	8004e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd0:	f7fe f9ac 	bl	800312c <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d302      	bcc.n	8004de6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d11d      	bne.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df0:	2b40      	cmp	r3, #64	@ 0x40
 8004df2:	d016      	beq.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e007      	b.n	8004e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2c:	2b40      	cmp	r3, #64	@ 0x40
 8004e2e:	d1ae      	bne.n	8004d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e50:	d11b      	bne.n	8004e8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	f043 0204 	orr.w	r2, r3, #4
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	4b20      	ldr	r3, [pc, #128]	@ (8004f28 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8004f28 <HAL_PWREx_EnableOverDrive+0x90>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f28 <HAL_PWREx_EnableOverDrive+0x90>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8004f2c <HAL_PWREx_EnableOverDrive+0x94>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec4:	f7fe f932 	bl	800312c <HAL_GetTick>
 8004ec8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004eca:	e009      	b.n	8004ee0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ecc:	f7fe f92e 	bl	800312c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004eda:	d901      	bls.n	8004ee0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e01f      	b.n	8004f20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ee0:	4b13      	ldr	r3, [pc, #76]	@ (8004f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eec:	d1ee      	bne.n	8004ecc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004eee:	4b11      	ldr	r3, [pc, #68]	@ (8004f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ef4:	f7fe f91a 	bl	800312c <HAL_GetTick>
 8004ef8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004efa:	e009      	b.n	8004f10 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004efc:	f7fe f916 	bl	800312c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f0a:	d901      	bls.n	8004f10 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e007      	b.n	8004f20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f10:	4b07      	ldr	r3, [pc, #28]	@ (8004f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f1c:	d1ee      	bne.n	8004efc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	420e0040 	.word	0x420e0040
 8004f30:	40007000 	.word	0x40007000
 8004f34:	420e0044 	.word	0x420e0044

08004f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0cc      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f4c:	4b68      	ldr	r3, [pc, #416]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d90c      	bls.n	8004f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5a:	4b65      	ldr	r3, [pc, #404]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b63      	ldr	r3, [pc, #396]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0b8      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d020      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f8c:	4b59      	ldr	r3, [pc, #356]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	4a58      	ldr	r2, [pc, #352]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa4:	4b53      	ldr	r3, [pc, #332]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4a52      	ldr	r2, [pc, #328]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb0:	4b50      	ldr	r3, [pc, #320]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	494d      	ldr	r1, [pc, #308]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d044      	beq.n	8005058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd6:	4b47      	ldr	r3, [pc, #284]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d119      	bne.n	8005016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e07f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d003      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e06f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005006:	4b3b      	ldr	r3, [pc, #236]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e067      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005016:	4b37      	ldr	r3, [pc, #220]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f023 0203 	bic.w	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4934      	ldr	r1, [pc, #208]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	4313      	orrs	r3, r2
 8005026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005028:	f7fe f880 	bl	800312c <HAL_GetTick>
 800502c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	e00a      	b.n	8005046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005030:	f7fe f87c 	bl	800312c <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e04f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005046:	4b2b      	ldr	r3, [pc, #172]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 020c 	and.w	r2, r3, #12
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	429a      	cmp	r2, r3
 8005056:	d1eb      	bne.n	8005030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005058:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d20c      	bcs.n	8005080 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005066:	4b22      	ldr	r3, [pc, #136]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506e:	4b20      	ldr	r3, [pc, #128]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e032      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508c:	4b19      	ldr	r3, [pc, #100]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4916      	ldr	r1, [pc, #88]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050aa:	4b12      	ldr	r3, [pc, #72]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	490e      	ldr	r1, [pc, #56]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050be:	f000 f855 	bl	800516c <HAL_RCC_GetSysClockFreq>
 80050c2:	4602      	mov	r2, r0
 80050c4:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	490a      	ldr	r1, [pc, #40]	@ (80050f8 <HAL_RCC_ClockConfig+0x1c0>)
 80050d0:	5ccb      	ldrb	r3, [r1, r3]
 80050d2:	fa22 f303 	lsr.w	r3, r2, r3
 80050d6:	4a09      	ldr	r2, [pc, #36]	@ (80050fc <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050da:	4b09      	ldr	r3, [pc, #36]	@ (8005100 <HAL_RCC_ClockConfig+0x1c8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fd ffe0 	bl	80030a4 <HAL_InitTick>

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40023c00 	.word	0x40023c00
 80050f4:	40023800 	.word	0x40023800
 80050f8:	080087c8 	.word	0x080087c8
 80050fc:	2000002c 	.word	0x2000002c
 8005100:	20000030 	.word	0x20000030

08005104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005108:	4b03      	ldr	r3, [pc, #12]	@ (8005118 <HAL_RCC_GetHCLKFreq+0x14>)
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	2000002c 	.word	0x2000002c

0800511c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005120:	f7ff fff0 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 8005124:	4602      	mov	r2, r0
 8005126:	4b05      	ldr	r3, [pc, #20]	@ (800513c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	0a9b      	lsrs	r3, r3, #10
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	4903      	ldr	r1, [pc, #12]	@ (8005140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005132:	5ccb      	ldrb	r3, [r1, r3]
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005138:	4618      	mov	r0, r3
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40023800 	.word	0x40023800
 8005140:	080087d8 	.word	0x080087d8

08005144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005148:	f7ff ffdc 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	0b5b      	lsrs	r3, r3, #13
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	4903      	ldr	r1, [pc, #12]	@ (8005168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40023800 	.word	0x40023800
 8005168:	080087d8 	.word	0x080087d8

0800516c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800516c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005170:	b0ae      	sub	sp, #184	@ 0xb8
 8005172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005192:	4bcb      	ldr	r3, [pc, #812]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 030c 	and.w	r3, r3, #12
 800519a:	2b0c      	cmp	r3, #12
 800519c:	f200 8204 	bhi.w	80055a8 <HAL_RCC_GetSysClockFreq+0x43c>
 80051a0:	a201      	add	r2, pc, #4	@ (adr r2, 80051a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051dd 	.word	0x080051dd
 80051ac:	080055a9 	.word	0x080055a9
 80051b0:	080055a9 	.word	0x080055a9
 80051b4:	080055a9 	.word	0x080055a9
 80051b8:	080051e5 	.word	0x080051e5
 80051bc:	080055a9 	.word	0x080055a9
 80051c0:	080055a9 	.word	0x080055a9
 80051c4:	080055a9 	.word	0x080055a9
 80051c8:	080051ed 	.word	0x080051ed
 80051cc:	080055a9 	.word	0x080055a9
 80051d0:	080055a9 	.word	0x080055a9
 80051d4:	080055a9 	.word	0x080055a9
 80051d8:	080053dd 	.word	0x080053dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051dc:	4bb9      	ldr	r3, [pc, #740]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80051de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051e2:	e1e5      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051e4:	4bb7      	ldr	r3, [pc, #732]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80051e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051ea:	e1e1      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051ec:	4bb4      	ldr	r3, [pc, #720]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051f8:	4bb1      	ldr	r3, [pc, #708]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d071      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005204:	4bae      	ldr	r3, [pc, #696]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	099b      	lsrs	r3, r3, #6
 800520a:	2200      	movs	r2, #0
 800520c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005210:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005214:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005220:	2300      	movs	r3, #0
 8005222:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800522a:	4622      	mov	r2, r4
 800522c:	462b      	mov	r3, r5
 800522e:	f04f 0000 	mov.w	r0, #0
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	0159      	lsls	r1, r3, #5
 8005238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800523c:	0150      	lsls	r0, r2, #5
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4621      	mov	r1, r4
 8005244:	1a51      	subs	r1, r2, r1
 8005246:	6439      	str	r1, [r7, #64]	@ 0x40
 8005248:	4629      	mov	r1, r5
 800524a:	eb63 0301 	sbc.w	r3, r3, r1
 800524e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800525c:	4649      	mov	r1, r9
 800525e:	018b      	lsls	r3, r1, #6
 8005260:	4641      	mov	r1, r8
 8005262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005266:	4641      	mov	r1, r8
 8005268:	018a      	lsls	r2, r1, #6
 800526a:	4641      	mov	r1, r8
 800526c:	1a51      	subs	r1, r2, r1
 800526e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005270:	4649      	mov	r1, r9
 8005272:	eb63 0301 	sbc.w	r3, r3, r1
 8005276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005284:	4649      	mov	r1, r9
 8005286:	00cb      	lsls	r3, r1, #3
 8005288:	4641      	mov	r1, r8
 800528a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800528e:	4641      	mov	r1, r8
 8005290:	00ca      	lsls	r2, r1, #3
 8005292:	4610      	mov	r0, r2
 8005294:	4619      	mov	r1, r3
 8005296:	4603      	mov	r3, r0
 8005298:	4622      	mov	r2, r4
 800529a:	189b      	adds	r3, r3, r2
 800529c:	633b      	str	r3, [r7, #48]	@ 0x30
 800529e:	462b      	mov	r3, r5
 80052a0:	460a      	mov	r2, r1
 80052a2:	eb42 0303 	adc.w	r3, r2, r3
 80052a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052b4:	4629      	mov	r1, r5
 80052b6:	028b      	lsls	r3, r1, #10
 80052b8:	4621      	mov	r1, r4
 80052ba:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052be:	4621      	mov	r1, r4
 80052c0:	028a      	lsls	r2, r1, #10
 80052c2:	4610      	mov	r0, r2
 80052c4:	4619      	mov	r1, r3
 80052c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80052d8:	f7fb fc64 	bl	8000ba4 <__aeabi_uldivmod>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4613      	mov	r3, r2
 80052e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052e6:	e067      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e8:	4b75      	ldr	r3, [pc, #468]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	099b      	lsrs	r3, r3, #6
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80052f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005300:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005302:	2300      	movs	r3, #0
 8005304:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005306:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800530a:	4622      	mov	r2, r4
 800530c:	462b      	mov	r3, r5
 800530e:	f04f 0000 	mov.w	r0, #0
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	0159      	lsls	r1, r3, #5
 8005318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800531c:	0150      	lsls	r0, r2, #5
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4621      	mov	r1, r4
 8005324:	1a51      	subs	r1, r2, r1
 8005326:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005328:	4629      	mov	r1, r5
 800532a:	eb63 0301 	sbc.w	r3, r3, r1
 800532e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800533c:	4649      	mov	r1, r9
 800533e:	018b      	lsls	r3, r1, #6
 8005340:	4641      	mov	r1, r8
 8005342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005346:	4641      	mov	r1, r8
 8005348:	018a      	lsls	r2, r1, #6
 800534a:	4641      	mov	r1, r8
 800534c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005350:	4649      	mov	r1, r9
 8005352:	eb63 0b01 	sbc.w	fp, r3, r1
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005362:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005366:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800536a:	4692      	mov	sl, r2
 800536c:	469b      	mov	fp, r3
 800536e:	4623      	mov	r3, r4
 8005370:	eb1a 0303 	adds.w	r3, sl, r3
 8005374:	623b      	str	r3, [r7, #32]
 8005376:	462b      	mov	r3, r5
 8005378:	eb4b 0303 	adc.w	r3, fp, r3
 800537c:	627b      	str	r3, [r7, #36]	@ 0x24
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800538a:	4629      	mov	r1, r5
 800538c:	028b      	lsls	r3, r1, #10
 800538e:	4621      	mov	r1, r4
 8005390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005394:	4621      	mov	r1, r4
 8005396:	028a      	lsls	r2, r1, #10
 8005398:	4610      	mov	r0, r2
 800539a:	4619      	mov	r1, r3
 800539c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053a0:	2200      	movs	r2, #0
 80053a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80053a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80053a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80053aa:	f7fb fbfb 	bl	8000ba4 <__aeabi_uldivmod>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4613      	mov	r3, r2
 80053b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053b8:	4b41      	ldr	r3, [pc, #260]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	0c1b      	lsrs	r3, r3, #16
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	3301      	adds	r3, #1
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80053ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80053da:	e0e9      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053dc:	4b38      	ldr	r3, [pc, #224]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053e8:	4b35      	ldr	r3, [pc, #212]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d069      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f4:	4b32      	ldr	r3, [pc, #200]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	099b      	lsrs	r3, r3, #6
 80053fa:	2200      	movs	r2, #0
 80053fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005400:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005406:	663b      	str	r3, [r7, #96]	@ 0x60
 8005408:	2300      	movs	r3, #0
 800540a:	667b      	str	r3, [r7, #100]	@ 0x64
 800540c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005410:	4622      	mov	r2, r4
 8005412:	462b      	mov	r3, r5
 8005414:	f04f 0000 	mov.w	r0, #0
 8005418:	f04f 0100 	mov.w	r1, #0
 800541c:	0159      	lsls	r1, r3, #5
 800541e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005422:	0150      	lsls	r0, r2, #5
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4621      	mov	r1, r4
 800542a:	1a51      	subs	r1, r2, r1
 800542c:	61b9      	str	r1, [r7, #24]
 800542e:	4629      	mov	r1, r5
 8005430:	eb63 0301 	sbc.w	r3, r3, r1
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005442:	4659      	mov	r1, fp
 8005444:	018b      	lsls	r3, r1, #6
 8005446:	4651      	mov	r1, sl
 8005448:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800544c:	4651      	mov	r1, sl
 800544e:	018a      	lsls	r2, r1, #6
 8005450:	4651      	mov	r1, sl
 8005452:	ebb2 0801 	subs.w	r8, r2, r1
 8005456:	4659      	mov	r1, fp
 8005458:	eb63 0901 	sbc.w	r9, r3, r1
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005468:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800546c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005470:	4690      	mov	r8, r2
 8005472:	4699      	mov	r9, r3
 8005474:	4623      	mov	r3, r4
 8005476:	eb18 0303 	adds.w	r3, r8, r3
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	462b      	mov	r3, r5
 800547e:	eb49 0303 	adc.w	r3, r9, r3
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005490:	4629      	mov	r1, r5
 8005492:	028b      	lsls	r3, r1, #10
 8005494:	4621      	mov	r1, r4
 8005496:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800549a:	4621      	mov	r1, r4
 800549c:	028a      	lsls	r2, r1, #10
 800549e:	4610      	mov	r0, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054a6:	2200      	movs	r2, #0
 80054a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80054ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054b0:	f7fb fb78 	bl	8000ba4 <__aeabi_uldivmod>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4613      	mov	r3, r2
 80054ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054be:	e063      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x41c>
 80054c0:	40023800 	.word	0x40023800
 80054c4:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c8:	4b3d      	ldr	r3, [pc, #244]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x454>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	099b      	lsrs	r3, r3, #6
 80054ce:	2200      	movs	r2, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	4611      	mov	r1, r2
 80054d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80054da:	2300      	movs	r3, #0
 80054dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80054de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80054e2:	4642      	mov	r2, r8
 80054e4:	464b      	mov	r3, r9
 80054e6:	f04f 0000 	mov.w	r0, #0
 80054ea:	f04f 0100 	mov.w	r1, #0
 80054ee:	0159      	lsls	r1, r3, #5
 80054f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054f4:	0150      	lsls	r0, r2, #5
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4641      	mov	r1, r8
 80054fc:	1a51      	subs	r1, r2, r1
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	4649      	mov	r1, r9
 8005502:	eb63 0301 	sbc.w	r3, r3, r1
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005514:	4659      	mov	r1, fp
 8005516:	018b      	lsls	r3, r1, #6
 8005518:	4651      	mov	r1, sl
 800551a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800551e:	4651      	mov	r1, sl
 8005520:	018a      	lsls	r2, r1, #6
 8005522:	4651      	mov	r1, sl
 8005524:	1a54      	subs	r4, r2, r1
 8005526:	4659      	mov	r1, fp
 8005528:	eb63 0501 	sbc.w	r5, r3, r1
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	00eb      	lsls	r3, r5, #3
 8005536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800553a:	00e2      	lsls	r2, r4, #3
 800553c:	4614      	mov	r4, r2
 800553e:	461d      	mov	r5, r3
 8005540:	4643      	mov	r3, r8
 8005542:	18e3      	adds	r3, r4, r3
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	464b      	mov	r3, r9
 8005548:	eb45 0303 	adc.w	r3, r5, r3
 800554c:	607b      	str	r3, [r7, #4]
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800555a:	4629      	mov	r1, r5
 800555c:	028b      	lsls	r3, r1, #10
 800555e:	4621      	mov	r1, r4
 8005560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005564:	4621      	mov	r1, r4
 8005566:	028a      	lsls	r2, r1, #10
 8005568:	4610      	mov	r0, r2
 800556a:	4619      	mov	r1, r3
 800556c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005570:	2200      	movs	r2, #0
 8005572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005574:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005576:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800557a:	f7fb fb13 	bl	8000ba4 <__aeabi_uldivmod>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4613      	mov	r3, r2
 8005584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005588:	4b0d      	ldr	r3, [pc, #52]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x454>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	0f1b      	lsrs	r3, r3, #28
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005596:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800559a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800559e:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055a6:	e003      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055a8:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80055aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	37b8      	adds	r7, #184	@ 0xb8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	00f42400 	.word	0x00f42400

080055c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e28d      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8083 	beq.w	80056ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055e8:	4b94      	ldr	r3, [pc, #592]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 030c 	and.w	r3, r3, #12
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d019      	beq.n	8005628 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80055f4:	4b91      	ldr	r3, [pc, #580]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 030c 	and.w	r3, r3, #12
        || \
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d106      	bne.n	800560e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005600:	4b8e      	ldr	r3, [pc, #568]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800560c:	d00c      	beq.n	8005628 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800560e:	4b8b      	ldr	r3, [pc, #556]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005616:	2b0c      	cmp	r3, #12
 8005618:	d112      	bne.n	8005640 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800561a:	4b88      	ldr	r3, [pc, #544]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005622:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005626:	d10b      	bne.n	8005640 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005628:	4b84      	ldr	r3, [pc, #528]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d05b      	beq.n	80056ec <HAL_RCC_OscConfig+0x124>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d157      	bne.n	80056ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e25a      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005648:	d106      	bne.n	8005658 <HAL_RCC_OscConfig+0x90>
 800564a:	4b7c      	ldr	r3, [pc, #496]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a7b      	ldr	r2, [pc, #492]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e01d      	b.n	8005694 <HAL_RCC_OscConfig+0xcc>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005660:	d10c      	bne.n	800567c <HAL_RCC_OscConfig+0xb4>
 8005662:	4b76      	ldr	r3, [pc, #472]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a75      	ldr	r2, [pc, #468]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4b73      	ldr	r3, [pc, #460]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a72      	ldr	r2, [pc, #456]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e00b      	b.n	8005694 <HAL_RCC_OscConfig+0xcc>
 800567c:	4b6f      	ldr	r3, [pc, #444]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a6e      	ldr	r2, [pc, #440]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	4b6c      	ldr	r3, [pc, #432]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a6b      	ldr	r2, [pc, #428]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800568e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d013      	beq.n	80056c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fd fd46 	bl	800312c <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a4:	f7fd fd42 	bl	800312c <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	@ 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e21f      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b6:	4b61      	ldr	r3, [pc, #388]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0xdc>
 80056c2:	e014      	b.n	80056ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fd fd32 	bl	800312c <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056cc:	f7fd fd2e 	bl	800312c <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b64      	cmp	r3, #100	@ 0x64
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e20b      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056de:	4b57      	ldr	r3, [pc, #348]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x104>
 80056ea:	e000      	b.n	80056ee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d06f      	beq.n	80057da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056fa:	4b50      	ldr	r3, [pc, #320]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 030c 	and.w	r3, r3, #12
 8005702:	2b00      	cmp	r3, #0
 8005704:	d017      	beq.n	8005736 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005706:	4b4d      	ldr	r3, [pc, #308]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
        || \
 800570e:	2b08      	cmp	r3, #8
 8005710:	d105      	bne.n	800571e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005712:	4b4a      	ldr	r3, [pc, #296]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800571e:	4b47      	ldr	r3, [pc, #284]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005726:	2b0c      	cmp	r3, #12
 8005728:	d11c      	bne.n	8005764 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800572a:	4b44      	ldr	r3, [pc, #272]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d116      	bne.n	8005764 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005736:	4b41      	ldr	r3, [pc, #260]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_RCC_OscConfig+0x186>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d001      	beq.n	800574e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e1d3      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800574e:	4b3b      	ldr	r3, [pc, #236]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4937      	ldr	r1, [pc, #220]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800575e:	4313      	orrs	r3, r2
 8005760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005762:	e03a      	b.n	80057da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d020      	beq.n	80057ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800576c:	4b34      	ldr	r3, [pc, #208]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800576e:	2201      	movs	r2, #1
 8005770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005772:	f7fd fcdb 	bl	800312c <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800577a:	f7fd fcd7 	bl	800312c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e1b4      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800578c:	4b2b      	ldr	r3, [pc, #172]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005798:	4b28      	ldr	r3, [pc, #160]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	4925      	ldr	r1, [pc, #148]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	600b      	str	r3, [r1, #0]
 80057ac:	e015      	b.n	80057da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ae:	4b24      	ldr	r3, [pc, #144]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fd fcba 	bl	800312c <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057bc:	f7fd fcb6 	bl	800312c <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e193      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ce:	4b1b      	ldr	r3, [pc, #108]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d036      	beq.n	8005854 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d016      	beq.n	800581c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ee:	4b15      	ldr	r3, [pc, #84]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f4:	f7fd fc9a 	bl	800312c <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057fc:	f7fd fc96 	bl	800312c <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e173      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800580e:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <HAL_RCC_OscConfig+0x274>)
 8005810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x234>
 800581a:	e01b      	b.n	8005854 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800581c:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <HAL_RCC_OscConfig+0x27c>)
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005822:	f7fd fc83 	bl	800312c <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005828:	e00e      	b.n	8005848 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800582a:	f7fd fc7f 	bl	800312c <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d907      	bls.n	8005848 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e15c      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
 800583c:	40023800 	.word	0x40023800
 8005840:	42470000 	.word	0x42470000
 8005844:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005848:	4b8a      	ldr	r3, [pc, #552]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800584a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1ea      	bne.n	800582a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8097 	beq.w	8005990 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005862:	2300      	movs	r3, #0
 8005864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005866:	4b83      	ldr	r3, [pc, #524]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10f      	bne.n	8005892 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005872:	2300      	movs	r3, #0
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	4b7f      	ldr	r3, [pc, #508]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005880:	6413      	str	r3, [r2, #64]	@ 0x40
 8005882:	4b7c      	ldr	r3, [pc, #496]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800588a:	60bb      	str	r3, [r7, #8]
 800588c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800588e:	2301      	movs	r3, #1
 8005890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005892:	4b79      	ldr	r3, [pc, #484]	@ (8005a78 <HAL_RCC_OscConfig+0x4b0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d118      	bne.n	80058d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800589e:	4b76      	ldr	r3, [pc, #472]	@ (8005a78 <HAL_RCC_OscConfig+0x4b0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a75      	ldr	r2, [pc, #468]	@ (8005a78 <HAL_RCC_OscConfig+0x4b0>)
 80058a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058aa:	f7fd fc3f 	bl	800312c <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b2:	f7fd fc3b 	bl	800312c <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e118      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005a78 <HAL_RCC_OscConfig+0x4b0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d106      	bne.n	80058e6 <HAL_RCC_OscConfig+0x31e>
 80058d8:	4b66      	ldr	r3, [pc, #408]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80058da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058dc:	4a65      	ldr	r2, [pc, #404]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058e4:	e01c      	b.n	8005920 <HAL_RCC_OscConfig+0x358>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d10c      	bne.n	8005908 <HAL_RCC_OscConfig+0x340>
 80058ee:	4b61      	ldr	r3, [pc, #388]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f2:	4a60      	ldr	r2, [pc, #384]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80058f4:	f043 0304 	orr.w	r3, r3, #4
 80058f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80058fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fe:	4a5d      	ldr	r2, [pc, #372]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6713      	str	r3, [r2, #112]	@ 0x70
 8005906:	e00b      	b.n	8005920 <HAL_RCC_OscConfig+0x358>
 8005908:	4b5a      	ldr	r3, [pc, #360]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590c:	4a59      	ldr	r2, [pc, #356]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	@ 0x70
 8005914:	4b57      	ldr	r3, [pc, #348]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005918:	4a56      	ldr	r2, [pc, #344]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800591a:	f023 0304 	bic.w	r3, r3, #4
 800591e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d015      	beq.n	8005954 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005928:	f7fd fc00 	bl	800312c <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592e:	e00a      	b.n	8005946 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005930:	f7fd fbfc 	bl	800312c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e0d7      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005946:	4b4b      	ldr	r3, [pc, #300]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ee      	beq.n	8005930 <HAL_RCC_OscConfig+0x368>
 8005952:	e014      	b.n	800597e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005954:	f7fd fbea 	bl	800312c <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800595a:	e00a      	b.n	8005972 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595c:	f7fd fbe6 	bl	800312c <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e0c1      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005972:	4b40      	ldr	r3, [pc, #256]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1ee      	bne.n	800595c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800597e:	7dfb      	ldrb	r3, [r7, #23]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d105      	bne.n	8005990 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005984:	4b3b      	ldr	r3, [pc, #236]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005988:	4a3a      	ldr	r2, [pc, #232]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800598a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800598e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80ad 	beq.w	8005af4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800599a:	4b36      	ldr	r3, [pc, #216]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 030c 	and.w	r3, r3, #12
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d060      	beq.n	8005a68 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d145      	bne.n	8005a3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ae:	4b33      	ldr	r3, [pc, #204]	@ (8005a7c <HAL_RCC_OscConfig+0x4b4>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b4:	f7fd fbba 	bl	800312c <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059bc:	f7fd fbb6 	bl	800312c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e093      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ce:	4b29      	ldr	r3, [pc, #164]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f0      	bne.n	80059bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69da      	ldr	r2, [r3, #28]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e8:	019b      	lsls	r3, r3, #6
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	3b01      	subs	r3, #1
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fc:	061b      	lsls	r3, r3, #24
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a04:	071b      	lsls	r3, r3, #28
 8005a06:	491b      	ldr	r1, [pc, #108]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a7c <HAL_RCC_OscConfig+0x4b4>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a12:	f7fd fb8b 	bl	800312c <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a18:	e008      	b.n	8005a2c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1a:	f7fd fb87 	bl	800312c <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e064      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a2c:	4b11      	ldr	r3, [pc, #68]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f0      	beq.n	8005a1a <HAL_RCC_OscConfig+0x452>
 8005a38:	e05c      	b.n	8005af4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3a:	4b10      	ldr	r3, [pc, #64]	@ (8005a7c <HAL_RCC_OscConfig+0x4b4>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fd fb74 	bl	800312c <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a48:	f7fd fb70 	bl	800312c <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e04d      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5a:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <HAL_RCC_OscConfig+0x4ac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0x480>
 8005a66:	e045      	b.n	8005af4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d107      	bne.n	8005a80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e040      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
 8005a74:	40023800 	.word	0x40023800
 8005a78:	40007000 	.word	0x40007000
 8005a7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a80:	4b1f      	ldr	r3, [pc, #124]	@ (8005b00 <HAL_RCC_OscConfig+0x538>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d030      	beq.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d129      	bne.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d122      	bne.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ab6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d119      	bne.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac6:	085b      	lsrs	r3, r3, #1
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d10f      	bne.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ada:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d107      	bne.n	8005af0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d001      	beq.n	8005af4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40023800 	.word	0x40023800

08005b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e041      	b.n	8005b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fd f806 	bl	8002b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4619      	mov	r1, r3
 8005b42:	4610      	mov	r0, r2
 8005b44:	f000 fb9a 	bl	800627c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d001      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e04e      	b.n	8005c5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a23      	ldr	r2, [pc, #140]	@ (8005c68 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d022      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be6:	d01d      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a1f      	ldr	r2, [pc, #124]	@ (8005c6c <HAL_TIM_Base_Start_IT+0xc8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d018      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c70 <HAL_TIM_Base_Start_IT+0xcc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d013      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a1c      	ldr	r2, [pc, #112]	@ (8005c74 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00e      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8005c78 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d009      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a19      	ldr	r2, [pc, #100]	@ (8005c7c <HAL_TIM_Base_Start_IT+0xd8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d004      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a18      	ldr	r2, [pc, #96]	@ (8005c80 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d111      	bne.n	8005c48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b06      	cmp	r3, #6
 8005c34:	d010      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0201 	orr.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c46:	e007      	b.n	8005c58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40010000 	.word	0x40010000
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800
 8005c74:	40000c00 	.word	0x40000c00
 8005c78:	40010400 	.word	0x40010400
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40001800 	.word	0x40001800

08005c84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e041      	b.n	8005d1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f839 	bl	8005d22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f000 fada 	bl	800627c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d020      	beq.n	8005d9a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01b      	beq.n	8005d9a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f06f 0202 	mvn.w	r2, #2
 8005d6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fa5c 	bl	800623e <HAL_TIM_IC_CaptureCallback>
 8005d86:	e005      	b.n	8005d94 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fa4e 	bl	800622a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa5f 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d020      	beq.n	8005de6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01b      	beq.n	8005de6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f06f 0204 	mvn.w	r2, #4
 8005db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fa36 	bl	800623e <HAL_TIM_IC_CaptureCallback>
 8005dd2:	e005      	b.n	8005de0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fa28 	bl	800622a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fa39 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d020      	beq.n	8005e32 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01b      	beq.n	8005e32 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f06f 0208 	mvn.w	r2, #8
 8005e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2204      	movs	r2, #4
 8005e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fa10 	bl	800623e <HAL_TIM_IC_CaptureCallback>
 8005e1e:	e005      	b.n	8005e2c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fa02 	bl	800622a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fa13 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d020      	beq.n	8005e7e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01b      	beq.n	8005e7e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f06f 0210 	mvn.w	r2, #16
 8005e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2208      	movs	r2, #8
 8005e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f9ea 	bl	800623e <HAL_TIM_IC_CaptureCallback>
 8005e6a:	e005      	b.n	8005e78 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f9dc 	bl	800622a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f9ed 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00c      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f06f 0201 	mvn.w	r2, #1
 8005e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7fb f8ef 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00c      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fd57 	bl	8006974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00c      	beq.n	8005eea <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f9be 	bl	8006266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00c      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f06f 0220 	mvn.w	r2, #32
 8005f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fd29 	bl	8006960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e0ae      	b.n	8006094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b0c      	cmp	r3, #12
 8005f42:	f200 809f 	bhi.w	8006084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f46:	a201      	add	r2, pc, #4	@ (adr r2, 8005f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f81 	.word	0x08005f81
 8005f50:	08006085 	.word	0x08006085
 8005f54:	08006085 	.word	0x08006085
 8005f58:	08006085 	.word	0x08006085
 8005f5c:	08005fc1 	.word	0x08005fc1
 8005f60:	08006085 	.word	0x08006085
 8005f64:	08006085 	.word	0x08006085
 8005f68:	08006085 	.word	0x08006085
 8005f6c:	08006003 	.word	0x08006003
 8005f70:	08006085 	.word	0x08006085
 8005f74:	08006085 	.word	0x08006085
 8005f78:	08006085 	.word	0x08006085
 8005f7c:	08006043 	.word	0x08006043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fa24 	bl	80063d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0208 	orr.w	r2, r2, #8
 8005f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0204 	bic.w	r2, r2, #4
 8005faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6999      	ldr	r1, [r3, #24]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	619a      	str	r2, [r3, #24]
      break;
 8005fbe:	e064      	b.n	800608a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fa74 	bl	80064b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6999      	ldr	r1, [r3, #24]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	021a      	lsls	r2, r3, #8
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	619a      	str	r2, [r3, #24]
      break;
 8006000:	e043      	b.n	800608a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fac9 	bl	80065a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 0208 	orr.w	r2, r2, #8
 800601c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0204 	bic.w	r2, r2, #4
 800602c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69d9      	ldr	r1, [r3, #28]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	61da      	str	r2, [r3, #28]
      break;
 8006040:	e023      	b.n	800608a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fb1d 	bl	8006688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800605c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800606c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69d9      	ldr	r1, [r3, #28]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	021a      	lsls	r2, r3, #8
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	61da      	str	r2, [r3, #28]
      break;
 8006082:	e002      	b.n	800608a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	75fb      	strb	r3, [r7, #23]
      break;
 8006088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006092:	7dfb      	ldrb	r3, [r7, #23]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_TIM_ConfigClockSource+0x1c>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e0b4      	b.n	8006222 <HAL_TIM_ConfigClockSource+0x186>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f0:	d03e      	beq.n	8006170 <HAL_TIM_ConfigClockSource+0xd4>
 80060f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f6:	f200 8087 	bhi.w	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060fe:	f000 8086 	beq.w	800620e <HAL_TIM_ConfigClockSource+0x172>
 8006102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006106:	d87f      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006108:	2b70      	cmp	r3, #112	@ 0x70
 800610a:	d01a      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0xa6>
 800610c:	2b70      	cmp	r3, #112	@ 0x70
 800610e:	d87b      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006110:	2b60      	cmp	r3, #96	@ 0x60
 8006112:	d050      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0x11a>
 8006114:	2b60      	cmp	r3, #96	@ 0x60
 8006116:	d877      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006118:	2b50      	cmp	r3, #80	@ 0x50
 800611a:	d03c      	beq.n	8006196 <HAL_TIM_ConfigClockSource+0xfa>
 800611c:	2b50      	cmp	r3, #80	@ 0x50
 800611e:	d873      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006120:	2b40      	cmp	r3, #64	@ 0x40
 8006122:	d058      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x13a>
 8006124:	2b40      	cmp	r3, #64	@ 0x40
 8006126:	d86f      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006128:	2b30      	cmp	r3, #48	@ 0x30
 800612a:	d064      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15a>
 800612c:	2b30      	cmp	r3, #48	@ 0x30
 800612e:	d86b      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006130:	2b20      	cmp	r3, #32
 8006132:	d060      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006134:	2b20      	cmp	r3, #32
 8006136:	d867      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d05c      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15a>
 800613c:	2b10      	cmp	r3, #16
 800613e:	d05a      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006140:	e062      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006152:	f000 fb69 	bl	8006828 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	609a      	str	r2, [r3, #8]
      break;
 800616e:	e04f      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006180:	f000 fb52 	bl	8006828 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006192:	609a      	str	r2, [r3, #8]
      break;
 8006194:	e03c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a2:	461a      	mov	r2, r3
 80061a4:	f000 fac6 	bl	8006734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2150      	movs	r1, #80	@ 0x50
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fb1f 	bl	80067f2 <TIM_ITRx_SetConfig>
      break;
 80061b4:	e02c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c2:	461a      	mov	r2, r3
 80061c4:	f000 fae5 	bl	8006792 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2160      	movs	r1, #96	@ 0x60
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fb0f 	bl	80067f2 <TIM_ITRx_SetConfig>
      break;
 80061d4:	e01c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e2:	461a      	mov	r2, r3
 80061e4:	f000 faa6 	bl	8006734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2140      	movs	r1, #64	@ 0x40
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 faff 	bl	80067f2 <TIM_ITRx_SetConfig>
      break;
 80061f4:	e00c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f000 faf6 	bl	80067f2 <TIM_ITRx_SetConfig>
      break;
 8006206:	e003      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	73fb      	strb	r3, [r7, #15]
      break;
 800620c:	e000      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800620e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a46      	ldr	r2, [pc, #280]	@ (80063a8 <TIM_Base_SetConfig+0x12c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d013      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629a:	d00f      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a43      	ldr	r2, [pc, #268]	@ (80063ac <TIM_Base_SetConfig+0x130>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00b      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a42      	ldr	r2, [pc, #264]	@ (80063b0 <TIM_Base_SetConfig+0x134>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d007      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a41      	ldr	r2, [pc, #260]	@ (80063b4 <TIM_Base_SetConfig+0x138>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a40      	ldr	r2, [pc, #256]	@ (80063b8 <TIM_Base_SetConfig+0x13c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d108      	bne.n	80062ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a35      	ldr	r2, [pc, #212]	@ (80063a8 <TIM_Base_SetConfig+0x12c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d02b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062dc:	d027      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a32      	ldr	r2, [pc, #200]	@ (80063ac <TIM_Base_SetConfig+0x130>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d023      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a31      	ldr	r2, [pc, #196]	@ (80063b0 <TIM_Base_SetConfig+0x134>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01f      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a30      	ldr	r2, [pc, #192]	@ (80063b4 <TIM_Base_SetConfig+0x138>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2f      	ldr	r2, [pc, #188]	@ (80063b8 <TIM_Base_SetConfig+0x13c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d017      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a2e      	ldr	r2, [pc, #184]	@ (80063bc <TIM_Base_SetConfig+0x140>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a2d      	ldr	r2, [pc, #180]	@ (80063c0 <TIM_Base_SetConfig+0x144>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00f      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a2c      	ldr	r2, [pc, #176]	@ (80063c4 <TIM_Base_SetConfig+0x148>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a2b      	ldr	r2, [pc, #172]	@ (80063c8 <TIM_Base_SetConfig+0x14c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a2a      	ldr	r2, [pc, #168]	@ (80063cc <TIM_Base_SetConfig+0x150>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a29      	ldr	r2, [pc, #164]	@ (80063d0 <TIM_Base_SetConfig+0x154>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d108      	bne.n	8006340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a10      	ldr	r2, [pc, #64]	@ (80063a8 <TIM_Base_SetConfig+0x12c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_Base_SetConfig+0xf8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a12      	ldr	r2, [pc, #72]	@ (80063b8 <TIM_Base_SetConfig+0x13c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d103      	bne.n	800637c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b01      	cmp	r3, #1
 800638c:	d105      	bne.n	800639a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f023 0201 	bic.w	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	611a      	str	r2, [r3, #16]
  }
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40010000 	.word	0x40010000
 80063ac:	40000400 	.word	0x40000400
 80063b0:	40000800 	.word	0x40000800
 80063b4:	40000c00 	.word	0x40000c00
 80063b8:	40010400 	.word	0x40010400
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40014400 	.word	0x40014400
 80063c4:	40014800 	.word	0x40014800
 80063c8:	40001800 	.word	0x40001800
 80063cc:	40001c00 	.word	0x40001c00
 80063d0:	40002000 	.word	0x40002000

080063d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f023 0201 	bic.w	r2, r3, #1
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0303 	bic.w	r3, r3, #3
 800640a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f023 0302 	bic.w	r3, r3, #2
 800641c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a20      	ldr	r2, [pc, #128]	@ (80064ac <TIM_OC1_SetConfig+0xd8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_OC1_SetConfig+0x64>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a1f      	ldr	r2, [pc, #124]	@ (80064b0 <TIM_OC1_SetConfig+0xdc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d10c      	bne.n	8006452 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f023 0308 	bic.w	r3, r3, #8
 800643e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f023 0304 	bic.w	r3, r3, #4
 8006450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a15      	ldr	r2, [pc, #84]	@ (80064ac <TIM_OC1_SetConfig+0xd8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d003      	beq.n	8006462 <TIM_OC1_SetConfig+0x8e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a14      	ldr	r2, [pc, #80]	@ (80064b0 <TIM_OC1_SetConfig+0xdc>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d111      	bne.n	8006486 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	621a      	str	r2, [r3, #32]
}
 80064a0:	bf00      	nop
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	40010000 	.word	0x40010000
 80064b0:	40010400 	.word	0x40010400

080064b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	f023 0210 	bic.w	r2, r3, #16
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f023 0320 	bic.w	r3, r3, #32
 80064fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a22      	ldr	r2, [pc, #136]	@ (8006598 <TIM_OC2_SetConfig+0xe4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC2_SetConfig+0x68>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a21      	ldr	r2, [pc, #132]	@ (800659c <TIM_OC2_SetConfig+0xe8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d10d      	bne.n	8006538 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006536:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a17      	ldr	r2, [pc, #92]	@ (8006598 <TIM_OC2_SetConfig+0xe4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_OC2_SetConfig+0x94>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a16      	ldr	r2, [pc, #88]	@ (800659c <TIM_OC2_SetConfig+0xe8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d113      	bne.n	8006570 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800654e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	621a      	str	r2, [r3, #32]
}
 800658a:	bf00      	nop
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	40010400 	.word	0x40010400

080065a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a21      	ldr	r2, [pc, #132]	@ (8006680 <TIM_OC3_SetConfig+0xe0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_OC3_SetConfig+0x66>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a20      	ldr	r2, [pc, #128]	@ (8006684 <TIM_OC3_SetConfig+0xe4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d10d      	bne.n	8006622 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800660c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a16      	ldr	r2, [pc, #88]	@ (8006680 <TIM_OC3_SetConfig+0xe0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d003      	beq.n	8006632 <TIM_OC3_SetConfig+0x92>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a15      	ldr	r2, [pc, #84]	@ (8006684 <TIM_OC3_SetConfig+0xe4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d113      	bne.n	800665a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	621a      	str	r2, [r3, #32]
}
 8006674:	bf00      	nop
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	40010000 	.word	0x40010000
 8006684:	40010400 	.word	0x40010400

08006688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	031b      	lsls	r3, r3, #12
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a12      	ldr	r2, [pc, #72]	@ (800672c <TIM_OC4_SetConfig+0xa4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_OC4_SetConfig+0x68>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a11      	ldr	r2, [pc, #68]	@ (8006730 <TIM_OC4_SetConfig+0xa8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d109      	bne.n	8006704 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	019b      	lsls	r3, r3, #6
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40010000 	.word	0x40010000
 8006730:	40010400 	.word	0x40010400

08006734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	f023 0201 	bic.w	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800675e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f023 030a 	bic.w	r3, r3, #10
 8006770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	621a      	str	r2, [r3, #32]
}
 8006786:	bf00      	nop
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006792:	b480      	push	{r7}
 8006794:	b087      	sub	sp, #28
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f023 0210 	bic.w	r2, r3, #16
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	031b      	lsls	r3, r3, #12
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	621a      	str	r2, [r3, #32]
}
 80067e6:	bf00      	nop
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	f043 0307 	orr.w	r3, r3, #7
 8006814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	609a      	str	r2, [r3, #8]
}
 800681c:	bf00      	nop
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	021a      	lsls	r2, r3, #8
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	431a      	orrs	r2, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4313      	orrs	r3, r2
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	609a      	str	r2, [r3, #8]
}
 800685c:	bf00      	nop
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800687c:	2302      	movs	r3, #2
 800687e:	e05a      	b.n	8006936 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a21      	ldr	r2, [pc, #132]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d022      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068cc:	d01d      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d018      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1b      	ldr	r2, [pc, #108]	@ (800694c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006950 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00e      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a18      	ldr	r2, [pc, #96]	@ (8006954 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d009      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a17      	ldr	r2, [pc, #92]	@ (8006958 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d004      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a15      	ldr	r2, [pc, #84]	@ (800695c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d10c      	bne.n	8006924 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	4313      	orrs	r3, r2
 800691a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40010400 	.word	0x40010400
 8006958:	40014000 	.word	0x40014000
 800695c:	40001800 	.word	0x40001800

08006960 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e042      	b.n	8006a20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fc f93a 	bl	8002c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2224      	movs	r2, #36	@ 0x24
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fc19 	bl	8007204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	@ 0x28
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	4613      	mov	r3, r2
 8006a36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d175      	bne.n	8006b34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_UART_Transmit+0x2c>
 8006a4e:	88fb      	ldrh	r3, [r7, #6]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e06e      	b.n	8006b36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2221      	movs	r2, #33	@ 0x21
 8006a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a66:	f7fc fb61 	bl	800312c <HAL_GetTick>
 8006a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	88fa      	ldrh	r2, [r7, #6]
 8006a70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a80:	d108      	bne.n	8006a94 <HAL_UART_Transmit+0x6c>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d104      	bne.n	8006a94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	e003      	b.n	8006a9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a9c:	e02e      	b.n	8006afc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2180      	movs	r1, #128	@ 0x80
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fa2c 	bl	8006f06 <UART_WaitOnFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e03a      	b.n	8006b36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10b      	bne.n	8006ade <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ad4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	3302      	adds	r3, #2
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	e007      	b.n	8006aee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	3301      	adds	r3, #1
 8006aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1cb      	bne.n	8006a9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2140      	movs	r1, #64	@ 0x40
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f9f8 	bl	8006f06 <UART_WaitOnFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e006      	b.n	8006b36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	e000      	b.n	8006b36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006b34:	2302      	movs	r3, #2
  }
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b08a      	sub	sp, #40	@ 0x28
 8006b42:	af02      	add	r7, sp, #8
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	f040 8081 	bne.w	8006c62 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <HAL_UART_Receive+0x2e>
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e079      	b.n	8006c64 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2222      	movs	r2, #34	@ 0x22
 8006b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b84:	f7fc fad2 	bl	800312c <HAL_GetTick>
 8006b88:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	88fa      	ldrh	r2, [r7, #6]
 8006b8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	88fa      	ldrh	r2, [r7, #6]
 8006b94:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b9e:	d108      	bne.n	8006bb2 <HAL_UART_Receive+0x74>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	e003      	b.n	8006bba <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006bba:	e047      	b.n	8006c4c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2120      	movs	r1, #32
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f99d 	bl	8006f06 <UART_WaitOnFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e042      	b.n	8006c64 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10c      	bne.n	8006bfe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	61bb      	str	r3, [r7, #24]
 8006bfc:	e01f      	b.n	8006c3e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c06:	d007      	beq.n	8006c18 <HAL_UART_Receive+0xda>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <HAL_UART_Receive+0xe8>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d106      	bne.n	8006c26 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	e008      	b.n	8006c38 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1b2      	bne.n	8006bbc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e000      	b.n	8006c64 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006c62:	2302      	movs	r3, #2
  }
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d112      	bne.n	8006cac <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_UART_Receive_DMA+0x26>
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e00b      	b.n	8006cae <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c9c:	88fb      	ldrh	r3, [r7, #6]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	68b9      	ldr	r1, [r7, #8]
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f988 	bl	8006fb8 <UART_Start_Receive_DMA>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	e000      	b.n	8006cae <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006cac:	2302      	movs	r3, #2
  }
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b09c      	sub	sp, #112	@ 0x70
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d16:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d172      	bne.n	8006e0c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d28:	2200      	movs	r2, #0
 8006d2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	330c      	adds	r3, #12
 8006d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	330c      	adds	r3, #12
 8006d4a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006d4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e5      	bne.n	8006d2c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3314      	adds	r3, #20
 8006d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3314      	adds	r3, #20
 8006d7e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d80:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d82:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e5      	bne.n	8006d60 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3314      	adds	r3, #20
 8006d9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	623b      	str	r3, [r7, #32]
   return(result);
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006daa:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3314      	adds	r3, #20
 8006db2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006db4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e5      	bne.n	8006d94 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d119      	bne.n	8006e0c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	330c      	adds	r3, #12
 8006dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0310 	bic.w	r3, r3, #16
 8006dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006df0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	330c      	adds	r3, #12
 8006df6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006df8:	61fa      	str	r2, [r7, #28]
 8006dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	69b9      	ldr	r1, [r7, #24]
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	617b      	str	r3, [r7, #20]
   return(result);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e5      	bne.n	8006dd8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e0e:	2200      	movs	r2, #0
 8006e10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d106      	bne.n	8006e28 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e22:	f7ff ff66 	bl	8006cf2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e26:	e002      	b.n	8006e2e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006e28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e2a:	f7ff ff44 	bl	8006cb6 <HAL_UART_RxCpltCallback>
}
 8006e2e:	bf00      	nop
 8006e30:	3770      	adds	r7, #112	@ 0x70
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d108      	bne.n	8006e64 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e56:	085b      	lsrs	r3, r3, #1
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff ff48 	bl	8006cf2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e62:	e002      	b.n	8006e6a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f7ff ff30 	bl	8006cca <HAL_UART_RxHalfCpltCallback>
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e8e:	2b80      	cmp	r3, #128	@ 0x80
 8006e90:	bf0c      	ite	eq
 8006e92:	2301      	moveq	r3, #1
 8006e94:	2300      	movne	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b21      	cmp	r3, #33	@ 0x21
 8006ea4:	d108      	bne.n	8006eb8 <UART_DMAError+0x46>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006eb2:	68b8      	ldr	r0, [r7, #8]
 8006eb4:	f000 f91a 	bl	80070ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec2:	2b40      	cmp	r3, #64	@ 0x40
 8006ec4:	bf0c      	ite	eq
 8006ec6:	2301      	moveq	r3, #1
 8006ec8:	2300      	movne	r3, #0
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b22      	cmp	r3, #34	@ 0x22
 8006ed8:	d108      	bne.n	8006eec <UART_DMAError+0x7a>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006ee6:	68b8      	ldr	r0, [r7, #8]
 8006ee8:	f000 f928 	bl	800713c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef0:	f043 0210 	orr.w	r2, r3, #16
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ef8:	68b8      	ldr	r0, [r7, #8]
 8006efa:	f7ff fef0 	bl	8006cde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b086      	sub	sp, #24
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	4613      	mov	r3, r2
 8006f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f16:	e03b      	b.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d037      	beq.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f20:	f7fc f904 	bl	800312c <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	6a3a      	ldr	r2, [r7, #32]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d302      	bcc.n	8006f36 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e03a      	b.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d023      	beq.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b80      	cmp	r3, #128	@ 0x80
 8006f4c:	d020      	beq.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b40      	cmp	r3, #64	@ 0x40
 8006f52:	d01d      	beq.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	d116      	bne.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 f8df 	bl	800713c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2208      	movs	r2, #8
 8006f82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e00f      	b.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	bf0c      	ite	eq
 8006fa0:	2301      	moveq	r3, #1
 8006fa2:	2300      	movne	r3, #0
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d0b4      	beq.n	8006f18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b098      	sub	sp, #96	@ 0x60
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	88fa      	ldrh	r2, [r7, #6]
 8006fd0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2222      	movs	r2, #34	@ 0x22
 8006fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe4:	4a3e      	ldr	r2, [pc, #248]	@ (80070e0 <UART_Start_Receive_DMA+0x128>)
 8006fe6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fec:	4a3d      	ldr	r2, [pc, #244]	@ (80070e4 <UART_Start_Receive_DMA+0x12c>)
 8006fee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff4:	4a3c      	ldr	r2, [pc, #240]	@ (80070e8 <UART_Start_Receive_DMA+0x130>)
 8006ff6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007000:	f107 0308 	add.w	r3, r7, #8
 8007004:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3304      	adds	r3, #4
 8007010:	4619      	mov	r1, r3
 8007012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	f7fc fa78 	bl	800350c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800701c:	2300      	movs	r3, #0
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	613b      	str	r3, [r7, #16]
 8007030:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d019      	beq.n	800706e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	330c      	adds	r3, #12
 8007040:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800704a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800704c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007050:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800705a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800705c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007060:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e5      	bne.n	800703a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3314      	adds	r3, #20
 8007074:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800707e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	657b      	str	r3, [r7, #84]	@ 0x54
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3314      	adds	r3, #20
 800708c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800708e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007090:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007094:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3314      	adds	r3, #20
 80070a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	e853 3f00 	ldrex	r3, [r3]
 80070b0:	617b      	str	r3, [r7, #20]
   return(result);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3314      	adds	r3, #20
 80070c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80070c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80070c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	6a39      	ldr	r1, [r7, #32]
 80070c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e5      	bne.n	80070a2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3760      	adds	r7, #96	@ 0x60
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	08006d0b 	.word	0x08006d0b
 80070e4:	08006e37 	.word	0x08006e37
 80070e8:	08006e73 	.word	0x08006e73

080070ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b089      	sub	sp, #36	@ 0x24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	330c      	adds	r3, #12
 80070fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	60bb      	str	r3, [r7, #8]
   return(result);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	330c      	adds	r3, #12
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	61ba      	str	r2, [r7, #24]
 8007116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	6979      	ldr	r1, [r7, #20]
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	613b      	str	r3, [r7, #16]
   return(result);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e5      	bne.n	80070f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007130:	bf00      	nop
 8007132:	3724      	adds	r7, #36	@ 0x24
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800713c:	b480      	push	{r7}
 800713e:	b095      	sub	sp, #84	@ 0x54
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	330c      	adds	r3, #12
 800714a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800715a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	330c      	adds	r3, #12
 8007162:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007164:	643a      	str	r2, [r7, #64]	@ 0x40
 8007166:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800716a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e5      	bne.n	8007144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3314      	adds	r3, #20
 800717e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	61fb      	str	r3, [r7, #28]
   return(result);
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f023 0301 	bic.w	r3, r3, #1
 800718e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3314      	adds	r3, #20
 8007196:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007198:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800719a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800719e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d119      	bne.n	80071e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	e853 3f00 	ldrex	r3, [r3]
 80071c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f023 0310 	bic.w	r3, r3, #16
 80071ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	330c      	adds	r3, #12
 80071d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071d4:	61ba      	str	r2, [r7, #24]
 80071d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	6979      	ldr	r1, [r7, #20]
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	613b      	str	r3, [r7, #16]
   return(result);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e5      	bne.n	80071b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80071f6:	bf00      	nop
 80071f8:	3754      	adds	r7, #84	@ 0x54
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
	...

08007204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007208:	b0c0      	sub	sp, #256	@ 0x100
 800720a:	af00      	add	r7, sp, #0
 800720c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007220:	68d9      	ldr	r1, [r3, #12]
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	ea40 0301 	orr.w	r3, r0, r1
 800722c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800722e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	431a      	orrs	r2, r3
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	431a      	orrs	r2, r3
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	4313      	orrs	r3, r2
 800724c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800725c:	f021 010c 	bic.w	r1, r1, #12
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800726a:	430b      	orrs	r3, r1
 800726c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727e:	6999      	ldr	r1, [r3, #24]
 8007280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	ea40 0301 	orr.w	r3, r0, r1
 800728a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b8f      	ldr	r3, [pc, #572]	@ (80074d0 <UART_SetConfig+0x2cc>)
 8007294:	429a      	cmp	r2, r3
 8007296:	d005      	beq.n	80072a4 <UART_SetConfig+0xa0>
 8007298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4b8d      	ldr	r3, [pc, #564]	@ (80074d4 <UART_SetConfig+0x2d0>)
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d104      	bne.n	80072ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072a4:	f7fd ff4e 	bl	8005144 <HAL_RCC_GetPCLK2Freq>
 80072a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072ac:	e003      	b.n	80072b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072ae:	f7fd ff35 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 80072b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072c0:	f040 810c 	bne.w	80074dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072d6:	4622      	mov	r2, r4
 80072d8:	462b      	mov	r3, r5
 80072da:	1891      	adds	r1, r2, r2
 80072dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072de:	415b      	adcs	r3, r3
 80072e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072e6:	4621      	mov	r1, r4
 80072e8:	eb12 0801 	adds.w	r8, r2, r1
 80072ec:	4629      	mov	r1, r5
 80072ee:	eb43 0901 	adc.w	r9, r3, r1
 80072f2:	f04f 0200 	mov.w	r2, #0
 80072f6:	f04f 0300 	mov.w	r3, #0
 80072fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007306:	4690      	mov	r8, r2
 8007308:	4699      	mov	r9, r3
 800730a:	4623      	mov	r3, r4
 800730c:	eb18 0303 	adds.w	r3, r8, r3
 8007310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007314:	462b      	mov	r3, r5
 8007316:	eb49 0303 	adc.w	r3, r9, r3
 800731a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800731e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800732a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800732e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007332:	460b      	mov	r3, r1
 8007334:	18db      	adds	r3, r3, r3
 8007336:	653b      	str	r3, [r7, #80]	@ 0x50
 8007338:	4613      	mov	r3, r2
 800733a:	eb42 0303 	adc.w	r3, r2, r3
 800733e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007344:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007348:	f7f9 fc2c 	bl	8000ba4 <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4b61      	ldr	r3, [pc, #388]	@ (80074d8 <UART_SetConfig+0x2d4>)
 8007352:	fba3 2302 	umull	r2, r3, r3, r2
 8007356:	095b      	lsrs	r3, r3, #5
 8007358:	011c      	lsls	r4, r3, #4
 800735a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800735e:	2200      	movs	r2, #0
 8007360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007364:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007368:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800736c:	4642      	mov	r2, r8
 800736e:	464b      	mov	r3, r9
 8007370:	1891      	adds	r1, r2, r2
 8007372:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007374:	415b      	adcs	r3, r3
 8007376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007378:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800737c:	4641      	mov	r1, r8
 800737e:	eb12 0a01 	adds.w	sl, r2, r1
 8007382:	4649      	mov	r1, r9
 8007384:	eb43 0b01 	adc.w	fp, r3, r1
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800739c:	4692      	mov	sl, r2
 800739e:	469b      	mov	fp, r3
 80073a0:	4643      	mov	r3, r8
 80073a2:	eb1a 0303 	adds.w	r3, sl, r3
 80073a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073aa:	464b      	mov	r3, r9
 80073ac:	eb4b 0303 	adc.w	r3, fp, r3
 80073b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073c8:	460b      	mov	r3, r1
 80073ca:	18db      	adds	r3, r3, r3
 80073cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80073ce:	4613      	mov	r3, r2
 80073d0:	eb42 0303 	adc.w	r3, r2, r3
 80073d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80073d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073de:	f7f9 fbe1 	bl	8000ba4 <__aeabi_uldivmod>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4611      	mov	r1, r2
 80073e8:	4b3b      	ldr	r3, [pc, #236]	@ (80074d8 <UART_SetConfig+0x2d4>)
 80073ea:	fba3 2301 	umull	r2, r3, r3, r1
 80073ee:	095b      	lsrs	r3, r3, #5
 80073f0:	2264      	movs	r2, #100	@ 0x64
 80073f2:	fb02 f303 	mul.w	r3, r2, r3
 80073f6:	1acb      	subs	r3, r1, r3
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073fe:	4b36      	ldr	r3, [pc, #216]	@ (80074d8 <UART_SetConfig+0x2d4>)
 8007400:	fba3 2302 	umull	r2, r3, r3, r2
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800740c:	441c      	add	r4, r3
 800740e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007412:	2200      	movs	r2, #0
 8007414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007418:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800741c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007420:	4642      	mov	r2, r8
 8007422:	464b      	mov	r3, r9
 8007424:	1891      	adds	r1, r2, r2
 8007426:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007428:	415b      	adcs	r3, r3
 800742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800742c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007430:	4641      	mov	r1, r8
 8007432:	1851      	adds	r1, r2, r1
 8007434:	6339      	str	r1, [r7, #48]	@ 0x30
 8007436:	4649      	mov	r1, r9
 8007438:	414b      	adcs	r3, r1
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007448:	4659      	mov	r1, fp
 800744a:	00cb      	lsls	r3, r1, #3
 800744c:	4651      	mov	r1, sl
 800744e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007452:	4651      	mov	r1, sl
 8007454:	00ca      	lsls	r2, r1, #3
 8007456:	4610      	mov	r0, r2
 8007458:	4619      	mov	r1, r3
 800745a:	4603      	mov	r3, r0
 800745c:	4642      	mov	r2, r8
 800745e:	189b      	adds	r3, r3, r2
 8007460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007464:	464b      	mov	r3, r9
 8007466:	460a      	mov	r2, r1
 8007468:	eb42 0303 	adc.w	r3, r2, r3
 800746c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800747c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007484:	460b      	mov	r3, r1
 8007486:	18db      	adds	r3, r3, r3
 8007488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800748a:	4613      	mov	r3, r2
 800748c:	eb42 0303 	adc.w	r3, r2, r3
 8007490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800749a:	f7f9 fb83 	bl	8000ba4 <__aeabi_uldivmod>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4b0d      	ldr	r3, [pc, #52]	@ (80074d8 <UART_SetConfig+0x2d4>)
 80074a4:	fba3 1302 	umull	r1, r3, r3, r2
 80074a8:	095b      	lsrs	r3, r3, #5
 80074aa:	2164      	movs	r1, #100	@ 0x64
 80074ac:	fb01 f303 	mul.w	r3, r1, r3
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	3332      	adds	r3, #50	@ 0x32
 80074b6:	4a08      	ldr	r2, [pc, #32]	@ (80074d8 <UART_SetConfig+0x2d4>)
 80074b8:	fba2 2303 	umull	r2, r3, r2, r3
 80074bc:	095b      	lsrs	r3, r3, #5
 80074be:	f003 0207 	and.w	r2, r3, #7
 80074c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4422      	add	r2, r4
 80074ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074cc:	e106      	b.n	80076dc <UART_SetConfig+0x4d8>
 80074ce:	bf00      	nop
 80074d0:	40011000 	.word	0x40011000
 80074d4:	40011400 	.word	0x40011400
 80074d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074ee:	4642      	mov	r2, r8
 80074f0:	464b      	mov	r3, r9
 80074f2:	1891      	adds	r1, r2, r2
 80074f4:	6239      	str	r1, [r7, #32]
 80074f6:	415b      	adcs	r3, r3
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80074fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074fe:	4641      	mov	r1, r8
 8007500:	1854      	adds	r4, r2, r1
 8007502:	4649      	mov	r1, r9
 8007504:	eb43 0501 	adc.w	r5, r3, r1
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	00eb      	lsls	r3, r5, #3
 8007512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007516:	00e2      	lsls	r2, r4, #3
 8007518:	4614      	mov	r4, r2
 800751a:	461d      	mov	r5, r3
 800751c:	4643      	mov	r3, r8
 800751e:	18e3      	adds	r3, r4, r3
 8007520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007524:	464b      	mov	r3, r9
 8007526:	eb45 0303 	adc.w	r3, r5, r3
 800752a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800752e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800753a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	f04f 0300 	mov.w	r3, #0
 8007546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800754a:	4629      	mov	r1, r5
 800754c:	008b      	lsls	r3, r1, #2
 800754e:	4621      	mov	r1, r4
 8007550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007554:	4621      	mov	r1, r4
 8007556:	008a      	lsls	r2, r1, #2
 8007558:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800755c:	f7f9 fb22 	bl	8000ba4 <__aeabi_uldivmod>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4b60      	ldr	r3, [pc, #384]	@ (80076e8 <UART_SetConfig+0x4e4>)
 8007566:	fba3 2302 	umull	r2, r3, r3, r2
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	011c      	lsls	r4, r3, #4
 800756e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007572:	2200      	movs	r2, #0
 8007574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007578:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800757c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007580:	4642      	mov	r2, r8
 8007582:	464b      	mov	r3, r9
 8007584:	1891      	adds	r1, r2, r2
 8007586:	61b9      	str	r1, [r7, #24]
 8007588:	415b      	adcs	r3, r3
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007590:	4641      	mov	r1, r8
 8007592:	1851      	adds	r1, r2, r1
 8007594:	6139      	str	r1, [r7, #16]
 8007596:	4649      	mov	r1, r9
 8007598:	414b      	adcs	r3, r1
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075a8:	4659      	mov	r1, fp
 80075aa:	00cb      	lsls	r3, r1, #3
 80075ac:	4651      	mov	r1, sl
 80075ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075b2:	4651      	mov	r1, sl
 80075b4:	00ca      	lsls	r2, r1, #3
 80075b6:	4610      	mov	r0, r2
 80075b8:	4619      	mov	r1, r3
 80075ba:	4603      	mov	r3, r0
 80075bc:	4642      	mov	r2, r8
 80075be:	189b      	adds	r3, r3, r2
 80075c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075c4:	464b      	mov	r3, r9
 80075c6:	460a      	mov	r2, r1
 80075c8:	eb42 0303 	adc.w	r3, r2, r3
 80075cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075e8:	4649      	mov	r1, r9
 80075ea:	008b      	lsls	r3, r1, #2
 80075ec:	4641      	mov	r1, r8
 80075ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075f2:	4641      	mov	r1, r8
 80075f4:	008a      	lsls	r2, r1, #2
 80075f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075fa:	f7f9 fad3 	bl	8000ba4 <__aeabi_uldivmod>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4611      	mov	r1, r2
 8007604:	4b38      	ldr	r3, [pc, #224]	@ (80076e8 <UART_SetConfig+0x4e4>)
 8007606:	fba3 2301 	umull	r2, r3, r3, r1
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	2264      	movs	r2, #100	@ 0x64
 800760e:	fb02 f303 	mul.w	r3, r2, r3
 8007612:	1acb      	subs	r3, r1, r3
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	3332      	adds	r3, #50	@ 0x32
 8007618:	4a33      	ldr	r2, [pc, #204]	@ (80076e8 <UART_SetConfig+0x4e4>)
 800761a:	fba2 2303 	umull	r2, r3, r2, r3
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007624:	441c      	add	r4, r3
 8007626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800762a:	2200      	movs	r2, #0
 800762c:	673b      	str	r3, [r7, #112]	@ 0x70
 800762e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007630:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007634:	4642      	mov	r2, r8
 8007636:	464b      	mov	r3, r9
 8007638:	1891      	adds	r1, r2, r2
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	415b      	adcs	r3, r3
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007644:	4641      	mov	r1, r8
 8007646:	1851      	adds	r1, r2, r1
 8007648:	6039      	str	r1, [r7, #0]
 800764a:	4649      	mov	r1, r9
 800764c:	414b      	adcs	r3, r1
 800764e:	607b      	str	r3, [r7, #4]
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800765c:	4659      	mov	r1, fp
 800765e:	00cb      	lsls	r3, r1, #3
 8007660:	4651      	mov	r1, sl
 8007662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007666:	4651      	mov	r1, sl
 8007668:	00ca      	lsls	r2, r1, #3
 800766a:	4610      	mov	r0, r2
 800766c:	4619      	mov	r1, r3
 800766e:	4603      	mov	r3, r0
 8007670:	4642      	mov	r2, r8
 8007672:	189b      	adds	r3, r3, r2
 8007674:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007676:	464b      	mov	r3, r9
 8007678:	460a      	mov	r2, r1
 800767a:	eb42 0303 	adc.w	r3, r2, r3
 800767e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	663b      	str	r3, [r7, #96]	@ 0x60
 800768a:	667a      	str	r2, [r7, #100]	@ 0x64
 800768c:	f04f 0200 	mov.w	r2, #0
 8007690:	f04f 0300 	mov.w	r3, #0
 8007694:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007698:	4649      	mov	r1, r9
 800769a:	008b      	lsls	r3, r1, #2
 800769c:	4641      	mov	r1, r8
 800769e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076a2:	4641      	mov	r1, r8
 80076a4:	008a      	lsls	r2, r1, #2
 80076a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076aa:	f7f9 fa7b 	bl	8000ba4 <__aeabi_uldivmod>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4b0d      	ldr	r3, [pc, #52]	@ (80076e8 <UART_SetConfig+0x4e4>)
 80076b4:	fba3 1302 	umull	r1, r3, r3, r2
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	2164      	movs	r1, #100	@ 0x64
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	3332      	adds	r3, #50	@ 0x32
 80076c6:	4a08      	ldr	r2, [pc, #32]	@ (80076e8 <UART_SetConfig+0x4e4>)
 80076c8:	fba2 2303 	umull	r2, r3, r2, r3
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	f003 020f 	and.w	r2, r3, #15
 80076d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4422      	add	r2, r4
 80076da:	609a      	str	r2, [r3, #8]
}
 80076dc:	bf00      	nop
 80076de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076e2:	46bd      	mov	sp, r7
 80076e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076e8:	51eb851f 	.word	0x51eb851f
 80076ec:	00000000 	.word	0x00000000

080076f0 <sin>:
 80076f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076f2:	ec53 2b10 	vmov	r2, r3, d0
 80076f6:	4826      	ldr	r0, [pc, #152]	@ (8007790 <sin+0xa0>)
 80076f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80076fc:	4281      	cmp	r1, r0
 80076fe:	d807      	bhi.n	8007710 <sin+0x20>
 8007700:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007788 <sin+0x98>
 8007704:	2000      	movs	r0, #0
 8007706:	b005      	add	sp, #20
 8007708:	f85d eb04 	ldr.w	lr, [sp], #4
 800770c:	f000 b90c 	b.w	8007928 <__kernel_sin>
 8007710:	4820      	ldr	r0, [pc, #128]	@ (8007794 <sin+0xa4>)
 8007712:	4281      	cmp	r1, r0
 8007714:	d908      	bls.n	8007728 <sin+0x38>
 8007716:	4610      	mov	r0, r2
 8007718:	4619      	mov	r1, r3
 800771a:	f7f8 fd79 	bl	8000210 <__aeabi_dsub>
 800771e:	ec41 0b10 	vmov	d0, r0, r1
 8007722:	b005      	add	sp, #20
 8007724:	f85d fb04 	ldr.w	pc, [sp], #4
 8007728:	4668      	mov	r0, sp
 800772a:	f000 f9b9 	bl	8007aa0 <__ieee754_rem_pio2>
 800772e:	f000 0003 	and.w	r0, r0, #3
 8007732:	2801      	cmp	r0, #1
 8007734:	d00c      	beq.n	8007750 <sin+0x60>
 8007736:	2802      	cmp	r0, #2
 8007738:	d011      	beq.n	800775e <sin+0x6e>
 800773a:	b9e8      	cbnz	r0, 8007778 <sin+0x88>
 800773c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007740:	ed9d 0b00 	vldr	d0, [sp]
 8007744:	2001      	movs	r0, #1
 8007746:	f000 f8ef 	bl	8007928 <__kernel_sin>
 800774a:	ec51 0b10 	vmov	r0, r1, d0
 800774e:	e7e6      	b.n	800771e <sin+0x2e>
 8007750:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007754:	ed9d 0b00 	vldr	d0, [sp]
 8007758:	f000 f81e 	bl	8007798 <__kernel_cos>
 800775c:	e7f5      	b.n	800774a <sin+0x5a>
 800775e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007762:	ed9d 0b00 	vldr	d0, [sp]
 8007766:	2001      	movs	r0, #1
 8007768:	f000 f8de 	bl	8007928 <__kernel_sin>
 800776c:	ec53 2b10 	vmov	r2, r3, d0
 8007770:	4610      	mov	r0, r2
 8007772:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007776:	e7d2      	b.n	800771e <sin+0x2e>
 8007778:	ed9d 1b02 	vldr	d1, [sp, #8]
 800777c:	ed9d 0b00 	vldr	d0, [sp]
 8007780:	f000 f80a 	bl	8007798 <__kernel_cos>
 8007784:	e7f2      	b.n	800776c <sin+0x7c>
 8007786:	bf00      	nop
	...
 8007790:	3fe921fb 	.word	0x3fe921fb
 8007794:	7fefffff 	.word	0x7fefffff

08007798 <__kernel_cos>:
 8007798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	ec57 6b10 	vmov	r6, r7, d0
 80077a0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80077a4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80077a8:	ed8d 1b00 	vstr	d1, [sp]
 80077ac:	d206      	bcs.n	80077bc <__kernel_cos+0x24>
 80077ae:	4630      	mov	r0, r6
 80077b0:	4639      	mov	r1, r7
 80077b2:	f7f9 f97f 	bl	8000ab4 <__aeabi_d2iz>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f000 8088 	beq.w	80078cc <__kernel_cos+0x134>
 80077bc:	4632      	mov	r2, r6
 80077be:	463b      	mov	r3, r7
 80077c0:	4630      	mov	r0, r6
 80077c2:	4639      	mov	r1, r7
 80077c4:	f7f8 fedc 	bl	8000580 <__aeabi_dmul>
 80077c8:	4b51      	ldr	r3, [pc, #324]	@ (8007910 <__kernel_cos+0x178>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	4604      	mov	r4, r0
 80077ce:	460d      	mov	r5, r1
 80077d0:	f7f8 fed6 	bl	8000580 <__aeabi_dmul>
 80077d4:	a340      	add	r3, pc, #256	@ (adr r3, 80078d8 <__kernel_cos+0x140>)
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	4682      	mov	sl, r0
 80077dc:	468b      	mov	fp, r1
 80077de:	4620      	mov	r0, r4
 80077e0:	4629      	mov	r1, r5
 80077e2:	f7f8 fecd 	bl	8000580 <__aeabi_dmul>
 80077e6:	a33e      	add	r3, pc, #248	@ (adr r3, 80078e0 <__kernel_cos+0x148>)
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	f7f8 fd12 	bl	8000214 <__adddf3>
 80077f0:	4622      	mov	r2, r4
 80077f2:	462b      	mov	r3, r5
 80077f4:	f7f8 fec4 	bl	8000580 <__aeabi_dmul>
 80077f8:	a33b      	add	r3, pc, #236	@ (adr r3, 80078e8 <__kernel_cos+0x150>)
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	f7f8 fd07 	bl	8000210 <__aeabi_dsub>
 8007802:	4622      	mov	r2, r4
 8007804:	462b      	mov	r3, r5
 8007806:	f7f8 febb 	bl	8000580 <__aeabi_dmul>
 800780a:	a339      	add	r3, pc, #228	@ (adr r3, 80078f0 <__kernel_cos+0x158>)
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f7f8 fd00 	bl	8000214 <__adddf3>
 8007814:	4622      	mov	r2, r4
 8007816:	462b      	mov	r3, r5
 8007818:	f7f8 feb2 	bl	8000580 <__aeabi_dmul>
 800781c:	a336      	add	r3, pc, #216	@ (adr r3, 80078f8 <__kernel_cos+0x160>)
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	f7f8 fcf5 	bl	8000210 <__aeabi_dsub>
 8007826:	4622      	mov	r2, r4
 8007828:	462b      	mov	r3, r5
 800782a:	f7f8 fea9 	bl	8000580 <__aeabi_dmul>
 800782e:	a334      	add	r3, pc, #208	@ (adr r3, 8007900 <__kernel_cos+0x168>)
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f7f8 fcee 	bl	8000214 <__adddf3>
 8007838:	4622      	mov	r2, r4
 800783a:	462b      	mov	r3, r5
 800783c:	f7f8 fea0 	bl	8000580 <__aeabi_dmul>
 8007840:	4622      	mov	r2, r4
 8007842:	462b      	mov	r3, r5
 8007844:	f7f8 fe9c 	bl	8000580 <__aeabi_dmul>
 8007848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800784c:	4604      	mov	r4, r0
 800784e:	460d      	mov	r5, r1
 8007850:	4630      	mov	r0, r6
 8007852:	4639      	mov	r1, r7
 8007854:	f7f8 fe94 	bl	8000580 <__aeabi_dmul>
 8007858:	460b      	mov	r3, r1
 800785a:	4602      	mov	r2, r0
 800785c:	4629      	mov	r1, r5
 800785e:	4620      	mov	r0, r4
 8007860:	f7f8 fcd6 	bl	8000210 <__aeabi_dsub>
 8007864:	4b2b      	ldr	r3, [pc, #172]	@ (8007914 <__kernel_cos+0x17c>)
 8007866:	4598      	cmp	r8, r3
 8007868:	4606      	mov	r6, r0
 800786a:	460f      	mov	r7, r1
 800786c:	d810      	bhi.n	8007890 <__kernel_cos+0xf8>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4650      	mov	r0, sl
 8007874:	4659      	mov	r1, fp
 8007876:	f7f8 fccb 	bl	8000210 <__aeabi_dsub>
 800787a:	460b      	mov	r3, r1
 800787c:	4926      	ldr	r1, [pc, #152]	@ (8007918 <__kernel_cos+0x180>)
 800787e:	4602      	mov	r2, r0
 8007880:	2000      	movs	r0, #0
 8007882:	f7f8 fcc5 	bl	8000210 <__aeabi_dsub>
 8007886:	ec41 0b10 	vmov	d0, r0, r1
 800788a:	b003      	add	sp, #12
 800788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007890:	4b22      	ldr	r3, [pc, #136]	@ (800791c <__kernel_cos+0x184>)
 8007892:	4921      	ldr	r1, [pc, #132]	@ (8007918 <__kernel_cos+0x180>)
 8007894:	4598      	cmp	r8, r3
 8007896:	bf8c      	ite	hi
 8007898:	4d21      	ldrhi	r5, [pc, #132]	@ (8007920 <__kernel_cos+0x188>)
 800789a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800789e:	2400      	movs	r4, #0
 80078a0:	4622      	mov	r2, r4
 80078a2:	462b      	mov	r3, r5
 80078a4:	2000      	movs	r0, #0
 80078a6:	f7f8 fcb3 	bl	8000210 <__aeabi_dsub>
 80078aa:	4622      	mov	r2, r4
 80078ac:	4680      	mov	r8, r0
 80078ae:	4689      	mov	r9, r1
 80078b0:	462b      	mov	r3, r5
 80078b2:	4650      	mov	r0, sl
 80078b4:	4659      	mov	r1, fp
 80078b6:	f7f8 fcab 	bl	8000210 <__aeabi_dsub>
 80078ba:	4632      	mov	r2, r6
 80078bc:	463b      	mov	r3, r7
 80078be:	f7f8 fca7 	bl	8000210 <__aeabi_dsub>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4640      	mov	r0, r8
 80078c8:	4649      	mov	r1, r9
 80078ca:	e7da      	b.n	8007882 <__kernel_cos+0xea>
 80078cc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007908 <__kernel_cos+0x170>
 80078d0:	e7db      	b.n	800788a <__kernel_cos+0xf2>
 80078d2:	bf00      	nop
 80078d4:	f3af 8000 	nop.w
 80078d8:	be8838d4 	.word	0xbe8838d4
 80078dc:	bda8fae9 	.word	0xbda8fae9
 80078e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80078e4:	3e21ee9e 	.word	0x3e21ee9e
 80078e8:	809c52ad 	.word	0x809c52ad
 80078ec:	3e927e4f 	.word	0x3e927e4f
 80078f0:	19cb1590 	.word	0x19cb1590
 80078f4:	3efa01a0 	.word	0x3efa01a0
 80078f8:	16c15177 	.word	0x16c15177
 80078fc:	3f56c16c 	.word	0x3f56c16c
 8007900:	5555554c 	.word	0x5555554c
 8007904:	3fa55555 	.word	0x3fa55555
 8007908:	00000000 	.word	0x00000000
 800790c:	3ff00000 	.word	0x3ff00000
 8007910:	3fe00000 	.word	0x3fe00000
 8007914:	3fd33332 	.word	0x3fd33332
 8007918:	3ff00000 	.word	0x3ff00000
 800791c:	3fe90000 	.word	0x3fe90000
 8007920:	3fd20000 	.word	0x3fd20000
 8007924:	00000000 	.word	0x00000000

08007928 <__kernel_sin>:
 8007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	ec55 4b10 	vmov	r4, r5, d0
 8007930:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007934:	b085      	sub	sp, #20
 8007936:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800793a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800793e:	4680      	mov	r8, r0
 8007940:	d205      	bcs.n	800794e <__kernel_sin+0x26>
 8007942:	4620      	mov	r0, r4
 8007944:	4629      	mov	r1, r5
 8007946:	f7f9 f8b5 	bl	8000ab4 <__aeabi_d2iz>
 800794a:	2800      	cmp	r0, #0
 800794c:	d052      	beq.n	80079f4 <__kernel_sin+0xcc>
 800794e:	4622      	mov	r2, r4
 8007950:	462b      	mov	r3, r5
 8007952:	4620      	mov	r0, r4
 8007954:	4629      	mov	r1, r5
 8007956:	f7f8 fe13 	bl	8000580 <__aeabi_dmul>
 800795a:	4682      	mov	sl, r0
 800795c:	468b      	mov	fp, r1
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	4620      	mov	r0, r4
 8007964:	4629      	mov	r1, r5
 8007966:	f7f8 fe0b 	bl	8000580 <__aeabi_dmul>
 800796a:	a342      	add	r3, pc, #264	@ (adr r3, 8007a74 <__kernel_sin+0x14c>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	e9cd 0100 	strd	r0, r1, [sp]
 8007974:	4650      	mov	r0, sl
 8007976:	4659      	mov	r1, fp
 8007978:	f7f8 fe02 	bl	8000580 <__aeabi_dmul>
 800797c:	a33f      	add	r3, pc, #252	@ (adr r3, 8007a7c <__kernel_sin+0x154>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	f7f8 fc45 	bl	8000210 <__aeabi_dsub>
 8007986:	4652      	mov	r2, sl
 8007988:	465b      	mov	r3, fp
 800798a:	f7f8 fdf9 	bl	8000580 <__aeabi_dmul>
 800798e:	a33d      	add	r3, pc, #244	@ (adr r3, 8007a84 <__kernel_sin+0x15c>)
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	f7f8 fc3e 	bl	8000214 <__adddf3>
 8007998:	4652      	mov	r2, sl
 800799a:	465b      	mov	r3, fp
 800799c:	f7f8 fdf0 	bl	8000580 <__aeabi_dmul>
 80079a0:	a33a      	add	r3, pc, #232	@ (adr r3, 8007a8c <__kernel_sin+0x164>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f7f8 fc33 	bl	8000210 <__aeabi_dsub>
 80079aa:	4652      	mov	r2, sl
 80079ac:	465b      	mov	r3, fp
 80079ae:	f7f8 fde7 	bl	8000580 <__aeabi_dmul>
 80079b2:	a338      	add	r3, pc, #224	@ (adr r3, 8007a94 <__kernel_sin+0x16c>)
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	f7f8 fc2c 	bl	8000214 <__adddf3>
 80079bc:	4606      	mov	r6, r0
 80079be:	460f      	mov	r7, r1
 80079c0:	f1b8 0f00 	cmp.w	r8, #0
 80079c4:	d11b      	bne.n	80079fe <__kernel_sin+0xd6>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4650      	mov	r0, sl
 80079cc:	4659      	mov	r1, fp
 80079ce:	f7f8 fdd7 	bl	8000580 <__aeabi_dmul>
 80079d2:	a325      	add	r3, pc, #148	@ (adr r3, 8007a68 <__kernel_sin+0x140>)
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f7f8 fc1a 	bl	8000210 <__aeabi_dsub>
 80079dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079e0:	f7f8 fdce 	bl	8000580 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f8 fc12 	bl	8000214 <__adddf3>
 80079f0:	4604      	mov	r4, r0
 80079f2:	460d      	mov	r5, r1
 80079f4:	ec45 4b10 	vmov	d0, r4, r5
 80079f8:	b005      	add	sp, #20
 80079fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a02:	4b1b      	ldr	r3, [pc, #108]	@ (8007a70 <__kernel_sin+0x148>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	f7f8 fdbb 	bl	8000580 <__aeabi_dmul>
 8007a0a:	4632      	mov	r2, r6
 8007a0c:	4680      	mov	r8, r0
 8007a0e:	4689      	mov	r9, r1
 8007a10:	463b      	mov	r3, r7
 8007a12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a16:	f7f8 fdb3 	bl	8000580 <__aeabi_dmul>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4640      	mov	r0, r8
 8007a20:	4649      	mov	r1, r9
 8007a22:	f7f8 fbf5 	bl	8000210 <__aeabi_dsub>
 8007a26:	4652      	mov	r2, sl
 8007a28:	465b      	mov	r3, fp
 8007a2a:	f7f8 fda9 	bl	8000580 <__aeabi_dmul>
 8007a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a32:	f7f8 fbed 	bl	8000210 <__aeabi_dsub>
 8007a36:	a30c      	add	r3, pc, #48	@ (adr r3, 8007a68 <__kernel_sin+0x140>)
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460f      	mov	r7, r1
 8007a40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a44:	f7f8 fd9c 	bl	8000580 <__aeabi_dmul>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f7f8 fbe0 	bl	8000214 <__adddf3>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4620      	mov	r0, r4
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	f7f8 fbd8 	bl	8000210 <__aeabi_dsub>
 8007a60:	e7c6      	b.n	80079f0 <__kernel_sin+0xc8>
 8007a62:	bf00      	nop
 8007a64:	f3af 8000 	nop.w
 8007a68:	55555549 	.word	0x55555549
 8007a6c:	3fc55555 	.word	0x3fc55555
 8007a70:	3fe00000 	.word	0x3fe00000
 8007a74:	5acfd57c 	.word	0x5acfd57c
 8007a78:	3de5d93a 	.word	0x3de5d93a
 8007a7c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007a80:	3e5ae5e6 	.word	0x3e5ae5e6
 8007a84:	57b1fe7d 	.word	0x57b1fe7d
 8007a88:	3ec71de3 	.word	0x3ec71de3
 8007a8c:	19c161d5 	.word	0x19c161d5
 8007a90:	3f2a01a0 	.word	0x3f2a01a0
 8007a94:	1110f8a6 	.word	0x1110f8a6
 8007a98:	3f811111 	.word	0x3f811111
 8007a9c:	00000000 	.word	0x00000000

08007aa0 <__ieee754_rem_pio2>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	ec57 6b10 	vmov	r6, r7, d0
 8007aa8:	4bc5      	ldr	r3, [pc, #788]	@ (8007dc0 <__ieee754_rem_pio2+0x320>)
 8007aaa:	b08d      	sub	sp, #52	@ 0x34
 8007aac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007ab0:	4598      	cmp	r8, r3
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	9704      	str	r7, [sp, #16]
 8007ab6:	d807      	bhi.n	8007ac8 <__ieee754_rem_pio2+0x28>
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2300      	movs	r3, #0
 8007abc:	ed80 0b00 	vstr	d0, [r0]
 8007ac0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007ac4:	2500      	movs	r5, #0
 8007ac6:	e028      	b.n	8007b1a <__ieee754_rem_pio2+0x7a>
 8007ac8:	4bbe      	ldr	r3, [pc, #760]	@ (8007dc4 <__ieee754_rem_pio2+0x324>)
 8007aca:	4598      	cmp	r8, r3
 8007acc:	d878      	bhi.n	8007bc0 <__ieee754_rem_pio2+0x120>
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	4dbd      	ldr	r5, [pc, #756]	@ (8007dc8 <__ieee754_rem_pio2+0x328>)
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007d88 <__ieee754_rem_pio2+0x2e8>)
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	4639      	mov	r1, r7
 8007ade:	dd38      	ble.n	8007b52 <__ieee754_rem_pio2+0xb2>
 8007ae0:	f7f8 fb96 	bl	8000210 <__aeabi_dsub>
 8007ae4:	45a8      	cmp	r8, r5
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	460f      	mov	r7, r1
 8007aea:	d01a      	beq.n	8007b22 <__ieee754_rem_pio2+0x82>
 8007aec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007d90 <__ieee754_rem_pio2+0x2f0>)
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f7f8 fb8d 	bl	8000210 <__aeabi_dsub>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4680      	mov	r8, r0
 8007afc:	4689      	mov	r9, r1
 8007afe:	4630      	mov	r0, r6
 8007b00:	4639      	mov	r1, r7
 8007b02:	f7f8 fb85 	bl	8000210 <__aeabi_dsub>
 8007b06:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007d90 <__ieee754_rem_pio2+0x2f0>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 fb80 	bl	8000210 <__aeabi_dsub>
 8007b10:	e9c4 8900 	strd	r8, r9, [r4]
 8007b14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007b18:	2501      	movs	r5, #1
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	b00d      	add	sp, #52	@ 0x34
 8007b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b22:	a39d      	add	r3, pc, #628	@ (adr r3, 8007d98 <__ieee754_rem_pio2+0x2f8>)
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f7f8 fb72 	bl	8000210 <__aeabi_dsub>
 8007b2c:	a39c      	add	r3, pc, #624	@ (adr r3, 8007da0 <__ieee754_rem_pio2+0x300>)
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	4606      	mov	r6, r0
 8007b34:	460f      	mov	r7, r1
 8007b36:	f7f8 fb6b 	bl	8000210 <__aeabi_dsub>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4680      	mov	r8, r0
 8007b40:	4689      	mov	r9, r1
 8007b42:	4630      	mov	r0, r6
 8007b44:	4639      	mov	r1, r7
 8007b46:	f7f8 fb63 	bl	8000210 <__aeabi_dsub>
 8007b4a:	a395      	add	r3, pc, #596	@ (adr r3, 8007da0 <__ieee754_rem_pio2+0x300>)
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	e7dc      	b.n	8007b0c <__ieee754_rem_pio2+0x6c>
 8007b52:	f7f8 fb5f 	bl	8000214 <__adddf3>
 8007b56:	45a8      	cmp	r8, r5
 8007b58:	4606      	mov	r6, r0
 8007b5a:	460f      	mov	r7, r1
 8007b5c:	d018      	beq.n	8007b90 <__ieee754_rem_pio2+0xf0>
 8007b5e:	a38c      	add	r3, pc, #560	@ (adr r3, 8007d90 <__ieee754_rem_pio2+0x2f0>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fb56 	bl	8000214 <__adddf3>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4680      	mov	r8, r0
 8007b6e:	4689      	mov	r9, r1
 8007b70:	4630      	mov	r0, r6
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f8 fb4c 	bl	8000210 <__aeabi_dsub>
 8007b78:	a385      	add	r3, pc, #532	@ (adr r3, 8007d90 <__ieee754_rem_pio2+0x2f0>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	f7f8 fb49 	bl	8000214 <__adddf3>
 8007b82:	f04f 35ff 	mov.w	r5, #4294967295
 8007b86:	e9c4 8900 	strd	r8, r9, [r4]
 8007b8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007b8e:	e7c4      	b.n	8007b1a <__ieee754_rem_pio2+0x7a>
 8007b90:	a381      	add	r3, pc, #516	@ (adr r3, 8007d98 <__ieee754_rem_pio2+0x2f8>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fb3d 	bl	8000214 <__adddf3>
 8007b9a:	a381      	add	r3, pc, #516	@ (adr r3, 8007da0 <__ieee754_rem_pio2+0x300>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	460f      	mov	r7, r1
 8007ba4:	f7f8 fb36 	bl	8000214 <__adddf3>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4680      	mov	r8, r0
 8007bae:	4689      	mov	r9, r1
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	f7f8 fb2c 	bl	8000210 <__aeabi_dsub>
 8007bb8:	a379      	add	r3, pc, #484	@ (adr r3, 8007da0 <__ieee754_rem_pio2+0x300>)
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	e7de      	b.n	8007b7e <__ieee754_rem_pio2+0xde>
 8007bc0:	4b82      	ldr	r3, [pc, #520]	@ (8007dcc <__ieee754_rem_pio2+0x32c>)
 8007bc2:	4598      	cmp	r8, r3
 8007bc4:	f200 80d1 	bhi.w	8007d6a <__ieee754_rem_pio2+0x2ca>
 8007bc8:	f000 f966 	bl	8007e98 <fabs>
 8007bcc:	ec57 6b10 	vmov	r6, r7, d0
 8007bd0:	a375      	add	r3, pc, #468	@ (adr r3, 8007da8 <__ieee754_rem_pio2+0x308>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	4639      	mov	r1, r7
 8007bda:	f7f8 fcd1 	bl	8000580 <__aeabi_dmul>
 8007bde:	4b7c      	ldr	r3, [pc, #496]	@ (8007dd0 <__ieee754_rem_pio2+0x330>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	f7f8 fb17 	bl	8000214 <__adddf3>
 8007be6:	f7f8 ff65 	bl	8000ab4 <__aeabi_d2iz>
 8007bea:	4605      	mov	r5, r0
 8007bec:	f7f8 fc5e 	bl	80004ac <__aeabi_i2d>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bf8:	a363      	add	r3, pc, #396	@ (adr r3, 8007d88 <__ieee754_rem_pio2+0x2e8>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f7f8 fcbf 	bl	8000580 <__aeabi_dmul>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4630      	mov	r0, r6
 8007c08:	4639      	mov	r1, r7
 8007c0a:	f7f8 fb01 	bl	8000210 <__aeabi_dsub>
 8007c0e:	a360      	add	r3, pc, #384	@ (adr r3, 8007d90 <__ieee754_rem_pio2+0x2f0>)
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	4682      	mov	sl, r0
 8007c16:	468b      	mov	fp, r1
 8007c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c1c:	f7f8 fcb0 	bl	8000580 <__aeabi_dmul>
 8007c20:	2d1f      	cmp	r5, #31
 8007c22:	4606      	mov	r6, r0
 8007c24:	460f      	mov	r7, r1
 8007c26:	dc0c      	bgt.n	8007c42 <__ieee754_rem_pio2+0x1a2>
 8007c28:	4b6a      	ldr	r3, [pc, #424]	@ (8007dd4 <__ieee754_rem_pio2+0x334>)
 8007c2a:	1e6a      	subs	r2, r5, #1
 8007c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c30:	4543      	cmp	r3, r8
 8007c32:	d006      	beq.n	8007c42 <__ieee754_rem_pio2+0x1a2>
 8007c34:	4632      	mov	r2, r6
 8007c36:	463b      	mov	r3, r7
 8007c38:	4650      	mov	r0, sl
 8007c3a:	4659      	mov	r1, fp
 8007c3c:	f7f8 fae8 	bl	8000210 <__aeabi_dsub>
 8007c40:	e00e      	b.n	8007c60 <__ieee754_rem_pio2+0x1c0>
 8007c42:	463b      	mov	r3, r7
 8007c44:	4632      	mov	r2, r6
 8007c46:	4650      	mov	r0, sl
 8007c48:	4659      	mov	r1, fp
 8007c4a:	f7f8 fae1 	bl	8000210 <__aeabi_dsub>
 8007c4e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007c52:	9305      	str	r3, [sp, #20]
 8007c54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007c58:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007c5c:	2b10      	cmp	r3, #16
 8007c5e:	dc02      	bgt.n	8007c66 <__ieee754_rem_pio2+0x1c6>
 8007c60:	e9c4 0100 	strd	r0, r1, [r4]
 8007c64:	e039      	b.n	8007cda <__ieee754_rem_pio2+0x23a>
 8007c66:	a34c      	add	r3, pc, #304	@ (adr r3, 8007d98 <__ieee754_rem_pio2+0x2f8>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c70:	f7f8 fc86 	bl	8000580 <__aeabi_dmul>
 8007c74:	4606      	mov	r6, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4650      	mov	r0, sl
 8007c7e:	4659      	mov	r1, fp
 8007c80:	f7f8 fac6 	bl	8000210 <__aeabi_dsub>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4680      	mov	r8, r0
 8007c8a:	4689      	mov	r9, r1
 8007c8c:	4650      	mov	r0, sl
 8007c8e:	4659      	mov	r1, fp
 8007c90:	f7f8 fabe 	bl	8000210 <__aeabi_dsub>
 8007c94:	4632      	mov	r2, r6
 8007c96:	463b      	mov	r3, r7
 8007c98:	f7f8 faba 	bl	8000210 <__aeabi_dsub>
 8007c9c:	a340      	add	r3, pc, #256	@ (adr r3, 8007da0 <__ieee754_rem_pio2+0x300>)
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460f      	mov	r7, r1
 8007ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007caa:	f7f8 fc69 	bl	8000580 <__aeabi_dmul>
 8007cae:	4632      	mov	r2, r6
 8007cb0:	463b      	mov	r3, r7
 8007cb2:	f7f8 faad 	bl	8000210 <__aeabi_dsub>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4606      	mov	r6, r0
 8007cbc:	460f      	mov	r7, r1
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	f7f8 faa5 	bl	8000210 <__aeabi_dsub>
 8007cc6:	9a05      	ldr	r2, [sp, #20]
 8007cc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b31      	cmp	r3, #49	@ 0x31
 8007cd0:	dc20      	bgt.n	8007d14 <__ieee754_rem_pio2+0x274>
 8007cd2:	e9c4 0100 	strd	r0, r1, [r4]
 8007cd6:	46c2      	mov	sl, r8
 8007cd8:	46cb      	mov	fp, r9
 8007cda:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007cde:	4650      	mov	r0, sl
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	f7f8 fa93 	bl	8000210 <__aeabi_dsub>
 8007cea:	463b      	mov	r3, r7
 8007cec:	4632      	mov	r2, r6
 8007cee:	f7f8 fa8f 	bl	8000210 <__aeabi_dsub>
 8007cf2:	9b04      	ldr	r3, [sp, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007cfa:	f6bf af0e 	bge.w	8007b1a <__ieee754_rem_pio2+0x7a>
 8007cfe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007d02:	6063      	str	r3, [r4, #4]
 8007d04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d08:	f8c4 8000 	str.w	r8, [r4]
 8007d0c:	60a0      	str	r0, [r4, #8]
 8007d0e:	60e3      	str	r3, [r4, #12]
 8007d10:	426d      	negs	r5, r5
 8007d12:	e702      	b.n	8007b1a <__ieee754_rem_pio2+0x7a>
 8007d14:	a326      	add	r3, pc, #152	@ (adr r3, 8007db0 <__ieee754_rem_pio2+0x310>)
 8007d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d1e:	f7f8 fc2f 	bl	8000580 <__aeabi_dmul>
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	f7f8 fa6f 	bl	8000210 <__aeabi_dsub>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4682      	mov	sl, r0
 8007d38:	468b      	mov	fp, r1
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	f7f8 fa67 	bl	8000210 <__aeabi_dsub>
 8007d42:	4632      	mov	r2, r6
 8007d44:	463b      	mov	r3, r7
 8007d46:	f7f8 fa63 	bl	8000210 <__aeabi_dsub>
 8007d4a:	a31b      	add	r3, pc, #108	@ (adr r3, 8007db8 <__ieee754_rem_pio2+0x318>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	4606      	mov	r6, r0
 8007d52:	460f      	mov	r7, r1
 8007d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d58:	f7f8 fc12 	bl	8000580 <__aeabi_dmul>
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	463b      	mov	r3, r7
 8007d60:	f7f8 fa56 	bl	8000210 <__aeabi_dsub>
 8007d64:	4606      	mov	r6, r0
 8007d66:	460f      	mov	r7, r1
 8007d68:	e764      	b.n	8007c34 <__ieee754_rem_pio2+0x194>
 8007d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd8 <__ieee754_rem_pio2+0x338>)
 8007d6c:	4598      	cmp	r8, r3
 8007d6e:	d935      	bls.n	8007ddc <__ieee754_rem_pio2+0x33c>
 8007d70:	4632      	mov	r2, r6
 8007d72:	463b      	mov	r3, r7
 8007d74:	4630      	mov	r0, r6
 8007d76:	4639      	mov	r1, r7
 8007d78:	f7f8 fa4a 	bl	8000210 <__aeabi_dsub>
 8007d7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d80:	e9c4 0100 	strd	r0, r1, [r4]
 8007d84:	e69e      	b.n	8007ac4 <__ieee754_rem_pio2+0x24>
 8007d86:	bf00      	nop
 8007d88:	54400000 	.word	0x54400000
 8007d8c:	3ff921fb 	.word	0x3ff921fb
 8007d90:	1a626331 	.word	0x1a626331
 8007d94:	3dd0b461 	.word	0x3dd0b461
 8007d98:	1a600000 	.word	0x1a600000
 8007d9c:	3dd0b461 	.word	0x3dd0b461
 8007da0:	2e037073 	.word	0x2e037073
 8007da4:	3ba3198a 	.word	0x3ba3198a
 8007da8:	6dc9c883 	.word	0x6dc9c883
 8007dac:	3fe45f30 	.word	0x3fe45f30
 8007db0:	2e000000 	.word	0x2e000000
 8007db4:	3ba3198a 	.word	0x3ba3198a
 8007db8:	252049c1 	.word	0x252049c1
 8007dbc:	397b839a 	.word	0x397b839a
 8007dc0:	3fe921fb 	.word	0x3fe921fb
 8007dc4:	4002d97b 	.word	0x4002d97b
 8007dc8:	3ff921fb 	.word	0x3ff921fb
 8007dcc:	413921fb 	.word	0x413921fb
 8007dd0:	3fe00000 	.word	0x3fe00000
 8007dd4:	080087e8 	.word	0x080087e8
 8007dd8:	7fefffff 	.word	0x7fefffff
 8007ddc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007de0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007de4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007de8:	4630      	mov	r0, r6
 8007dea:	460f      	mov	r7, r1
 8007dec:	f7f8 fe62 	bl	8000ab4 <__aeabi_d2iz>
 8007df0:	f7f8 fb5c 	bl	80004ac <__aeabi_i2d>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4630      	mov	r0, r6
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e00:	f7f8 fa06 	bl	8000210 <__aeabi_dsub>
 8007e04:	4b22      	ldr	r3, [pc, #136]	@ (8007e90 <__ieee754_rem_pio2+0x3f0>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	f7f8 fbba 	bl	8000580 <__aeabi_dmul>
 8007e0c:	460f      	mov	r7, r1
 8007e0e:	4606      	mov	r6, r0
 8007e10:	f7f8 fe50 	bl	8000ab4 <__aeabi_d2iz>
 8007e14:	f7f8 fb4a 	bl	80004ac <__aeabi_i2d>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	4639      	mov	r1, r7
 8007e20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e24:	f7f8 f9f4 	bl	8000210 <__aeabi_dsub>
 8007e28:	4b19      	ldr	r3, [pc, #100]	@ (8007e90 <__ieee754_rem_pio2+0x3f0>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f7f8 fba8 	bl	8000580 <__aeabi_dmul>
 8007e30:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007e34:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007e38:	f04f 0803 	mov.w	r8, #3
 8007e3c:	2600      	movs	r6, #0
 8007e3e:	2700      	movs	r7, #0
 8007e40:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007e44:	4632      	mov	r2, r6
 8007e46:	463b      	mov	r3, r7
 8007e48:	46c2      	mov	sl, r8
 8007e4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e4e:	f7f8 fdff 	bl	8000a50 <__aeabi_dcmpeq>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d1f4      	bne.n	8007e40 <__ieee754_rem_pio2+0x3a0>
 8007e56:	4b0f      	ldr	r3, [pc, #60]	@ (8007e94 <__ieee754_rem_pio2+0x3f4>)
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	462a      	mov	r2, r5
 8007e60:	4653      	mov	r3, sl
 8007e62:	4621      	mov	r1, r4
 8007e64:	a806      	add	r0, sp, #24
 8007e66:	f000 f81f 	bl	8007ea8 <__kernel_rem_pio2>
 8007e6a:	9b04      	ldr	r3, [sp, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	4605      	mov	r5, r0
 8007e70:	f6bf ae53 	bge.w	8007b1a <__ieee754_rem_pio2+0x7a>
 8007e74:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007e78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e7c:	e9c4 2300 	strd	r2, r3, [r4]
 8007e80:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007e84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e88:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007e8c:	e740      	b.n	8007d10 <__ieee754_rem_pio2+0x270>
 8007e8e:	bf00      	nop
 8007e90:	41700000 	.word	0x41700000
 8007e94:	08008868 	.word	0x08008868

08007e98 <fabs>:
 8007e98:	ec51 0b10 	vmov	r0, r1, d0
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007ea2:	ec43 2b10 	vmov	d0, r2, r3
 8007ea6:	4770      	bx	lr

08007ea8 <__kernel_rem_pio2>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	ed2d 8b02 	vpush	{d8}
 8007eb0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007eb4:	f112 0f14 	cmn.w	r2, #20
 8007eb8:	9306      	str	r3, [sp, #24]
 8007eba:	9104      	str	r1, [sp, #16]
 8007ebc:	4bbe      	ldr	r3, [pc, #760]	@ (80081b8 <__kernel_rem_pio2+0x310>)
 8007ebe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007ec0:	9008      	str	r0, [sp, #32]
 8007ec2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	9b06      	ldr	r3, [sp, #24]
 8007eca:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ece:	bfa8      	it	ge
 8007ed0:	1ed4      	subge	r4, r2, #3
 8007ed2:	9305      	str	r3, [sp, #20]
 8007ed4:	bfb2      	itee	lt
 8007ed6:	2400      	movlt	r4, #0
 8007ed8:	2318      	movge	r3, #24
 8007eda:	fb94 f4f3 	sdivge	r4, r4, r3
 8007ede:	f06f 0317 	mvn.w	r3, #23
 8007ee2:	fb04 3303 	mla	r3, r4, r3, r3
 8007ee6:	eb03 0b02 	add.w	fp, r3, r2
 8007eea:	9b00      	ldr	r3, [sp, #0]
 8007eec:	9a05      	ldr	r2, [sp, #20]
 8007eee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80081a8 <__kernel_rem_pio2+0x300>
 8007ef2:	eb03 0802 	add.w	r8, r3, r2
 8007ef6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007ef8:	1aa7      	subs	r7, r4, r2
 8007efa:	ae20      	add	r6, sp, #128	@ 0x80
 8007efc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007f00:	2500      	movs	r5, #0
 8007f02:	4545      	cmp	r5, r8
 8007f04:	dd13      	ble.n	8007f2e <__kernel_rem_pio2+0x86>
 8007f06:	9b06      	ldr	r3, [sp, #24]
 8007f08:	aa20      	add	r2, sp, #128	@ 0x80
 8007f0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007f0e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007f12:	f04f 0800 	mov.w	r8, #0
 8007f16:	9b00      	ldr	r3, [sp, #0]
 8007f18:	4598      	cmp	r8, r3
 8007f1a:	dc31      	bgt.n	8007f80 <__kernel_rem_pio2+0xd8>
 8007f1c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80081a8 <__kernel_rem_pio2+0x300>
 8007f20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f28:	462f      	mov	r7, r5
 8007f2a:	2600      	movs	r6, #0
 8007f2c:	e01b      	b.n	8007f66 <__kernel_rem_pio2+0xbe>
 8007f2e:	42ef      	cmn	r7, r5
 8007f30:	d407      	bmi.n	8007f42 <__kernel_rem_pio2+0x9a>
 8007f32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007f36:	f7f8 fab9 	bl	80004ac <__aeabi_i2d>
 8007f3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007f3e:	3501      	adds	r5, #1
 8007f40:	e7df      	b.n	8007f02 <__kernel_rem_pio2+0x5a>
 8007f42:	ec51 0b18 	vmov	r0, r1, d8
 8007f46:	e7f8      	b.n	8007f3a <__kernel_rem_pio2+0x92>
 8007f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007f50:	f7f8 fb16 	bl	8000580 <__aeabi_dmul>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f5c:	f7f8 f95a 	bl	8000214 <__adddf3>
 8007f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f64:	3601      	adds	r6, #1
 8007f66:	9b05      	ldr	r3, [sp, #20]
 8007f68:	429e      	cmp	r6, r3
 8007f6a:	f1a7 0708 	sub.w	r7, r7, #8
 8007f6e:	ddeb      	ble.n	8007f48 <__kernel_rem_pio2+0xa0>
 8007f70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f74:	f108 0801 	add.w	r8, r8, #1
 8007f78:	ecaa 7b02 	vstmia	sl!, {d7}
 8007f7c:	3508      	adds	r5, #8
 8007f7e:	e7ca      	b.n	8007f16 <__kernel_rem_pio2+0x6e>
 8007f80:	9b00      	ldr	r3, [sp, #0]
 8007f82:	f8dd 8000 	ldr.w	r8, [sp]
 8007f86:	aa0c      	add	r2, sp, #48	@ 0x30
 8007f88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007f90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f96:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007f9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f9c:	ab98      	add	r3, sp, #608	@ 0x260
 8007f9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007fa2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007fa6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007faa:	ac0c      	add	r4, sp, #48	@ 0x30
 8007fac:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007fae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007fb2:	46a1      	mov	r9, r4
 8007fb4:	46c2      	mov	sl, r8
 8007fb6:	f1ba 0f00 	cmp.w	sl, #0
 8007fba:	f1a5 0508 	sub.w	r5, r5, #8
 8007fbe:	dc77      	bgt.n	80080b0 <__kernel_rem_pio2+0x208>
 8007fc0:	4658      	mov	r0, fp
 8007fc2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007fc6:	f000 fac7 	bl	8008558 <scalbn>
 8007fca:	ec57 6b10 	vmov	r6, r7, d0
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	4639      	mov	r1, r7
 8007fd8:	f7f8 fad2 	bl	8000580 <__aeabi_dmul>
 8007fdc:	ec41 0b10 	vmov	d0, r0, r1
 8007fe0:	f000 fb3a 	bl	8008658 <floor>
 8007fe4:	4b75      	ldr	r3, [pc, #468]	@ (80081bc <__kernel_rem_pio2+0x314>)
 8007fe6:	ec51 0b10 	vmov	r0, r1, d0
 8007fea:	2200      	movs	r2, #0
 8007fec:	f7f8 fac8 	bl	8000580 <__aeabi_dmul>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	4639      	mov	r1, r7
 8007ff8:	f7f8 f90a 	bl	8000210 <__aeabi_dsub>
 8007ffc:	460f      	mov	r7, r1
 8007ffe:	4606      	mov	r6, r0
 8008000:	f7f8 fd58 	bl	8000ab4 <__aeabi_d2iz>
 8008004:	9002      	str	r0, [sp, #8]
 8008006:	f7f8 fa51 	bl	80004ac <__aeabi_i2d>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4630      	mov	r0, r6
 8008010:	4639      	mov	r1, r7
 8008012:	f7f8 f8fd 	bl	8000210 <__aeabi_dsub>
 8008016:	f1bb 0f00 	cmp.w	fp, #0
 800801a:	4606      	mov	r6, r0
 800801c:	460f      	mov	r7, r1
 800801e:	dd6c      	ble.n	80080fa <__kernel_rem_pio2+0x252>
 8008020:	f108 31ff 	add.w	r1, r8, #4294967295
 8008024:	ab0c      	add	r3, sp, #48	@ 0x30
 8008026:	9d02      	ldr	r5, [sp, #8]
 8008028:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800802c:	f1cb 0018 	rsb	r0, fp, #24
 8008030:	fa43 f200 	asr.w	r2, r3, r0
 8008034:	4415      	add	r5, r2
 8008036:	4082      	lsls	r2, r0
 8008038:	1a9b      	subs	r3, r3, r2
 800803a:	aa0c      	add	r2, sp, #48	@ 0x30
 800803c:	9502      	str	r5, [sp, #8]
 800803e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008042:	f1cb 0217 	rsb	r2, fp, #23
 8008046:	fa43 f902 	asr.w	r9, r3, r2
 800804a:	f1b9 0f00 	cmp.w	r9, #0
 800804e:	dd64      	ble.n	800811a <__kernel_rem_pio2+0x272>
 8008050:	9b02      	ldr	r3, [sp, #8]
 8008052:	2200      	movs	r2, #0
 8008054:	3301      	adds	r3, #1
 8008056:	9302      	str	r3, [sp, #8]
 8008058:	4615      	mov	r5, r2
 800805a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800805e:	4590      	cmp	r8, r2
 8008060:	f300 80b8 	bgt.w	80081d4 <__kernel_rem_pio2+0x32c>
 8008064:	f1bb 0f00 	cmp.w	fp, #0
 8008068:	dd07      	ble.n	800807a <__kernel_rem_pio2+0x1d2>
 800806a:	f1bb 0f01 	cmp.w	fp, #1
 800806e:	f000 80bf 	beq.w	80081f0 <__kernel_rem_pio2+0x348>
 8008072:	f1bb 0f02 	cmp.w	fp, #2
 8008076:	f000 80c6 	beq.w	8008206 <__kernel_rem_pio2+0x35e>
 800807a:	f1b9 0f02 	cmp.w	r9, #2
 800807e:	d14c      	bne.n	800811a <__kernel_rem_pio2+0x272>
 8008080:	4632      	mov	r2, r6
 8008082:	463b      	mov	r3, r7
 8008084:	494e      	ldr	r1, [pc, #312]	@ (80081c0 <__kernel_rem_pio2+0x318>)
 8008086:	2000      	movs	r0, #0
 8008088:	f7f8 f8c2 	bl	8000210 <__aeabi_dsub>
 800808c:	4606      	mov	r6, r0
 800808e:	460f      	mov	r7, r1
 8008090:	2d00      	cmp	r5, #0
 8008092:	d042      	beq.n	800811a <__kernel_rem_pio2+0x272>
 8008094:	4658      	mov	r0, fp
 8008096:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80081b0 <__kernel_rem_pio2+0x308>
 800809a:	f000 fa5d 	bl	8008558 <scalbn>
 800809e:	4630      	mov	r0, r6
 80080a0:	4639      	mov	r1, r7
 80080a2:	ec53 2b10 	vmov	r2, r3, d0
 80080a6:	f7f8 f8b3 	bl	8000210 <__aeabi_dsub>
 80080aa:	4606      	mov	r6, r0
 80080ac:	460f      	mov	r7, r1
 80080ae:	e034      	b.n	800811a <__kernel_rem_pio2+0x272>
 80080b0:	4b44      	ldr	r3, [pc, #272]	@ (80081c4 <__kernel_rem_pio2+0x31c>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b8:	f7f8 fa62 	bl	8000580 <__aeabi_dmul>
 80080bc:	f7f8 fcfa 	bl	8000ab4 <__aeabi_d2iz>
 80080c0:	f7f8 f9f4 	bl	80004ac <__aeabi_i2d>
 80080c4:	4b40      	ldr	r3, [pc, #256]	@ (80081c8 <__kernel_rem_pio2+0x320>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	4606      	mov	r6, r0
 80080ca:	460f      	mov	r7, r1
 80080cc:	f7f8 fa58 	bl	8000580 <__aeabi_dmul>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d8:	f7f8 f89a 	bl	8000210 <__aeabi_dsub>
 80080dc:	f7f8 fcea 	bl	8000ab4 <__aeabi_d2iz>
 80080e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080e4:	f849 0b04 	str.w	r0, [r9], #4
 80080e8:	4639      	mov	r1, r7
 80080ea:	4630      	mov	r0, r6
 80080ec:	f7f8 f892 	bl	8000214 <__adddf3>
 80080f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080f8:	e75d      	b.n	8007fb6 <__kernel_rem_pio2+0x10e>
 80080fa:	d107      	bne.n	800810c <__kernel_rem_pio2+0x264>
 80080fc:	f108 33ff 	add.w	r3, r8, #4294967295
 8008100:	aa0c      	add	r2, sp, #48	@ 0x30
 8008102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008106:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800810a:	e79e      	b.n	800804a <__kernel_rem_pio2+0x1a2>
 800810c:	4b2f      	ldr	r3, [pc, #188]	@ (80081cc <__kernel_rem_pio2+0x324>)
 800810e:	2200      	movs	r2, #0
 8008110:	f7f8 fcbc 	bl	8000a8c <__aeabi_dcmpge>
 8008114:	2800      	cmp	r0, #0
 8008116:	d143      	bne.n	80081a0 <__kernel_rem_pio2+0x2f8>
 8008118:	4681      	mov	r9, r0
 800811a:	2200      	movs	r2, #0
 800811c:	2300      	movs	r3, #0
 800811e:	4630      	mov	r0, r6
 8008120:	4639      	mov	r1, r7
 8008122:	f7f8 fc95 	bl	8000a50 <__aeabi_dcmpeq>
 8008126:	2800      	cmp	r0, #0
 8008128:	f000 80bf 	beq.w	80082aa <__kernel_rem_pio2+0x402>
 800812c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008130:	2200      	movs	r2, #0
 8008132:	9900      	ldr	r1, [sp, #0]
 8008134:	428b      	cmp	r3, r1
 8008136:	da6e      	bge.n	8008216 <__kernel_rem_pio2+0x36e>
 8008138:	2a00      	cmp	r2, #0
 800813a:	f000 8089 	beq.w	8008250 <__kernel_rem_pio2+0x3a8>
 800813e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008142:	ab0c      	add	r3, sp, #48	@ 0x30
 8008144:	f1ab 0b18 	sub.w	fp, fp, #24
 8008148:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0f6      	beq.n	800813e <__kernel_rem_pio2+0x296>
 8008150:	4658      	mov	r0, fp
 8008152:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80081b0 <__kernel_rem_pio2+0x308>
 8008156:	f000 f9ff 	bl	8008558 <scalbn>
 800815a:	f108 0301 	add.w	r3, r8, #1
 800815e:	00da      	lsls	r2, r3, #3
 8008160:	9205      	str	r2, [sp, #20]
 8008162:	ec55 4b10 	vmov	r4, r5, d0
 8008166:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008168:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80081c4 <__kernel_rem_pio2+0x31c>
 800816c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008170:	4646      	mov	r6, r8
 8008172:	f04f 0a00 	mov.w	sl, #0
 8008176:	2e00      	cmp	r6, #0
 8008178:	f280 80cf 	bge.w	800831a <__kernel_rem_pio2+0x472>
 800817c:	4644      	mov	r4, r8
 800817e:	2c00      	cmp	r4, #0
 8008180:	f2c0 80fd 	blt.w	800837e <__kernel_rem_pio2+0x4d6>
 8008184:	4b12      	ldr	r3, [pc, #72]	@ (80081d0 <__kernel_rem_pio2+0x328>)
 8008186:	461f      	mov	r7, r3
 8008188:	ab70      	add	r3, sp, #448	@ 0x1c0
 800818a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800818e:	9306      	str	r3, [sp, #24]
 8008190:	f04f 0a00 	mov.w	sl, #0
 8008194:	f04f 0b00 	mov.w	fp, #0
 8008198:	2600      	movs	r6, #0
 800819a:	eba8 0504 	sub.w	r5, r8, r4
 800819e:	e0e2      	b.n	8008366 <__kernel_rem_pio2+0x4be>
 80081a0:	f04f 0902 	mov.w	r9, #2
 80081a4:	e754      	b.n	8008050 <__kernel_rem_pio2+0x1a8>
 80081a6:	bf00      	nop
	...
 80081b4:	3ff00000 	.word	0x3ff00000
 80081b8:	080089b0 	.word	0x080089b0
 80081bc:	40200000 	.word	0x40200000
 80081c0:	3ff00000 	.word	0x3ff00000
 80081c4:	3e700000 	.word	0x3e700000
 80081c8:	41700000 	.word	0x41700000
 80081cc:	3fe00000 	.word	0x3fe00000
 80081d0:	08008970 	.word	0x08008970
 80081d4:	f854 3b04 	ldr.w	r3, [r4], #4
 80081d8:	b945      	cbnz	r5, 80081ec <__kernel_rem_pio2+0x344>
 80081da:	b123      	cbz	r3, 80081e6 <__kernel_rem_pio2+0x33e>
 80081dc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80081e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80081e4:	2301      	movs	r3, #1
 80081e6:	3201      	adds	r2, #1
 80081e8:	461d      	mov	r5, r3
 80081ea:	e738      	b.n	800805e <__kernel_rem_pio2+0x1b6>
 80081ec:	1acb      	subs	r3, r1, r3
 80081ee:	e7f7      	b.n	80081e0 <__kernel_rem_pio2+0x338>
 80081f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80081f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80081f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80081fe:	a90c      	add	r1, sp, #48	@ 0x30
 8008200:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008204:	e739      	b.n	800807a <__kernel_rem_pio2+0x1d2>
 8008206:	f108 32ff 	add.w	r2, r8, #4294967295
 800820a:	ab0c      	add	r3, sp, #48	@ 0x30
 800820c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008210:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008214:	e7f3      	b.n	80081fe <__kernel_rem_pio2+0x356>
 8008216:	a90c      	add	r1, sp, #48	@ 0x30
 8008218:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800821c:	3b01      	subs	r3, #1
 800821e:	430a      	orrs	r2, r1
 8008220:	e787      	b.n	8008132 <__kernel_rem_pio2+0x28a>
 8008222:	3401      	adds	r4, #1
 8008224:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008228:	2a00      	cmp	r2, #0
 800822a:	d0fa      	beq.n	8008222 <__kernel_rem_pio2+0x37a>
 800822c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800822e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008232:	eb0d 0503 	add.w	r5, sp, r3
 8008236:	9b06      	ldr	r3, [sp, #24]
 8008238:	aa20      	add	r2, sp, #128	@ 0x80
 800823a:	4443      	add	r3, r8
 800823c:	f108 0701 	add.w	r7, r8, #1
 8008240:	3d98      	subs	r5, #152	@ 0x98
 8008242:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8008246:	4444      	add	r4, r8
 8008248:	42bc      	cmp	r4, r7
 800824a:	da04      	bge.n	8008256 <__kernel_rem_pio2+0x3ae>
 800824c:	46a0      	mov	r8, r4
 800824e:	e6a2      	b.n	8007f96 <__kernel_rem_pio2+0xee>
 8008250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008252:	2401      	movs	r4, #1
 8008254:	e7e6      	b.n	8008224 <__kernel_rem_pio2+0x37c>
 8008256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008258:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800825c:	f7f8 f926 	bl	80004ac <__aeabi_i2d>
 8008260:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8008528 <__kernel_rem_pio2+0x680>
 8008264:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008268:	ed8d 7b02 	vstr	d7, [sp, #8]
 800826c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008270:	46b2      	mov	sl, r6
 8008272:	f04f 0800 	mov.w	r8, #0
 8008276:	9b05      	ldr	r3, [sp, #20]
 8008278:	4598      	cmp	r8, r3
 800827a:	dd05      	ble.n	8008288 <__kernel_rem_pio2+0x3e0>
 800827c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008280:	3701      	adds	r7, #1
 8008282:	eca5 7b02 	vstmia	r5!, {d7}
 8008286:	e7df      	b.n	8008248 <__kernel_rem_pio2+0x3a0>
 8008288:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800828c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008290:	f7f8 f976 	bl	8000580 <__aeabi_dmul>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800829c:	f7f7 ffba 	bl	8000214 <__adddf3>
 80082a0:	f108 0801 	add.w	r8, r8, #1
 80082a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082a8:	e7e5      	b.n	8008276 <__kernel_rem_pio2+0x3ce>
 80082aa:	f1cb 0000 	rsb	r0, fp, #0
 80082ae:	ec47 6b10 	vmov	d0, r6, r7
 80082b2:	f000 f951 	bl	8008558 <scalbn>
 80082b6:	ec55 4b10 	vmov	r4, r5, d0
 80082ba:	4b9d      	ldr	r3, [pc, #628]	@ (8008530 <__kernel_rem_pio2+0x688>)
 80082bc:	2200      	movs	r2, #0
 80082be:	4620      	mov	r0, r4
 80082c0:	4629      	mov	r1, r5
 80082c2:	f7f8 fbe3 	bl	8000a8c <__aeabi_dcmpge>
 80082c6:	b300      	cbz	r0, 800830a <__kernel_rem_pio2+0x462>
 80082c8:	4b9a      	ldr	r3, [pc, #616]	@ (8008534 <__kernel_rem_pio2+0x68c>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	4620      	mov	r0, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	f7f8 f956 	bl	8000580 <__aeabi_dmul>
 80082d4:	f7f8 fbee 	bl	8000ab4 <__aeabi_d2iz>
 80082d8:	4606      	mov	r6, r0
 80082da:	f7f8 f8e7 	bl	80004ac <__aeabi_i2d>
 80082de:	4b94      	ldr	r3, [pc, #592]	@ (8008530 <__kernel_rem_pio2+0x688>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	f7f8 f94d 	bl	8000580 <__aeabi_dmul>
 80082e6:	460b      	mov	r3, r1
 80082e8:	4602      	mov	r2, r0
 80082ea:	4629      	mov	r1, r5
 80082ec:	4620      	mov	r0, r4
 80082ee:	f7f7 ff8f 	bl	8000210 <__aeabi_dsub>
 80082f2:	f7f8 fbdf 	bl	8000ab4 <__aeabi_d2iz>
 80082f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80082f8:	f10b 0b18 	add.w	fp, fp, #24
 80082fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008300:	f108 0801 	add.w	r8, r8, #1
 8008304:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8008308:	e722      	b.n	8008150 <__kernel_rem_pio2+0x2a8>
 800830a:	4620      	mov	r0, r4
 800830c:	4629      	mov	r1, r5
 800830e:	f7f8 fbd1 	bl	8000ab4 <__aeabi_d2iz>
 8008312:	ab0c      	add	r3, sp, #48	@ 0x30
 8008314:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008318:	e71a      	b.n	8008150 <__kernel_rem_pio2+0x2a8>
 800831a:	ab0c      	add	r3, sp, #48	@ 0x30
 800831c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008320:	f7f8 f8c4 	bl	80004ac <__aeabi_i2d>
 8008324:	4622      	mov	r2, r4
 8008326:	462b      	mov	r3, r5
 8008328:	f7f8 f92a 	bl	8000580 <__aeabi_dmul>
 800832c:	4652      	mov	r2, sl
 800832e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8008332:	465b      	mov	r3, fp
 8008334:	4620      	mov	r0, r4
 8008336:	4629      	mov	r1, r5
 8008338:	f7f8 f922 	bl	8000580 <__aeabi_dmul>
 800833c:	3e01      	subs	r6, #1
 800833e:	4604      	mov	r4, r0
 8008340:	460d      	mov	r5, r1
 8008342:	e718      	b.n	8008176 <__kernel_rem_pio2+0x2ce>
 8008344:	9906      	ldr	r1, [sp, #24]
 8008346:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800834a:	9106      	str	r1, [sp, #24]
 800834c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008350:	f7f8 f916 	bl	8000580 <__aeabi_dmul>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4650      	mov	r0, sl
 800835a:	4659      	mov	r1, fp
 800835c:	f7f7 ff5a 	bl	8000214 <__adddf3>
 8008360:	3601      	adds	r6, #1
 8008362:	4682      	mov	sl, r0
 8008364:	468b      	mov	fp, r1
 8008366:	9b00      	ldr	r3, [sp, #0]
 8008368:	429e      	cmp	r6, r3
 800836a:	dc01      	bgt.n	8008370 <__kernel_rem_pio2+0x4c8>
 800836c:	42b5      	cmp	r5, r6
 800836e:	dae9      	bge.n	8008344 <__kernel_rem_pio2+0x49c>
 8008370:	ab48      	add	r3, sp, #288	@ 0x120
 8008372:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008376:	e9c5 ab00 	strd	sl, fp, [r5]
 800837a:	3c01      	subs	r4, #1
 800837c:	e6ff      	b.n	800817e <__kernel_rem_pio2+0x2d6>
 800837e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008380:	2b02      	cmp	r3, #2
 8008382:	dc0b      	bgt.n	800839c <__kernel_rem_pio2+0x4f4>
 8008384:	2b00      	cmp	r3, #0
 8008386:	dc39      	bgt.n	80083fc <__kernel_rem_pio2+0x554>
 8008388:	d05d      	beq.n	8008446 <__kernel_rem_pio2+0x59e>
 800838a:	9b02      	ldr	r3, [sp, #8]
 800838c:	f003 0007 	and.w	r0, r3, #7
 8008390:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8008394:	ecbd 8b02 	vpop	{d8}
 8008398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d1f3      	bne.n	800838a <__kernel_rem_pio2+0x4e2>
 80083a2:	9b05      	ldr	r3, [sp, #20]
 80083a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80083a8:	eb0d 0403 	add.w	r4, sp, r3
 80083ac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80083b0:	4625      	mov	r5, r4
 80083b2:	46c2      	mov	sl, r8
 80083b4:	f1ba 0f00 	cmp.w	sl, #0
 80083b8:	f1a5 0508 	sub.w	r5, r5, #8
 80083bc:	dc6b      	bgt.n	8008496 <__kernel_rem_pio2+0x5ee>
 80083be:	4645      	mov	r5, r8
 80083c0:	2d01      	cmp	r5, #1
 80083c2:	f1a4 0408 	sub.w	r4, r4, #8
 80083c6:	f300 8087 	bgt.w	80084d8 <__kernel_rem_pio2+0x630>
 80083ca:	9c05      	ldr	r4, [sp, #20]
 80083cc:	ab48      	add	r3, sp, #288	@ 0x120
 80083ce:	441c      	add	r4, r3
 80083d0:	2000      	movs	r0, #0
 80083d2:	2100      	movs	r1, #0
 80083d4:	f1b8 0f01 	cmp.w	r8, #1
 80083d8:	f300 809c 	bgt.w	8008514 <__kernel_rem_pio2+0x66c>
 80083dc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80083e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80083e4:	f1b9 0f00 	cmp.w	r9, #0
 80083e8:	f040 80a6 	bne.w	8008538 <__kernel_rem_pio2+0x690>
 80083ec:	9b04      	ldr	r3, [sp, #16]
 80083ee:	e9c3 7800 	strd	r7, r8, [r3]
 80083f2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80083f6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80083fa:	e7c6      	b.n	800838a <__kernel_rem_pio2+0x4e2>
 80083fc:	9d05      	ldr	r5, [sp, #20]
 80083fe:	ab48      	add	r3, sp, #288	@ 0x120
 8008400:	441d      	add	r5, r3
 8008402:	4644      	mov	r4, r8
 8008404:	2000      	movs	r0, #0
 8008406:	2100      	movs	r1, #0
 8008408:	2c00      	cmp	r4, #0
 800840a:	da35      	bge.n	8008478 <__kernel_rem_pio2+0x5d0>
 800840c:	f1b9 0f00 	cmp.w	r9, #0
 8008410:	d038      	beq.n	8008484 <__kernel_rem_pio2+0x5dc>
 8008412:	4602      	mov	r2, r0
 8008414:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008418:	9c04      	ldr	r4, [sp, #16]
 800841a:	e9c4 2300 	strd	r2, r3, [r4]
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8008426:	f7f7 fef3 	bl	8000210 <__aeabi_dsub>
 800842a:	ad4a      	add	r5, sp, #296	@ 0x128
 800842c:	2401      	movs	r4, #1
 800842e:	45a0      	cmp	r8, r4
 8008430:	da2b      	bge.n	800848a <__kernel_rem_pio2+0x5e2>
 8008432:	f1b9 0f00 	cmp.w	r9, #0
 8008436:	d002      	beq.n	800843e <__kernel_rem_pio2+0x596>
 8008438:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800843c:	4619      	mov	r1, r3
 800843e:	9b04      	ldr	r3, [sp, #16]
 8008440:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008444:	e7a1      	b.n	800838a <__kernel_rem_pio2+0x4e2>
 8008446:	9c05      	ldr	r4, [sp, #20]
 8008448:	ab48      	add	r3, sp, #288	@ 0x120
 800844a:	441c      	add	r4, r3
 800844c:	2000      	movs	r0, #0
 800844e:	2100      	movs	r1, #0
 8008450:	f1b8 0f00 	cmp.w	r8, #0
 8008454:	da09      	bge.n	800846a <__kernel_rem_pio2+0x5c2>
 8008456:	f1b9 0f00 	cmp.w	r9, #0
 800845a:	d002      	beq.n	8008462 <__kernel_rem_pio2+0x5ba>
 800845c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008460:	4619      	mov	r1, r3
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	e9c3 0100 	strd	r0, r1, [r3]
 8008468:	e78f      	b.n	800838a <__kernel_rem_pio2+0x4e2>
 800846a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800846e:	f7f7 fed1 	bl	8000214 <__adddf3>
 8008472:	f108 38ff 	add.w	r8, r8, #4294967295
 8008476:	e7eb      	b.n	8008450 <__kernel_rem_pio2+0x5a8>
 8008478:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800847c:	f7f7 feca 	bl	8000214 <__adddf3>
 8008480:	3c01      	subs	r4, #1
 8008482:	e7c1      	b.n	8008408 <__kernel_rem_pio2+0x560>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	e7c6      	b.n	8008418 <__kernel_rem_pio2+0x570>
 800848a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800848e:	f7f7 fec1 	bl	8000214 <__adddf3>
 8008492:	3401      	adds	r4, #1
 8008494:	e7cb      	b.n	800842e <__kernel_rem_pio2+0x586>
 8008496:	ed95 7b00 	vldr	d7, [r5]
 800849a:	ed8d 7b00 	vstr	d7, [sp]
 800849e:	ed95 7b02 	vldr	d7, [r5, #8]
 80084a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084a6:	ec53 2b17 	vmov	r2, r3, d7
 80084aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80084ae:	f7f7 feb1 	bl	8000214 <__adddf3>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4606      	mov	r6, r0
 80084b8:	460f      	mov	r7, r1
 80084ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084be:	f7f7 fea7 	bl	8000210 <__aeabi_dsub>
 80084c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084c6:	f7f7 fea5 	bl	8000214 <__adddf3>
 80084ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80084d2:	e9c5 6700 	strd	r6, r7, [r5]
 80084d6:	e76d      	b.n	80083b4 <__kernel_rem_pio2+0x50c>
 80084d8:	ed94 7b00 	vldr	d7, [r4]
 80084dc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80084e0:	ec51 0b17 	vmov	r0, r1, d7
 80084e4:	4652      	mov	r2, sl
 80084e6:	465b      	mov	r3, fp
 80084e8:	ed8d 7b00 	vstr	d7, [sp]
 80084ec:	f7f7 fe92 	bl	8000214 <__adddf3>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4606      	mov	r6, r0
 80084f6:	460f      	mov	r7, r1
 80084f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084fc:	f7f7 fe88 	bl	8000210 <__aeabi_dsub>
 8008500:	4652      	mov	r2, sl
 8008502:	465b      	mov	r3, fp
 8008504:	f7f7 fe86 	bl	8000214 <__adddf3>
 8008508:	3d01      	subs	r5, #1
 800850a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800850e:	e9c4 6700 	strd	r6, r7, [r4]
 8008512:	e755      	b.n	80083c0 <__kernel_rem_pio2+0x518>
 8008514:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008518:	f7f7 fe7c 	bl	8000214 <__adddf3>
 800851c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008520:	e758      	b.n	80083d4 <__kernel_rem_pio2+0x52c>
 8008522:	bf00      	nop
 8008524:	f3af 8000 	nop.w
	...
 8008530:	41700000 	.word	0x41700000
 8008534:	3e700000 	.word	0x3e700000
 8008538:	9b04      	ldr	r3, [sp, #16]
 800853a:	9a04      	ldr	r2, [sp, #16]
 800853c:	601f      	str	r7, [r3, #0]
 800853e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8008542:	605c      	str	r4, [r3, #4]
 8008544:	609d      	str	r5, [r3, #8]
 8008546:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800854a:	60d3      	str	r3, [r2, #12]
 800854c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008550:	6110      	str	r0, [r2, #16]
 8008552:	6153      	str	r3, [r2, #20]
 8008554:	e719      	b.n	800838a <__kernel_rem_pio2+0x4e2>
 8008556:	bf00      	nop

08008558 <scalbn>:
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	ec55 4b10 	vmov	r4, r5, d0
 800855e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008562:	4606      	mov	r6, r0
 8008564:	462b      	mov	r3, r5
 8008566:	b991      	cbnz	r1, 800858e <scalbn+0x36>
 8008568:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800856c:	4323      	orrs	r3, r4
 800856e:	d03d      	beq.n	80085ec <scalbn+0x94>
 8008570:	4b35      	ldr	r3, [pc, #212]	@ (8008648 <scalbn+0xf0>)
 8008572:	4620      	mov	r0, r4
 8008574:	4629      	mov	r1, r5
 8008576:	2200      	movs	r2, #0
 8008578:	f7f8 f802 	bl	8000580 <__aeabi_dmul>
 800857c:	4b33      	ldr	r3, [pc, #204]	@ (800864c <scalbn+0xf4>)
 800857e:	429e      	cmp	r6, r3
 8008580:	4604      	mov	r4, r0
 8008582:	460d      	mov	r5, r1
 8008584:	da0f      	bge.n	80085a6 <scalbn+0x4e>
 8008586:	a328      	add	r3, pc, #160	@ (adr r3, 8008628 <scalbn+0xd0>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	e01e      	b.n	80085cc <scalbn+0x74>
 800858e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008592:	4291      	cmp	r1, r2
 8008594:	d10b      	bne.n	80085ae <scalbn+0x56>
 8008596:	4622      	mov	r2, r4
 8008598:	4620      	mov	r0, r4
 800859a:	4629      	mov	r1, r5
 800859c:	f7f7 fe3a 	bl	8000214 <__adddf3>
 80085a0:	4604      	mov	r4, r0
 80085a2:	460d      	mov	r5, r1
 80085a4:	e022      	b.n	80085ec <scalbn+0x94>
 80085a6:	460b      	mov	r3, r1
 80085a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80085ac:	3936      	subs	r1, #54	@ 0x36
 80085ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80085b2:	4296      	cmp	r6, r2
 80085b4:	dd0d      	ble.n	80085d2 <scalbn+0x7a>
 80085b6:	2d00      	cmp	r5, #0
 80085b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008630 <scalbn+0xd8>)
 80085ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085be:	da02      	bge.n	80085c6 <scalbn+0x6e>
 80085c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008638 <scalbn+0xe0>)
 80085c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008630 <scalbn+0xd8>)
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f7f7 ffd8 	bl	8000580 <__aeabi_dmul>
 80085d0:	e7e6      	b.n	80085a0 <scalbn+0x48>
 80085d2:	1872      	adds	r2, r6, r1
 80085d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80085d8:	428a      	cmp	r2, r1
 80085da:	dcec      	bgt.n	80085b6 <scalbn+0x5e>
 80085dc:	2a00      	cmp	r2, #0
 80085de:	dd08      	ble.n	80085f2 <scalbn+0x9a>
 80085e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80085e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80085e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80085ec:	ec45 4b10 	vmov	d0, r4, r5
 80085f0:	bd70      	pop	{r4, r5, r6, pc}
 80085f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80085f6:	da08      	bge.n	800860a <scalbn+0xb2>
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	a10b      	add	r1, pc, #44	@ (adr r1, 8008628 <scalbn+0xd0>)
 80085fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008600:	dac1      	bge.n	8008586 <scalbn+0x2e>
 8008602:	a10f      	add	r1, pc, #60	@ (adr r1, 8008640 <scalbn+0xe8>)
 8008604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008608:	e7bd      	b.n	8008586 <scalbn+0x2e>
 800860a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800860e:	3236      	adds	r2, #54	@ 0x36
 8008610:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008614:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008618:	4620      	mov	r0, r4
 800861a:	4b0d      	ldr	r3, [pc, #52]	@ (8008650 <scalbn+0xf8>)
 800861c:	4629      	mov	r1, r5
 800861e:	2200      	movs	r2, #0
 8008620:	e7d4      	b.n	80085cc <scalbn+0x74>
 8008622:	bf00      	nop
 8008624:	f3af 8000 	nop.w
 8008628:	c2f8f359 	.word	0xc2f8f359
 800862c:	01a56e1f 	.word	0x01a56e1f
 8008630:	8800759c 	.word	0x8800759c
 8008634:	7e37e43c 	.word	0x7e37e43c
 8008638:	8800759c 	.word	0x8800759c
 800863c:	fe37e43c 	.word	0xfe37e43c
 8008640:	c2f8f359 	.word	0xc2f8f359
 8008644:	81a56e1f 	.word	0x81a56e1f
 8008648:	43500000 	.word	0x43500000
 800864c:	ffff3cb0 	.word	0xffff3cb0
 8008650:	3c900000 	.word	0x3c900000
 8008654:	00000000 	.word	0x00000000

08008658 <floor>:
 8008658:	ec51 0b10 	vmov	r0, r1, d0
 800865c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008664:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008668:	2e13      	cmp	r6, #19
 800866a:	460c      	mov	r4, r1
 800866c:	4605      	mov	r5, r0
 800866e:	4680      	mov	r8, r0
 8008670:	dc34      	bgt.n	80086dc <floor+0x84>
 8008672:	2e00      	cmp	r6, #0
 8008674:	da17      	bge.n	80086a6 <floor+0x4e>
 8008676:	a332      	add	r3, pc, #200	@ (adr r3, 8008740 <floor+0xe8>)
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	f7f7 fdca 	bl	8000214 <__adddf3>
 8008680:	2200      	movs	r2, #0
 8008682:	2300      	movs	r3, #0
 8008684:	f7f8 fa0c 	bl	8000aa0 <__aeabi_dcmpgt>
 8008688:	b150      	cbz	r0, 80086a0 <floor+0x48>
 800868a:	2c00      	cmp	r4, #0
 800868c:	da55      	bge.n	800873a <floor+0xe2>
 800868e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008692:	432c      	orrs	r4, r5
 8008694:	2500      	movs	r5, #0
 8008696:	42ac      	cmp	r4, r5
 8008698:	4c2b      	ldr	r4, [pc, #172]	@ (8008748 <floor+0xf0>)
 800869a:	bf08      	it	eq
 800869c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80086a0:	4621      	mov	r1, r4
 80086a2:	4628      	mov	r0, r5
 80086a4:	e023      	b.n	80086ee <floor+0x96>
 80086a6:	4f29      	ldr	r7, [pc, #164]	@ (800874c <floor+0xf4>)
 80086a8:	4137      	asrs	r7, r6
 80086aa:	ea01 0307 	and.w	r3, r1, r7
 80086ae:	4303      	orrs	r3, r0
 80086b0:	d01d      	beq.n	80086ee <floor+0x96>
 80086b2:	a323      	add	r3, pc, #140	@ (adr r3, 8008740 <floor+0xe8>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	f7f7 fdac 	bl	8000214 <__adddf3>
 80086bc:	2200      	movs	r2, #0
 80086be:	2300      	movs	r3, #0
 80086c0:	f7f8 f9ee 	bl	8000aa0 <__aeabi_dcmpgt>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d0eb      	beq.n	80086a0 <floor+0x48>
 80086c8:	2c00      	cmp	r4, #0
 80086ca:	bfbe      	ittt	lt
 80086cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80086d0:	4133      	asrlt	r3, r6
 80086d2:	18e4      	addlt	r4, r4, r3
 80086d4:	ea24 0407 	bic.w	r4, r4, r7
 80086d8:	2500      	movs	r5, #0
 80086da:	e7e1      	b.n	80086a0 <floor+0x48>
 80086dc:	2e33      	cmp	r6, #51	@ 0x33
 80086de:	dd0a      	ble.n	80086f6 <floor+0x9e>
 80086e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80086e4:	d103      	bne.n	80086ee <floor+0x96>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	f7f7 fd93 	bl	8000214 <__adddf3>
 80086ee:	ec41 0b10 	vmov	d0, r0, r1
 80086f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80086fa:	f04f 37ff 	mov.w	r7, #4294967295
 80086fe:	40df      	lsrs	r7, r3
 8008700:	4207      	tst	r7, r0
 8008702:	d0f4      	beq.n	80086ee <floor+0x96>
 8008704:	a30e      	add	r3, pc, #56	@ (adr r3, 8008740 <floor+0xe8>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f7f7 fd83 	bl	8000214 <__adddf3>
 800870e:	2200      	movs	r2, #0
 8008710:	2300      	movs	r3, #0
 8008712:	f7f8 f9c5 	bl	8000aa0 <__aeabi_dcmpgt>
 8008716:	2800      	cmp	r0, #0
 8008718:	d0c2      	beq.n	80086a0 <floor+0x48>
 800871a:	2c00      	cmp	r4, #0
 800871c:	da0a      	bge.n	8008734 <floor+0xdc>
 800871e:	2e14      	cmp	r6, #20
 8008720:	d101      	bne.n	8008726 <floor+0xce>
 8008722:	3401      	adds	r4, #1
 8008724:	e006      	b.n	8008734 <floor+0xdc>
 8008726:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800872a:	2301      	movs	r3, #1
 800872c:	40b3      	lsls	r3, r6
 800872e:	441d      	add	r5, r3
 8008730:	4545      	cmp	r5, r8
 8008732:	d3f6      	bcc.n	8008722 <floor+0xca>
 8008734:	ea25 0507 	bic.w	r5, r5, r7
 8008738:	e7b2      	b.n	80086a0 <floor+0x48>
 800873a:	2500      	movs	r5, #0
 800873c:	462c      	mov	r4, r5
 800873e:	e7af      	b.n	80086a0 <floor+0x48>
 8008740:	8800759c 	.word	0x8800759c
 8008744:	7e37e43c 	.word	0x7e37e43c
 8008748:	bff00000 	.word	0xbff00000
 800874c:	000fffff 	.word	0x000fffff

08008750 <memset>:
 8008750:	4402      	add	r2, r0
 8008752:	4603      	mov	r3, r0
 8008754:	4293      	cmp	r3, r2
 8008756:	d100      	bne.n	800875a <memset+0xa>
 8008758:	4770      	bx	lr
 800875a:	f803 1b01 	strb.w	r1, [r3], #1
 800875e:	e7f9      	b.n	8008754 <memset+0x4>

08008760 <__libc_init_array>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	4d0d      	ldr	r5, [pc, #52]	@ (8008798 <__libc_init_array+0x38>)
 8008764:	4c0d      	ldr	r4, [pc, #52]	@ (800879c <__libc_init_array+0x3c>)
 8008766:	1b64      	subs	r4, r4, r5
 8008768:	10a4      	asrs	r4, r4, #2
 800876a:	2600      	movs	r6, #0
 800876c:	42a6      	cmp	r6, r4
 800876e:	d109      	bne.n	8008784 <__libc_init_array+0x24>
 8008770:	4d0b      	ldr	r5, [pc, #44]	@ (80087a0 <__libc_init_array+0x40>)
 8008772:	4c0c      	ldr	r4, [pc, #48]	@ (80087a4 <__libc_init_array+0x44>)
 8008774:	f000 f818 	bl	80087a8 <_init>
 8008778:	1b64      	subs	r4, r4, r5
 800877a:	10a4      	asrs	r4, r4, #2
 800877c:	2600      	movs	r6, #0
 800877e:	42a6      	cmp	r6, r4
 8008780:	d105      	bne.n	800878e <__libc_init_array+0x2e>
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	f855 3b04 	ldr.w	r3, [r5], #4
 8008788:	4798      	blx	r3
 800878a:	3601      	adds	r6, #1
 800878c:	e7ee      	b.n	800876c <__libc_init_array+0xc>
 800878e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008792:	4798      	blx	r3
 8008794:	3601      	adds	r6, #1
 8008796:	e7f2      	b.n	800877e <__libc_init_array+0x1e>
 8008798:	080089c8 	.word	0x080089c8
 800879c:	080089c8 	.word	0x080089c8
 80087a0:	080089c8 	.word	0x080089c8
 80087a4:	080089cc 	.word	0x080089cc

080087a8 <_init>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr

080087b4 <_fini>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	bf00      	nop
 80087b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ba:	bc08      	pop	{r3}
 80087bc:	469e      	mov	lr, r3
 80087be:	4770      	bx	lr
